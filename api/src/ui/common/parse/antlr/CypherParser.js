// Generated from src/common/parse/antlr/Cypher.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import CypherListener from './CypherListener.js';
const serializedATN = [4,1,149,2201,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
1,0,3,0,274,8,0,1,0,1,0,1,0,3,0,279,8,0,1,0,3,0,282,8,0,1,0,3,0,285,8,0,
1,0,1,0,1,1,1,1,3,1,291,8,1,5,1,293,8,1,10,1,12,1,296,9,1,1,2,1,2,1,2,3,
2,301,8,2,1,3,1,3,1,3,3,3,306,8,3,1,3,1,3,5,3,310,8,3,10,3,12,3,313,9,3,
1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,3,7,323,8,7,1,7,1,7,3,7,327,8,7,1,7,1,7,
1,8,1,8,3,8,333,8,8,1,9,1,9,1,9,1,9,3,9,339,8,9,1,10,1,10,1,10,1,10,1,10,
1,11,1,11,3,11,348,8,11,1,11,5,11,351,8,11,10,11,12,11,354,9,11,1,12,1,12,
3,12,358,8,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,369,8,13,
1,14,1,14,1,14,1,15,1,15,1,15,1,15,3,15,378,8,15,1,15,1,15,1,15,3,15,383,
8,15,1,15,3,15,386,8,15,1,16,3,16,389,8,16,1,16,1,16,3,16,393,8,16,1,16,
3,16,396,8,16,1,17,1,17,3,17,400,8,17,5,17,402,8,17,10,17,12,17,405,9,17,
1,17,1,17,1,17,3,17,410,8,17,5,17,412,8,17,10,17,12,17,415,9,17,1,17,1,17,
3,17,419,8,17,1,17,5,17,422,8,17,10,17,12,17,425,9,17,1,17,3,17,428,8,17,
1,17,3,17,431,8,17,3,17,433,8,17,1,18,1,18,3,18,437,8,18,5,18,439,8,18,10,
18,12,18,442,9,18,1,18,1,18,3,18,446,8,18,5,18,448,8,18,10,18,12,18,451,
9,18,1,18,1,18,3,18,455,8,18,4,18,457,8,18,11,18,12,18,458,1,18,1,18,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,3,19,470,8,19,1,20,1,20,1,20,1,20,1,20,3,20,
477,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,487,8,21,1,22,1,22,
1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,
26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,
1,29,1,30,1,30,1,30,1,30,3,30,525,8,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,
1,31,1,31,3,31,536,8,31,1,31,1,31,1,31,1,31,1,31,3,31,543,8,31,1,31,1,31,
1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,557,8,32,1,32,1,32,
1,32,1,32,1,32,3,32,564,8,32,1,32,1,32,1,32,1,32,3,32,570,8,32,1,32,1,32,
1,32,1,32,1,33,1,33,1,33,1,33,3,33,580,8,33,1,33,1,33,3,33,584,8,33,1,33,
1,33,1,33,1,33,3,33,590,8,33,1,33,1,33,1,33,1,33,1,34,1,34,3,34,598,8,34,
1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,609,8,34,1,34,1,34,1,34,
1,34,3,34,615,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,
627,8,34,1,34,1,34,1,34,1,34,3,34,633,8,34,1,34,1,34,1,34,1,34,1,34,1,34,
1,34,1,34,1,34,1,34,3,34,645,8,34,1,34,1,34,3,34,649,8,34,1,35,1,35,1,35,
1,35,1,35,1,35,1,35,1,35,3,35,659,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
1,35,1,35,1,35,1,35,3,35,672,8,35,1,35,3,35,675,8,35,1,36,1,36,3,36,679,
8,36,1,36,1,36,3,36,683,8,36,1,36,1,36,5,36,687,8,36,10,36,12,36,690,9,36,
1,36,3,36,693,8,36,1,36,3,36,696,8,36,1,37,1,37,3,37,700,8,37,1,37,1,37,
1,37,1,37,1,37,1,37,1,38,1,38,3,38,710,8,38,1,38,1,38,1,38,5,38,715,8,38,
10,38,12,38,718,9,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,
39,730,8,39,1,40,1,40,3,40,734,8,40,1,40,1,40,1,41,1,41,1,41,1,41,3,41,742,
8,41,1,41,1,41,1,42,1,42,3,42,748,8,42,1,42,1,42,3,42,752,8,42,1,42,1,42,
3,42,756,8,42,1,42,5,42,759,8,42,10,42,12,42,762,9,42,1,43,1,43,3,43,766,
8,43,1,43,1,43,3,43,770,8,43,1,43,1,43,1,43,1,43,3,43,776,8,43,1,43,1,43,
3,43,780,8,43,1,43,1,43,1,43,1,43,3,43,786,8,43,1,43,1,43,3,43,790,8,43,
1,43,1,43,1,43,1,43,3,43,796,8,43,1,43,1,43,3,43,800,8,43,1,44,1,44,3,44,
804,8,44,1,44,1,44,3,44,808,8,44,1,44,1,44,3,44,812,8,44,1,44,1,44,3,44,
816,8,44,1,44,5,44,819,8,44,10,44,12,44,822,9,44,1,45,1,45,1,45,1,45,3,45,
828,8,45,1,45,1,45,3,45,832,8,45,1,45,5,45,835,8,45,10,45,12,45,838,9,45,
1,46,1,46,1,46,1,46,3,46,844,8,46,1,47,1,47,3,47,848,8,47,1,47,1,47,3,47,
852,8,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,860,8,47,1,47,1,47,1,47,4,47,
865,8,47,11,47,12,47,866,1,47,3,47,870,8,47,1,47,1,47,1,48,1,48,1,48,1,48,
3,48,878,8,48,1,48,1,48,1,48,3,48,883,8,48,1,49,1,49,3,49,887,8,49,1,49,
1,49,3,49,891,8,49,1,49,1,49,3,49,895,8,49,1,49,1,49,3,49,899,8,49,1,49,
3,49,902,8,49,1,50,1,50,1,50,1,50,3,50,908,8,50,1,50,1,50,1,50,1,50,3,50,
914,8,50,1,51,1,51,3,51,918,8,51,1,51,1,51,3,51,922,8,51,1,51,5,51,925,8,
51,10,51,12,51,928,9,51,1,51,3,51,931,8,51,1,52,1,52,1,52,1,52,1,52,3,52,
938,8,52,1,52,1,52,1,53,1,53,3,53,944,8,53,1,53,3,53,947,8,53,1,53,1,53,
1,53,3,53,952,8,53,1,53,3,53,955,8,53,1,54,1,54,3,54,959,8,54,1,54,3,54,
962,8,54,1,54,1,54,1,54,1,55,1,55,1,55,3,55,970,8,55,1,55,1,55,3,55,974,
8,55,1,55,1,55,3,55,978,8,55,1,56,1,56,3,56,982,8,56,1,56,1,56,3,56,986,
8,56,1,56,5,56,989,8,56,10,56,12,56,992,9,56,1,56,1,56,3,56,996,8,56,1,56,
1,56,3,56,1000,8,56,1,56,5,56,1003,8,56,10,56,12,56,1006,9,56,3,56,1008,
8,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,1017,8,57,1,58,1,58,1,58,1,
58,1,58,1,58,1,58,3,58,1026,8,58,1,58,5,58,1029,8,58,10,58,12,58,1032,9,
58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,3,61,1044,8,61,1,61,
3,61,1047,8,61,1,62,3,62,1050,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1070,8,62,1,62,
1,62,3,62,1074,8,62,1,62,5,62,1077,8,62,10,62,12,62,1080,9,62,1,62,1,62,
1,62,1,62,1,62,1,62,1,62,3,62,1089,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,
63,3,63,1098,8,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,3,64,1107,8,64,1,64,
1,64,1,65,1,65,1,65,1,65,3,65,1115,8,65,1,65,1,65,1,66,1,66,3,66,1121,8,
66,1,66,1,66,3,66,1125,8,66,1,66,5,66,1128,8,66,10,66,12,66,1131,9,66,1,
67,1,67,1,67,1,67,1,68,1,68,3,68,1139,8,68,1,68,1,68,3,68,1143,8,68,1,68,
5,68,1146,8,68,10,68,12,68,1149,9,68,1,69,1,69,3,69,1153,8,69,1,69,1,69,
3,69,1157,8,69,1,69,1,69,1,69,3,69,1162,8,69,1,70,1,70,3,70,1166,8,70,1,
71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1178,8,71,1,72,1,72,
3,72,1182,8,72,1,72,5,72,1185,8,72,10,72,12,72,1188,9,72,1,72,1,72,1,72,
1,72,3,72,1194,8,72,1,73,1,73,3,73,1198,8,73,1,73,1,73,3,73,1202,8,73,3,
73,1204,8,73,1,73,1,73,3,73,1208,8,73,3,73,1210,8,73,1,73,1,73,3,73,1214,
8,73,3,73,1216,8,73,1,73,1,73,1,74,1,74,3,74,1222,8,74,1,74,1,74,1,75,1,
75,3,75,1228,8,75,1,75,1,75,3,75,1232,8,75,1,75,3,75,1235,8,75,1,75,3,75,
1238,8,75,1,75,1,75,3,75,1242,8,75,1,75,1,75,1,75,1,75,3,75,1248,8,75,1,
75,1,75,3,75,1252,8,75,1,75,3,75,1255,8,75,1,75,3,75,1258,8,75,1,75,1,75,
1,75,1,75,3,75,1264,8,75,1,75,3,75,1267,8,75,1,75,3,75,1270,8,75,1,75,1,
75,3,75,1274,8,75,1,75,1,75,1,75,1,75,3,75,1280,8,75,1,75,3,75,1283,8,75,
1,75,3,75,1286,8,75,1,75,1,75,3,75,1290,8,75,1,76,1,76,3,76,1294,8,76,1,
76,1,76,3,76,1298,8,76,3,76,1300,8,76,1,76,1,76,3,76,1304,8,76,3,76,1306,
8,76,1,76,3,76,1309,8,76,1,76,1,76,3,76,1313,8,76,3,76,1315,8,76,1,76,1,
76,1,77,1,77,1,77,3,77,1322,8,77,1,78,1,78,3,78,1326,8,78,1,78,1,78,1,79,
1,79,3,79,1332,8,79,1,79,1,79,3,79,1336,8,79,1,79,1,79,3,79,1340,8,79,1,
79,3,79,1343,8,79,1,79,5,79,1346,8,79,10,79,12,79,1349,9,79,1,80,1,80,3,
80,1353,8,80,1,80,5,80,1356,8,80,10,80,12,80,1359,9,80,1,81,1,81,3,81,1363,
8,81,1,81,1,81,1,82,1,82,3,82,1369,8,82,1,82,1,82,3,82,1373,8,82,3,82,1375,
8,82,1,82,1,82,3,82,1379,8,82,1,82,1,82,3,82,1383,8,82,3,82,1385,8,82,3,
82,1387,8,82,1,83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,1,86,1,86,1,86,5,86,
1400,8,86,10,86,12,86,1403,9,86,1,87,1,87,1,87,1,87,1,87,5,87,1410,8,87,
10,87,12,87,1413,9,87,1,88,1,88,1,88,1,88,1,88,5,88,1420,8,88,10,88,12,88,
1423,9,88,1,89,1,89,3,89,1427,8,89,5,89,1429,8,89,10,89,12,89,1432,9,89,
1,89,1,89,1,90,1,90,3,90,1438,8,90,1,90,5,90,1441,8,90,10,90,12,90,1444,
9,90,1,91,1,91,3,91,1448,8,91,1,91,1,91,3,91,1452,8,91,1,91,1,91,3,91,1456,
8,91,1,91,1,91,3,91,1460,8,91,1,91,5,91,1463,8,91,10,91,12,91,1466,9,91,
1,92,1,92,3,92,1470,8,92,1,92,1,92,3,92,1474,8,92,1,92,1,92,3,92,1478,8,
92,1,92,1,92,3,92,1482,8,92,1,92,1,92,3,92,1486,8,92,1,92,1,92,3,92,1490,
8,92,1,92,5,92,1493,8,92,10,92,12,92,1496,9,92,1,93,1,93,3,93,1500,8,93,
1,93,1,93,3,93,1504,8,93,1,93,5,93,1507,8,93,10,93,12,93,1510,9,93,1,94,
1,94,3,94,1514,8,94,5,94,1516,8,94,10,94,12,94,1519,9,94,1,94,1,94,1,95,
1,95,3,95,1525,8,95,1,95,1,95,1,95,1,95,1,95,3,95,1532,8,95,1,95,1,95,3,
95,1536,8,95,1,95,1,95,3,95,1540,8,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,
1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,1556,8,95,1,95,3,95,1559,8,95,1,
95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,5,95,1572,8,95,10,95,
12,95,1575,9,95,1,96,3,96,1578,8,96,1,96,1,96,1,97,1,97,3,97,1584,8,97,1,
97,5,97,1587,8,97,10,97,12,97,1590,9,97,1,97,3,97,1593,8,97,1,97,3,97,1596,
8,97,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1604,8,98,1,98,1,98,3,98,1608,8,
98,1,98,1,98,3,98,1612,8,98,1,98,1,98,1,98,1,98,1,98,3,98,1619,8,98,1,98,
1,98,3,98,1623,8,98,1,98,1,98,3,98,1627,8,98,1,98,1,98,1,98,1,98,3,98,1633,
8,98,1,98,1,98,3,98,1637,8,98,1,98,1,98,3,98,1641,8,98,1,98,3,98,1644,8,
98,1,98,1,98,3,98,1648,8,98,1,98,3,98,1651,8,98,1,98,3,98,1654,8,98,1,98,
1,98,1,98,1,98,1,98,3,98,1661,8,98,1,98,1,98,3,98,1665,8,98,1,98,1,98,3,
98,1669,8,98,1,98,1,98,1,98,1,98,3,98,1675,8,98,1,98,1,98,3,98,1679,8,98,
1,98,1,98,3,98,1683,8,98,1,98,1,98,1,98,1,98,3,98,1689,8,98,1,98,1,98,3,
98,1693,8,98,1,98,1,98,3,98,1697,8,98,1,98,1,98,1,98,1,98,3,98,1703,8,98,
1,98,1,98,3,98,1707,8,98,1,98,1,98,3,98,1711,8,98,1,98,1,98,1,98,1,98,1,
98,1,98,1,98,1,98,3,98,1721,8,98,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1729,
8,99,1,100,1,100,1,101,1,101,3,101,1735,8,101,1,101,1,101,3,101,1739,8,101,
1,101,1,101,3,101,1743,8,101,1,101,1,101,3,101,1747,8,101,5,101,1749,8,101,
10,101,12,101,1752,9,101,3,101,1754,8,101,1,101,1,101,1,102,1,102,3,102,
1760,8,102,1,102,1,102,3,102,1764,8,102,1,102,1,102,3,102,1768,8,102,1,102,
1,102,3,102,1772,8,102,1,102,1,102,3,102,1776,8,102,1,102,1,102,3,102,1780,
8,102,1,102,1,102,3,102,1784,8,102,1,102,1,102,3,102,1788,8,102,1,102,1,
102,3,102,1792,8,102,1,102,1,102,1,103,1,103,3,103,1798,8,103,1,103,1,103,
1,103,3,103,1803,8,103,1,103,1,103,1,103,3,103,1808,8,103,1,103,1,103,1,
103,3,103,1813,8,103,1,103,1,103,1,103,3,103,1818,8,103,1,103,1,103,1,103,
3,103,1823,8,103,1,103,3,103,1826,8,103,1,104,1,104,3,104,1830,8,104,1,104,
1,104,3,104,1834,8,104,1,104,1,104,1,105,1,105,3,105,1840,8,105,1,105,4,
105,1843,8,105,11,105,12,105,1844,1,106,1,106,3,106,1849,8,106,1,106,3,106,
1852,8,106,1,107,1,107,1,107,1,107,1,107,1,107,1,108,1,108,3,108,1862,8,
108,1,108,1,108,3,108,1866,8,108,1,108,1,108,3,108,1870,8,108,3,108,1872,
8,108,1,108,1,108,3,108,1876,8,108,1,108,1,108,3,108,1880,8,108,1,108,1,
108,3,108,1884,8,108,5,108,1886,8,108,10,108,12,108,1889,9,108,3,108,1891,
8,108,1,108,1,108,1,109,1,109,3,109,1897,8,109,1,110,1,110,3,110,1901,8,
110,1,110,1,110,3,110,1905,8,110,1,110,1,110,3,110,1909,8,110,1,110,1,110,
3,110,1913,8,110,1,110,1,110,3,110,1917,8,110,5,110,1919,8,110,10,110,12,
110,1922,9,110,3,110,1924,8,110,1,110,1,110,1,111,1,111,1,112,1,112,1,113,
1,113,1,113,1,114,1,114,1,114,5,114,1938,8,114,10,114,12,114,1941,9,114,
1,115,1,115,3,115,1945,8,115,1,115,1,115,3,115,1949,8,115,1,115,1,115,3,
115,1953,8,115,1,115,3,115,1956,8,115,1,115,3,115,1959,8,115,1,115,1,115,
1,116,1,116,3,116,1965,8,116,1,116,1,116,3,116,1969,8,116,1,116,1,116,3,
116,1973,8,116,3,116,1975,8,116,1,116,1,116,3,116,1979,8,116,1,116,1,116,
3,116,1983,8,116,1,116,1,116,3,116,1987,8,116,3,116,1989,8,116,1,116,1,116,
3,116,1993,8,116,1,116,1,116,3,116,1997,8,116,1,116,1,116,1,117,1,117,3,
117,2003,8,117,1,117,1,117,1,118,1,118,3,118,2009,8,118,1,118,4,118,2012,
8,118,11,118,12,118,2013,1,118,1,118,3,118,2018,8,118,1,118,1,118,3,118,
2022,8,118,1,118,4,118,2025,8,118,11,118,12,118,2026,3,118,2029,8,118,1,
118,3,118,2032,8,118,1,118,1,118,3,118,2036,8,118,1,118,3,118,2039,8,118,
1,118,3,118,2042,8,118,1,118,1,118,1,119,1,119,3,119,2048,8,119,1,119,1,
119,3,119,2052,8,119,1,119,1,119,3,119,2056,8,119,1,119,1,119,1,120,1,120,
1,121,1,121,3,121,2064,8,121,1,122,1,122,3,122,2068,8,122,1,122,1,122,3,
122,2072,8,122,1,122,1,122,3,122,2076,8,122,1,122,1,122,3,122,2080,8,122,
1,122,1,122,3,122,2084,8,122,1,122,1,122,3,122,2088,8,122,1,122,1,122,3,
122,2092,8,122,1,122,1,122,3,122,2096,8,122,5,122,2098,8,122,10,122,12,122,
2101,9,122,3,122,2103,8,122,1,122,1,122,1,123,1,123,3,123,2109,8,123,1,123,
1,123,3,123,2113,8,123,1,123,3,123,2116,8,123,1,123,1,123,1,124,1,124,1,
124,3,124,2123,8,124,1,125,1,125,3,125,2127,8,125,1,125,4,125,2130,8,125,
11,125,12,125,2131,1,126,1,126,1,126,1,126,1,126,1,126,3,126,2140,8,126,
1,127,1,127,1,128,1,128,1,129,1,129,3,129,2148,8,129,1,130,1,130,1,131,1,
131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,
131,1,131,3,131,2167,8,131,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,
1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,
1,132,1,132,1,132,1,132,3,132,2193,8,132,1,133,1,133,1,134,1,134,1,135,1,
135,1,135,0,0,136,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
0,9,1,0,90,93,2,0,12,12,16,16,1,0,115,116,1,0,125,127,1,0,135,136,13,0,54,
57,59,60,62,64,67,67,70,70,72,79,81,81,84,93,98,98,101,108,115,116,118,122,
137,142,2,0,22,22,28,31,2,0,23,23,32,35,2,0,12,12,36,46,2523,0,273,1,0,0,
0,2,294,1,0,0,0,4,300,1,0,0,0,6,302,1,0,0,0,8,314,1,0,0,0,10,316,1,0,0,0,
12,318,1,0,0,0,14,320,1,0,0,0,16,332,1,0,0,0,18,338,1,0,0,0,20,340,1,0,0,
0,22,345,1,0,0,0,24,355,1,0,0,0,26,361,1,0,0,0,28,370,1,0,0,0,30,385,1,0,
0,0,32,395,1,0,0,0,34,432,1,0,0,0,36,456,1,0,0,0,38,469,1,0,0,0,40,476,1,
0,0,0,42,486,1,0,0,0,44,488,1,0,0,0,46,492,1,0,0,0,48,496,1,0,0,0,50,500,
1,0,0,0,52,504,1,0,0,0,54,508,1,0,0,0,56,512,1,0,0,0,58,516,1,0,0,0,60,520,
1,0,0,0,62,531,1,0,0,0,64,552,1,0,0,0,66,575,1,0,0,0,68,648,1,0,0,0,70,650,
1,0,0,0,72,678,1,0,0,0,74,697,1,0,0,0,76,707,1,0,0,0,78,729,1,0,0,0,80,731,
1,0,0,0,82,737,1,0,0,0,84,745,1,0,0,0,86,799,1,0,0,0,88,803,1,0,0,0,90,823,
1,0,0,0,92,843,1,0,0,0,94,845,1,0,0,0,96,873,1,0,0,0,98,884,1,0,0,0,100,
903,1,0,0,0,102,930,1,0,0,0,104,937,1,0,0,0,106,941,1,0,0,0,108,956,1,0,
0,0,110,966,1,0,0,0,112,1007,1,0,0,0,114,1016,1,0,0,0,116,1018,1,0,0,0,118,
1033,1,0,0,0,120,1037,1,0,0,0,122,1041,1,0,0,0,124,1049,1,0,0,0,126,1090,
1,0,0,0,128,1101,1,0,0,0,130,1110,1,0,0,0,132,1118,1,0,0,0,134,1132,1,0,
0,0,136,1136,1,0,0,0,138,1161,1,0,0,0,140,1165,1,0,0,0,142,1177,1,0,0,0,
144,1193,1,0,0,0,146,1195,1,0,0,0,148,1219,1,0,0,0,150,1289,1,0,0,0,152,
1291,1,0,0,0,154,1321,1,0,0,0,156,1323,1,0,0,0,158,1329,1,0,0,0,160,1350,
1,0,0,0,162,1360,1,0,0,0,164,1366,1,0,0,0,166,1388,1,0,0,0,168,1390,1,0,
0,0,170,1392,1,0,0,0,172,1394,1,0,0,0,174,1404,1,0,0,0,176,1414,1,0,0,0,
178,1430,1,0,0,0,180,1435,1,0,0,0,182,1445,1,0,0,0,184,1467,1,0,0,0,186,
1497,1,0,0,0,188,1517,1,0,0,0,190,1522,1,0,0,0,192,1577,1,0,0,0,194,1581,
1,0,0,0,196,1720,1,0,0,0,198,1728,1,0,0,0,200,1730,1,0,0,0,202,1732,1,0,
0,0,204,1757,1,0,0,0,206,1825,1,0,0,0,208,1827,1,0,0,0,210,1837,1,0,0,0,
212,1846,1,0,0,0,214,1853,1,0,0,0,216,1859,1,0,0,0,218,1896,1,0,0,0,220,
1898,1,0,0,0,222,1927,1,0,0,0,224,1929,1,0,0,0,226,1931,1,0,0,0,228,1939,
1,0,0,0,230,1942,1,0,0,0,232,1962,1,0,0,0,234,2000,1,0,0,0,236,2028,1,0,
0,0,238,2045,1,0,0,0,240,2059,1,0,0,0,242,2063,1,0,0,0,244,2065,1,0,0,0,
246,2106,1,0,0,0,248,2119,1,0,0,0,250,2124,1,0,0,0,252,2139,1,0,0,0,254,
2141,1,0,0,0,256,2143,1,0,0,0,258,2147,1,0,0,0,260,2149,1,0,0,0,262,2166,
1,0,0,0,264,2192,1,0,0,0,266,2194,1,0,0,0,268,2196,1,0,0,0,270,2198,1,0,
0,0,272,274,5,147,0,0,273,272,1,0,0,0,273,274,1,0,0,0,274,275,1,0,0,0,275,
276,3,2,1,0,276,281,3,16,8,0,277,279,5,147,0,0,278,277,1,0,0,0,278,279,1,
0,0,0,279,280,1,0,0,0,280,282,5,1,0,0,281,278,1,0,0,0,281,282,1,0,0,0,282,
284,1,0,0,0,283,285,5,147,0,0,284,283,1,0,0,0,284,285,1,0,0,0,285,286,1,
0,0,0,286,287,5,0,0,1,287,1,1,0,0,0,288,290,3,4,2,0,289,291,5,147,0,0,290,
289,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,288,1,0,0,0,293,296,1,0,
0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,3,1,0,0,0,296,294,1,0,0,0,297,301,
3,6,3,0,298,301,3,10,5,0,299,301,3,12,6,0,300,297,1,0,0,0,300,298,1,0,0,
0,300,299,1,0,0,0,301,5,1,0,0,0,302,305,5,47,0,0,303,304,5,147,0,0,304,306,
3,8,4,0,305,303,1,0,0,0,305,306,1,0,0,0,306,311,1,0,0,0,307,308,5,147,0,
0,308,310,3,14,7,0,309,307,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,
1,0,0,0,312,7,1,0,0,0,313,311,1,0,0,0,314,315,5,136,0,0,315,9,1,0,0,0,316,
317,5,48,0,0,317,11,1,0,0,0,318,319,5,49,0,0,319,13,1,0,0,0,320,322,3,262,
131,0,321,323,5,147,0,0,322,321,1,0,0,0,322,323,1,0,0,0,323,324,1,0,0,0,
324,326,5,2,0,0,325,327,5,147,0,0,326,325,1,0,0,0,326,327,1,0,0,0,327,328,
1,0,0,0,328,329,3,262,131,0,329,15,1,0,0,0,330,333,3,42,21,0,331,333,3,18,
9,0,332,330,1,0,0,0,332,331,1,0,0,0,333,17,1,0,0,0,334,339,3,22,11,0,335,
339,3,100,50,0,336,339,3,24,12,0,337,339,3,98,49,0,338,334,1,0,0,0,338,335,
1,0,0,0,338,336,1,0,0,0,338,337,1,0,0,0,339,19,1,0,0,0,340,341,5,50,0,0,
341,342,5,147,0,0,342,343,3,170,85,0,343,344,5,147,0,0,344,21,1,0,0,0,345,
352,3,32,16,0,346,348,5,147,0,0,347,346,1,0,0,0,347,348,1,0,0,0,348,349,
1,0,0,0,349,351,3,30,15,0,350,347,1,0,0,0,351,354,1,0,0,0,352,350,1,0,0,
0,352,353,1,0,0,0,353,23,1,0,0,0,354,352,1,0,0,0,355,357,3,26,13,0,356,358,
5,147,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,360,3,28,14,
0,360,25,1,0,0,0,361,362,5,51,0,0,362,363,5,147,0,0,363,364,5,52,0,0,364,
365,5,147,0,0,365,368,5,53,0,0,366,367,5,147,0,0,367,369,3,254,127,0,368,
366,1,0,0,0,368,369,1,0,0,0,369,27,1,0,0,0,370,371,3,70,35,0,371,372,3,32,
16,0,372,29,1,0,0,0,373,374,5,54,0,0,374,375,5,147,0,0,375,377,5,55,0,0,
376,378,5,147,0,0,377,376,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,386,
3,32,16,0,380,382,5,54,0,0,381,383,5,147,0,0,382,381,1,0,0,0,382,383,1,0,
0,0,383,384,1,0,0,0,384,386,3,32,16,0,385,373,1,0,0,0,385,380,1,0,0,0,386,
31,1,0,0,0,387,389,3,20,10,0,388,387,1,0,0,0,388,389,1,0,0,0,389,390,1,0,
0,0,390,396,3,34,17,0,391,393,3,20,10,0,392,391,1,0,0,0,392,393,1,0,0,0,
393,394,1,0,0,0,394,396,3,36,18,0,395,388,1,0,0,0,395,392,1,0,0,0,396,33,
1,0,0,0,397,399,3,40,20,0,398,400,5,147,0,0,399,398,1,0,0,0,399,400,1,0,
0,0,400,402,1,0,0,0,401,397,1,0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,403,
404,1,0,0,0,404,406,1,0,0,0,405,403,1,0,0,0,406,433,3,108,54,0,407,409,3,
40,20,0,408,410,5,147,0,0,409,408,1,0,0,0,409,410,1,0,0,0,410,412,1,0,0,
0,411,407,1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,414,416,
1,0,0,0,415,413,1,0,0,0,416,423,3,38,19,0,417,419,5,147,0,0,418,417,1,0,
0,0,418,419,1,0,0,0,419,420,1,0,0,0,420,422,3,38,19,0,421,418,1,0,0,0,422,
425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,430,1,0,0,0,425,423,1,0,
0,0,426,428,5,147,0,0,427,426,1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,429,
431,3,108,54,0,430,427,1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,403,1,
0,0,0,432,413,1,0,0,0,433,35,1,0,0,0,434,436,3,40,20,0,435,437,5,147,0,0,
436,435,1,0,0,0,436,437,1,0,0,0,437,439,1,0,0,0,438,434,1,0,0,0,439,442,
1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,449,1,0,0,0,442,440,1,0,0,0,
443,445,3,38,19,0,444,446,5,147,0,0,445,444,1,0,0,0,445,446,1,0,0,0,446,
448,1,0,0,0,447,443,1,0,0,0,448,451,1,0,0,0,449,447,1,0,0,0,449,450,1,0,
0,0,450,452,1,0,0,0,451,449,1,0,0,0,452,454,3,106,53,0,453,455,5,147,0,0,
454,453,1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,440,1,0,0,0,457,458,
1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,460,1,0,0,0,460,461,3,34,17,
0,461,37,1,0,0,0,462,470,3,80,40,0,463,470,3,76,38,0,464,470,3,82,41,0,465,
470,3,94,47,0,466,470,3,88,44,0,467,470,3,84,42,0,468,470,3,90,45,0,469,
462,1,0,0,0,469,463,1,0,0,0,469,464,1,0,0,0,469,465,1,0,0,0,469,466,1,0,
0,0,469,467,1,0,0,0,469,468,1,0,0,0,470,39,1,0,0,0,471,477,3,70,35,0,472,
477,3,72,36,0,473,477,3,74,37,0,474,477,3,96,48,0,475,477,3,98,49,0,476,
471,1,0,0,0,476,472,1,0,0,0,476,473,1,0,0,0,476,474,1,0,0,0,476,475,1,0,
0,0,477,41,1,0,0,0,478,487,3,50,25,0,479,487,3,58,29,0,480,487,3,44,22,0,
481,487,3,52,26,0,482,487,3,46,23,0,483,487,3,54,27,0,484,487,3,48,24,0,
485,487,3,56,28,0,486,478,1,0,0,0,486,479,1,0,0,0,486,480,1,0,0,0,486,481,
1,0,0,0,486,482,1,0,0,0,486,483,1,0,0,0,486,484,1,0,0,0,486,485,1,0,0,0,
487,43,1,0,0,0,488,489,5,56,0,0,489,490,5,147,0,0,490,491,3,62,31,0,491,
45,1,0,0,0,492,493,5,56,0,0,493,494,5,147,0,0,494,495,3,64,32,0,495,47,1,
0,0,0,496,497,5,56,0,0,497,498,5,147,0,0,498,499,3,66,33,0,499,49,1,0,0,
0,500,501,5,56,0,0,501,502,5,147,0,0,502,503,3,60,30,0,503,51,1,0,0,0,504,
505,5,57,0,0,505,506,5,147,0,0,506,507,3,62,31,0,507,53,1,0,0,0,508,509,
5,57,0,0,509,510,5,147,0,0,510,511,3,64,32,0,511,55,1,0,0,0,512,513,5,57,
0,0,513,514,5,147,0,0,514,515,3,66,33,0,515,57,1,0,0,0,516,517,5,57,0,0,
517,518,5,147,0,0,518,519,3,60,30,0,519,59,1,0,0,0,520,521,5,58,0,0,521,
522,5,147,0,0,522,524,5,59,0,0,523,525,5,147,0,0,524,523,1,0,0,0,524,525,
1,0,0,0,525,526,1,0,0,0,526,527,3,162,81,0,527,528,5,3,0,0,528,529,3,252,
126,0,529,530,5,4,0,0,530,61,1,0,0,0,531,532,5,60,0,0,532,533,5,147,0,0,
533,535,5,59,0,0,534,536,5,147,0,0,535,534,1,0,0,0,535,536,1,0,0,0,536,537,
1,0,0,0,537,538,5,3,0,0,538,539,3,240,120,0,539,540,3,162,81,0,540,542,5,
4,0,0,541,543,5,147,0,0,542,541,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,
544,545,5,61,0,0,545,546,5,147,0,0,546,547,3,250,125,0,547,548,5,147,0,0,
548,549,5,62,0,0,549,550,5,147,0,0,550,551,5,63,0,0,551,63,1,0,0,0,552,553,
5,60,0,0,553,554,5,147,0,0,554,556,5,59,0,0,555,557,5,147,0,0,556,555,1,
0,0,0,556,557,1,0,0,0,557,558,1,0,0,0,558,559,5,3,0,0,559,560,3,240,120,
0,560,561,3,162,81,0,561,563,5,4,0,0,562,564,5,147,0,0,563,562,1,0,0,0,563,
564,1,0,0,0,564,565,1,0,0,0,565,566,5,61,0,0,566,567,5,147,0,0,567,569,5,
64,0,0,568,570,5,147,0,0,569,568,1,0,0,0,569,570,1,0,0,0,570,571,1,0,0,0,
571,572,5,3,0,0,572,573,3,250,125,0,573,574,5,4,0,0,574,65,1,0,0,0,575,576,
5,60,0,0,576,577,5,147,0,0,577,579,5,59,0,0,578,580,5,147,0,0,579,578,1,
0,0,0,579,580,1,0,0,0,580,581,1,0,0,0,581,583,3,68,34,0,582,584,5,147,0,
0,583,582,1,0,0,0,583,584,1,0,0,0,584,585,1,0,0,0,585,586,5,61,0,0,586,587,
5,147,0,0,587,589,5,64,0,0,588,590,5,147,0,0,589,588,1,0,0,0,589,590,1,0,
0,0,590,591,1,0,0,0,591,592,5,3,0,0,592,593,3,250,125,0,593,594,5,4,0,0,
594,67,1,0,0,0,595,597,5,3,0,0,596,598,5,147,0,0,597,596,1,0,0,0,597,598,
1,0,0,0,598,599,1,0,0,0,599,600,5,4,0,0,600,601,3,270,135,0,601,602,5,5,
0,0,602,603,3,240,120,0,603,604,3,156,78,0,604,605,5,6,0,0,605,606,3,270,
135,0,606,608,5,3,0,0,607,609,5,147,0,0,608,607,1,0,0,0,608,609,1,0,0,0,
609,610,1,0,0,0,610,611,5,4,0,0,611,649,1,0,0,0,612,614,5,3,0,0,613,615,
5,147,0,0,614,613,1,0,0,0,614,615,1,0,0,0,615,616,1,0,0,0,616,617,5,4,0,
0,617,618,3,270,135,0,618,619,5,5,0,0,619,620,3,240,120,0,620,621,3,156,
78,0,621,622,5,6,0,0,622,623,3,270,135,0,623,624,3,268,134,0,624,626,5,3,
0,0,625,627,5,147,0,0,626,625,1,0,0,0,626,627,1,0,0,0,627,628,1,0,0,0,628,
629,5,4,0,0,629,649,1,0,0,0,630,632,5,3,0,0,631,633,5,147,0,0,632,631,1,
0,0,0,632,633,1,0,0,0,633,634,1,0,0,0,634,635,5,4,0,0,635,636,3,266,133,
0,636,637,3,270,135,0,637,638,5,5,0,0,638,639,3,240,120,0,639,640,3,156,
78,0,640,641,5,6,0,0,641,642,3,270,135,0,642,644,5,3,0,0,643,645,5,147,0,
0,644,643,1,0,0,0,644,645,1,0,0,0,645,646,1,0,0,0,646,647,5,4,0,0,647,649,
1,0,0,0,648,595,1,0,0,0,648,612,1,0,0,0,648,630,1,0,0,0,649,69,1,0,0,0,650,
651,5,65,0,0,651,652,5,147,0,0,652,653,5,66,0,0,653,658,5,147,0,0,654,655,
5,67,0,0,655,656,5,147,0,0,656,657,5,68,0,0,657,659,5,147,0,0,658,654,1,
0,0,0,658,659,1,0,0,0,659,660,1,0,0,0,660,661,5,69,0,0,661,662,5,147,0,0,
662,663,3,170,85,0,663,664,5,147,0,0,664,665,5,70,0,0,665,666,5,147,0,0,
666,667,3,240,120,0,667,671,5,147,0,0,668,669,5,71,0,0,669,670,5,147,0,0,
670,672,5,123,0,0,671,668,1,0,0,0,671,672,1,0,0,0,672,674,1,0,0,0,673,675,
5,147,0,0,674,673,1,0,0,0,674,675,1,0,0,0,675,71,1,0,0,0,676,677,5,72,0,
0,677,679,5,147,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,680,1,0,0,0,680,
682,5,73,0,0,681,683,5,147,0,0,682,681,1,0,0,0,682,683,1,0,0,0,683,684,1,
0,0,0,684,688,3,136,68,0,685,687,3,124,62,0,686,685,1,0,0,0,687,690,1,0,
0,0,688,686,1,0,0,0,688,689,1,0,0,0,689,695,1,0,0,0,690,688,1,0,0,0,691,
693,5,147,0,0,692,691,1,0,0,0,692,693,1,0,0,0,693,694,1,0,0,0,694,696,3,
134,67,0,695,692,1,0,0,0,695,696,1,0,0,0,696,73,1,0,0,0,697,699,5,74,0,0,
698,700,5,147,0,0,699,698,1,0,0,0,699,700,1,0,0,0,700,701,1,0,0,0,701,702,
3,170,85,0,702,703,5,147,0,0,703,704,5,70,0,0,704,705,5,147,0,0,705,706,
3,240,120,0,706,75,1,0,0,0,707,709,5,75,0,0,708,710,5,147,0,0,709,708,1,
0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,716,3,138,69,0,712,713,5,147,0,
0,713,715,3,78,39,0,714,712,1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,716,
717,1,0,0,0,717,77,1,0,0,0,718,716,1,0,0,0,719,720,5,59,0,0,720,721,5,147,
0,0,721,722,5,73,0,0,722,723,5,147,0,0,723,730,3,84,42,0,724,725,5,59,0,
0,725,726,5,147,0,0,726,727,5,56,0,0,727,728,5,147,0,0,728,730,3,84,42,0,
729,719,1,0,0,0,729,724,1,0,0,0,730,79,1,0,0,0,731,733,5,56,0,0,732,734,
5,147,0,0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,0,735,736,3,136,
68,0,736,81,1,0,0,0,737,738,5,56,0,0,738,739,5,147,0,0,739,741,5,63,0,0,
740,742,5,147,0,0,741,740,1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,744,
3,136,68,0,744,83,1,0,0,0,745,747,5,76,0,0,746,748,5,147,0,0,747,746,1,0,
0,0,747,748,1,0,0,0,748,749,1,0,0,0,749,760,3,86,43,0,750,752,5,147,0,0,
751,750,1,0,0,0,751,752,1,0,0,0,752,753,1,0,0,0,753,755,5,7,0,0,754,756,
5,147,0,0,755,754,1,0,0,0,755,756,1,0,0,0,756,757,1,0,0,0,757,759,3,86,43,
0,758,751,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,760,761,1,0,0,0,761,85,
1,0,0,0,762,760,1,0,0,0,763,765,3,250,125,0,764,766,5,147,0,0,765,764,1,
0,0,0,765,766,1,0,0,0,766,767,1,0,0,0,767,769,5,2,0,0,768,770,5,147,0,0,
769,768,1,0,0,0,769,770,1,0,0,0,770,771,1,0,0,0,771,772,3,170,85,0,772,800,
1,0,0,0,773,775,3,240,120,0,774,776,5,147,0,0,775,774,1,0,0,0,775,776,1,
0,0,0,776,777,1,0,0,0,777,779,5,2,0,0,778,780,5,147,0,0,779,778,1,0,0,0,
779,780,1,0,0,0,780,781,1,0,0,0,781,782,3,170,85,0,782,800,1,0,0,0,783,785,
3,240,120,0,784,786,5,147,0,0,785,784,1,0,0,0,785,786,1,0,0,0,786,787,1,
0,0,0,787,789,5,8,0,0,788,790,5,147,0,0,789,788,1,0,0,0,789,790,1,0,0,0,
790,791,1,0,0,0,791,792,3,170,85,0,792,800,1,0,0,0,793,795,3,240,120,0,794,
796,5,147,0,0,795,794,1,0,0,0,795,796,1,0,0,0,796,797,1,0,0,0,797,798,3,
160,80,0,798,800,1,0,0,0,799,763,1,0,0,0,799,773,1,0,0,0,799,783,1,0,0,0,
799,793,1,0,0,0,800,87,1,0,0,0,801,802,5,77,0,0,802,804,5,147,0,0,803,801,
1,0,0,0,803,804,1,0,0,0,804,805,1,0,0,0,805,807,5,78,0,0,806,808,5,147,0,
0,807,806,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,820,3,170,85,0,810,
812,5,147,0,0,811,810,1,0,0,0,811,812,1,0,0,0,812,813,1,0,0,0,813,815,5,
7,0,0,814,816,5,147,0,0,815,814,1,0,0,0,815,816,1,0,0,0,816,817,1,0,0,0,
817,819,3,170,85,0,818,811,1,0,0,0,819,822,1,0,0,0,820,818,1,0,0,0,820,821,
1,0,0,0,821,89,1,0,0,0,822,820,1,0,0,0,823,824,5,79,0,0,824,825,5,147,0,
0,825,836,3,92,46,0,826,828,5,147,0,0,827,826,1,0,0,0,827,828,1,0,0,0,828,
829,1,0,0,0,829,831,5,7,0,0,830,832,5,147,0,0,831,830,1,0,0,0,831,832,1,
0,0,0,832,833,1,0,0,0,833,835,3,92,46,0,834,827,1,0,0,0,835,838,1,0,0,0,
836,834,1,0,0,0,836,837,1,0,0,0,837,91,1,0,0,0,838,836,1,0,0,0,839,840,3,
240,120,0,840,841,3,160,80,0,841,844,1,0,0,0,842,844,3,250,125,0,843,839,
1,0,0,0,843,842,1,0,0,0,844,93,1,0,0,0,845,847,5,80,0,0,846,848,5,147,0,
0,847,846,1,0,0,0,847,848,1,0,0,0,848,849,1,0,0,0,849,851,5,3,0,0,850,852,
5,147,0,0,851,850,1,0,0,0,851,852,1,0,0,0,852,853,1,0,0,0,853,854,3,240,
120,0,854,855,5,147,0,0,855,856,5,81,0,0,856,857,5,147,0,0,857,859,3,170,
85,0,858,860,5,147,0,0,859,858,1,0,0,0,859,860,1,0,0,0,860,861,1,0,0,0,861,
864,5,9,0,0,862,863,5,147,0,0,863,865,3,38,19,0,864,862,1,0,0,0,865,866,
1,0,0,0,866,864,1,0,0,0,866,867,1,0,0,0,867,869,1,0,0,0,868,870,5,147,0,
0,869,868,1,0,0,0,869,870,1,0,0,0,870,871,1,0,0,0,871,872,5,4,0,0,872,95,
1,0,0,0,873,874,5,82,0,0,874,875,5,147,0,0,875,882,3,220,110,0,876,878,5,
147,0,0,877,876,1,0,0,0,877,878,1,0,0,0,878,879,1,0,0,0,879,880,5,83,0,0,
880,881,5,147,0,0,881,883,3,102,51,0,882,877,1,0,0,0,882,883,1,0,0,0,883,
97,1,0,0,0,884,886,5,82,0,0,885,887,5,147,0,0,886,885,1,0,0,0,886,887,1,
0,0,0,887,888,1,0,0,0,888,890,5,10,0,0,889,891,5,147,0,0,890,889,1,0,0,0,
890,891,1,0,0,0,891,892,1,0,0,0,892,894,3,18,9,0,893,895,5,147,0,0,894,893,
1,0,0,0,894,895,1,0,0,0,895,896,1,0,0,0,896,898,5,11,0,0,897,899,5,147,0,
0,898,897,1,0,0,0,898,899,1,0,0,0,899,901,1,0,0,0,900,902,3,108,54,0,901,
900,1,0,0,0,901,902,1,0,0,0,902,99,1,0,0,0,903,904,5,82,0,0,904,907,5,147,
0,0,905,908,3,220,110,0,906,908,3,222,111,0,907,905,1,0,0,0,907,906,1,0,
0,0,908,913,1,0,0,0,909,910,5,147,0,0,910,911,5,83,0,0,911,912,5,147,0,0,
912,914,3,102,51,0,913,909,1,0,0,0,913,914,1,0,0,0,914,101,1,0,0,0,915,926,
3,104,52,0,916,918,5,147,0,0,917,916,1,0,0,0,917,918,1,0,0,0,918,919,1,0,
0,0,919,921,5,7,0,0,920,922,5,147,0,0,921,920,1,0,0,0,921,922,1,0,0,0,922,
923,1,0,0,0,923,925,3,104,52,0,924,917,1,0,0,0,925,928,1,0,0,0,926,924,1,
0,0,0,926,927,1,0,0,0,927,931,1,0,0,0,928,926,1,0,0,0,929,931,5,12,0,0,930,
915,1,0,0,0,930,929,1,0,0,0,931,103,1,0,0,0,932,933,3,224,112,0,933,934,
5,147,0,0,934,935,5,70,0,0,935,936,5,147,0,0,936,938,1,0,0,0,937,932,1,0,
0,0,937,938,1,0,0,0,938,939,1,0,0,0,939,940,3,240,120,0,940,105,1,0,0,0,
941,946,5,67,0,0,942,944,5,147,0,0,943,942,1,0,0,0,943,944,1,0,0,0,944,945,
1,0,0,0,945,947,5,84,0,0,946,943,1,0,0,0,946,947,1,0,0,0,947,948,1,0,0,0,
948,949,5,147,0,0,949,954,3,110,55,0,950,952,5,147,0,0,951,950,1,0,0,0,951,
952,1,0,0,0,952,953,1,0,0,0,953,955,3,134,67,0,954,951,1,0,0,0,954,955,1,
0,0,0,955,107,1,0,0,0,956,961,5,85,0,0,957,959,5,147,0,0,958,957,1,0,0,0,
958,959,1,0,0,0,959,960,1,0,0,0,960,962,5,84,0,0,961,958,1,0,0,0,961,962,
1,0,0,0,962,963,1,0,0,0,963,964,5,147,0,0,964,965,3,110,55,0,965,109,1,0,
0,0,966,969,3,112,56,0,967,968,5,147,0,0,968,970,3,116,58,0,969,967,1,0,
0,0,969,970,1,0,0,0,970,973,1,0,0,0,971,972,5,147,0,0,972,974,3,118,59,0,
973,971,1,0,0,0,973,974,1,0,0,0,974,977,1,0,0,0,975,976,5,147,0,0,976,978,
3,120,60,0,977,975,1,0,0,0,977,978,1,0,0,0,978,111,1,0,0,0,979,990,5,13,
0,0,980,982,5,147,0,0,981,980,1,0,0,0,981,982,1,0,0,0,982,983,1,0,0,0,983,
985,5,7,0,0,984,986,5,147,0,0,985,984,1,0,0,0,985,986,1,0,0,0,986,987,1,
0,0,0,987,989,3,114,57,0,988,981,1,0,0,0,989,992,1,0,0,0,990,988,1,0,0,0,
990,991,1,0,0,0,991,1008,1,0,0,0,992,990,1,0,0,0,993,1004,3,114,57,0,994,
996,5,147,0,0,995,994,1,0,0,0,995,996,1,0,0,0,996,997,1,0,0,0,997,999,5,
7,0,0,998,1000,5,147,0,0,999,998,1,0,0,0,999,1000,1,0,0,0,1000,1001,1,0,
0,0,1001,1003,3,114,57,0,1002,995,1,0,0,0,1003,1006,1,0,0,0,1004,1002,1,
0,0,0,1004,1005,1,0,0,0,1005,1008,1,0,0,0,1006,1004,1,0,0,0,1007,979,1,0,
0,0,1007,993,1,0,0,0,1008,113,1,0,0,0,1009,1010,3,170,85,0,1010,1011,5,147,
0,0,1011,1012,5,70,0,0,1012,1013,5,147,0,0,1013,1014,3,240,120,0,1014,1017,
1,0,0,0,1015,1017,3,170,85,0,1016,1009,1,0,0,0,1016,1015,1,0,0,0,1017,115,
1,0,0,0,1018,1019,5,86,0,0,1019,1020,5,147,0,0,1020,1021,5,87,0,0,1021,1022,
5,147,0,0,1022,1030,3,122,61,0,1023,1025,5,7,0,0,1024,1026,5,147,0,0,1025,
1024,1,0,0,0,1025,1026,1,0,0,0,1026,1027,1,0,0,0,1027,1029,3,122,61,0,1028,
1023,1,0,0,0,1029,1032,1,0,0,0,1030,1028,1,0,0,0,1030,1031,1,0,0,0,1031,
117,1,0,0,0,1032,1030,1,0,0,0,1033,1034,5,88,0,0,1034,1035,5,147,0,0,1035,
1036,3,170,85,0,1036,119,1,0,0,0,1037,1038,5,89,0,0,1038,1039,5,147,0,0,
1039,1040,3,170,85,0,1040,121,1,0,0,0,1041,1046,3,170,85,0,1042,1044,5,147,
0,0,1043,1042,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,1047,7,0,
0,0,1046,1043,1,0,0,0,1046,1047,1,0,0,0,1047,123,1,0,0,0,1048,1050,5,147,
0,0,1049,1048,1,0,0,0,1049,1050,1,0,0,0,1050,1088,1,0,0,0,1051,1052,5,51,
0,0,1052,1053,5,147,0,0,1053,1054,5,58,0,0,1054,1055,5,147,0,0,1055,1056,
3,240,120,0,1056,1057,3,162,81,0,1057,1058,5,3,0,0,1058,1059,3,252,126,0,
1059,1060,5,4,0,0,1060,1089,1,0,0,0,1061,1062,5,51,0,0,1062,1063,5,147,0,
0,1063,1064,5,94,0,0,1064,1065,5,147,0,0,1065,1066,5,59,0,0,1066,1067,5,
147,0,0,1067,1078,3,240,120,0,1068,1070,5,147,0,0,1069,1068,1,0,0,0,1069,
1070,1,0,0,0,1070,1071,1,0,0,0,1071,1073,5,7,0,0,1072,1074,5,147,0,0,1073,
1072,1,0,0,0,1073,1074,1,0,0,0,1074,1075,1,0,0,0,1075,1077,3,240,120,0,1076,
1069,1,0,0,0,1077,1080,1,0,0,0,1078,1076,1,0,0,0,1078,1079,1,0,0,0,1079,
1089,1,0,0,0,1080,1078,1,0,0,0,1081,1082,5,51,0,0,1082,1083,5,147,0,0,1083,
1084,5,95,0,0,1084,1085,5,147,0,0,1085,1086,3,240,120,0,1086,1087,3,162,
81,0,1087,1089,1,0,0,0,1088,1051,1,0,0,0,1088,1061,1,0,0,0,1088,1081,1,0,
0,0,1089,125,1,0,0,0,1090,1091,5,14,0,0,1091,1092,3,262,131,0,1092,1093,
5,3,0,0,1093,1094,3,262,131,0,1094,1097,5,2,0,0,1095,1098,5,123,0,0,1096,
1098,3,246,123,0,1097,1095,1,0,0,0,1097,1096,1,0,0,0,1098,1099,1,0,0,0,1099,
1100,5,4,0,0,1100,127,1,0,0,0,1101,1102,5,14,0,0,1102,1103,3,262,131,0,1103,
1106,5,3,0,0,1104,1107,5,123,0,0,1105,1107,3,246,123,0,1106,1104,1,0,0,0,
1106,1105,1,0,0,0,1107,1108,1,0,0,0,1108,1109,5,4,0,0,1109,129,1,0,0,0,1110,
1114,5,3,0,0,1111,1115,3,132,66,0,1112,1115,3,246,123,0,1113,1115,5,13,0,
0,1114,1111,1,0,0,0,1114,1112,1,0,0,0,1114,1113,1,0,0,0,1115,1116,1,0,0,
0,1116,1117,5,4,0,0,1117,131,1,0,0,0,1118,1129,3,254,127,0,1119,1121,5,147,
0,0,1120,1119,1,0,0,0,1120,1121,1,0,0,0,1121,1122,1,0,0,0,1122,1124,5,7,
0,0,1123,1125,5,147,0,0,1124,1123,1,0,0,0,1124,1125,1,0,0,0,1125,1126,1,
0,0,0,1126,1128,3,254,127,0,1127,1120,1,0,0,0,1128,1131,1,0,0,0,1129,1127,
1,0,0,0,1129,1130,1,0,0,0,1130,133,1,0,0,0,1131,1129,1,0,0,0,1132,1133,5,
98,0,0,1133,1134,5,147,0,0,1134,1135,3,170,85,0,1135,135,1,0,0,0,1136,1147,
3,138,69,0,1137,1139,5,147,0,0,1138,1137,1,0,0,0,1138,1139,1,0,0,0,1139,
1140,1,0,0,0,1140,1142,5,7,0,0,1141,1143,5,147,0,0,1142,1141,1,0,0,0,1142,
1143,1,0,0,0,1143,1144,1,0,0,0,1144,1146,3,138,69,0,1145,1138,1,0,0,0,1146,
1149,1,0,0,0,1147,1145,1,0,0,0,1147,1148,1,0,0,0,1148,137,1,0,0,0,1149,1147,
1,0,0,0,1150,1152,3,240,120,0,1151,1153,5,147,0,0,1152,1151,1,0,0,0,1152,
1153,1,0,0,0,1153,1154,1,0,0,0,1154,1156,5,2,0,0,1155,1157,5,147,0,0,1156,
1155,1,0,0,0,1156,1157,1,0,0,0,1157,1158,1,0,0,0,1158,1159,3,140,70,0,1159,
1162,1,0,0,0,1160,1162,3,140,70,0,1161,1150,1,0,0,0,1161,1160,1,0,0,0,1162,
139,1,0,0,0,1163,1166,3,142,71,0,1164,1166,3,144,72,0,1165,1163,1,0,0,0,
1165,1164,1,0,0,0,1166,141,1,0,0,0,1167,1168,5,99,0,0,1168,1169,5,3,0,0,
1169,1170,3,144,72,0,1170,1171,5,4,0,0,1171,1178,1,0,0,0,1172,1173,5,100,
0,0,1173,1174,5,3,0,0,1174,1175,3,144,72,0,1175,1176,5,4,0,0,1176,1178,1,
0,0,0,1177,1167,1,0,0,0,1177,1172,1,0,0,0,1178,143,1,0,0,0,1179,1186,3,146,
73,0,1180,1182,5,147,0,0,1181,1180,1,0,0,0,1181,1182,1,0,0,0,1182,1183,1,
0,0,0,1183,1185,3,148,74,0,1184,1181,1,0,0,0,1185,1188,1,0,0,0,1186,1184,
1,0,0,0,1186,1187,1,0,0,0,1187,1194,1,0,0,0,1188,1186,1,0,0,0,1189,1190,
5,3,0,0,1190,1191,3,144,72,0,1191,1192,5,4,0,0,1192,1194,1,0,0,0,1193,1179,
1,0,0,0,1193,1189,1,0,0,0,1194,145,1,0,0,0,1195,1197,5,3,0,0,1196,1198,5,
147,0,0,1197,1196,1,0,0,0,1197,1198,1,0,0,0,1198,1203,1,0,0,0,1199,1201,
3,240,120,0,1200,1202,5,147,0,0,1201,1200,1,0,0,0,1201,1202,1,0,0,0,1202,
1204,1,0,0,0,1203,1199,1,0,0,0,1203,1204,1,0,0,0,1204,1209,1,0,0,0,1205,
1207,3,160,80,0,1206,1208,5,147,0,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,
1208,1210,1,0,0,0,1209,1205,1,0,0,0,1209,1210,1,0,0,0,1210,1215,1,0,0,0,
1211,1213,3,154,77,0,1212,1214,5,147,0,0,1213,1212,1,0,0,0,1213,1214,1,0,
0,0,1214,1216,1,0,0,0,1215,1211,1,0,0,0,1215,1216,1,0,0,0,1216,1217,1,0,
0,0,1217,1218,5,4,0,0,1218,147,1,0,0,0,1219,1221,3,150,75,0,1220,1222,5,
147,0,0,1221,1220,1,0,0,0,1221,1222,1,0,0,0,1222,1223,1,0,0,0,1223,1224,
3,146,73,0,1224,149,1,0,0,0,1225,1227,3,266,133,0,1226,1228,5,147,0,0,1227,
1226,1,0,0,0,1227,1228,1,0,0,0,1228,1229,1,0,0,0,1229,1231,3,270,135,0,1230,
1232,5,147,0,0,1231,1230,1,0,0,0,1231,1232,1,0,0,0,1232,1234,1,0,0,0,1233,
1235,3,152,76,0,1234,1233,1,0,0,0,1234,1235,1,0,0,0,1235,1237,1,0,0,0,1236,
1238,5,147,0,0,1237,1236,1,0,0,0,1237,1238,1,0,0,0,1238,1239,1,0,0,0,1239,
1241,3,270,135,0,1240,1242,5,147,0,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,
1242,1243,1,0,0,0,1243,1244,3,268,134,0,1244,1290,1,0,0,0,1245,1247,3,266,
133,0,1246,1248,5,147,0,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,1249,
1,0,0,0,1249,1251,3,270,135,0,1250,1252,5,147,0,0,1251,1250,1,0,0,0,1251,
1252,1,0,0,0,1252,1254,1,0,0,0,1253,1255,3,152,76,0,1254,1253,1,0,0,0,1254,
1255,1,0,0,0,1255,1257,1,0,0,0,1256,1258,5,147,0,0,1257,1256,1,0,0,0,1257,
1258,1,0,0,0,1258,1259,1,0,0,0,1259,1260,3,270,135,0,1260,1290,1,0,0,0,1261,
1263,3,270,135,0,1262,1264,5,147,0,0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,
1264,1266,1,0,0,0,1265,1267,3,152,76,0,1266,1265,1,0,0,0,1266,1267,1,0,0,
0,1267,1269,1,0,0,0,1268,1270,5,147,0,0,1269,1268,1,0,0,0,1269,1270,1,0,
0,0,1270,1271,1,0,0,0,1271,1273,3,270,135,0,1272,1274,5,147,0,0,1273,1272,
1,0,0,0,1273,1274,1,0,0,0,1274,1275,1,0,0,0,1275,1276,3,268,134,0,1276,1290,
1,0,0,0,1277,1279,3,270,135,0,1278,1280,5,147,0,0,1279,1278,1,0,0,0,1279,
1280,1,0,0,0,1280,1282,1,0,0,0,1281,1283,3,152,76,0,1282,1281,1,0,0,0,1282,
1283,1,0,0,0,1283,1285,1,0,0,0,1284,1286,5,147,0,0,1285,1284,1,0,0,0,1285,
1286,1,0,0,0,1286,1287,1,0,0,0,1287,1288,3,270,135,0,1288,1290,1,0,0,0,1289,
1225,1,0,0,0,1289,1245,1,0,0,0,1289,1261,1,0,0,0,1289,1277,1,0,0,0,1290,
151,1,0,0,0,1291,1293,5,5,0,0,1292,1294,5,147,0,0,1293,1292,1,0,0,0,1293,
1294,1,0,0,0,1294,1299,1,0,0,0,1295,1297,3,240,120,0,1296,1298,5,147,0,0,
1297,1296,1,0,0,0,1297,1298,1,0,0,0,1298,1300,1,0,0,0,1299,1295,1,0,0,0,
1299,1300,1,0,0,0,1300,1305,1,0,0,0,1301,1303,3,158,79,0,1302,1304,5,147,
0,0,1303,1302,1,0,0,0,1303,1304,1,0,0,0,1304,1306,1,0,0,0,1305,1301,1,0,
0,0,1305,1306,1,0,0,0,1306,1308,1,0,0,0,1307,1309,3,164,82,0,1308,1307,1,
0,0,0,1308,1309,1,0,0,0,1309,1314,1,0,0,0,1310,1312,3,154,77,0,1311,1313,
5,147,0,0,1312,1311,1,0,0,0,1312,1313,1,0,0,0,1313,1315,1,0,0,0,1314,1310,
1,0,0,0,1314,1315,1,0,0,0,1315,1316,1,0,0,0,1316,1317,5,6,0,0,1317,153,1,
0,0,0,1318,1322,3,244,122,0,1319,1322,3,248,124,0,1320,1322,3,246,123,0,
1321,1318,1,0,0,0,1321,1319,1,0,0,0,1321,1320,1,0,0,0,1322,155,1,0,0,0,1323,
1325,5,14,0,0,1324,1326,5,147,0,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,
1327,1,0,0,0,1327,1328,3,168,84,0,1328,157,1,0,0,0,1329,1331,5,14,0,0,1330,
1332,5,147,0,0,1331,1330,1,0,0,0,1331,1332,1,0,0,0,1332,1333,1,0,0,0,1333,
1347,3,168,84,0,1334,1336,5,147,0,0,1335,1334,1,0,0,0,1335,1336,1,0,0,0,
1336,1337,1,0,0,0,1337,1339,5,9,0,0,1338,1340,5,14,0,0,1339,1338,1,0,0,0,
1339,1340,1,0,0,0,1340,1342,1,0,0,0,1341,1343,5,147,0,0,1342,1341,1,0,0,
0,1342,1343,1,0,0,0,1343,1344,1,0,0,0,1344,1346,3,168,84,0,1345,1335,1,0,
0,0,1346,1349,1,0,0,0,1347,1345,1,0,0,0,1347,1348,1,0,0,0,1348,159,1,0,0,
0,1349,1347,1,0,0,0,1350,1357,3,162,81,0,1351,1353,5,147,0,0,1352,1351,1,
0,0,0,1352,1353,1,0,0,0,1353,1354,1,0,0,0,1354,1356,3,162,81,0,1355,1352,
1,0,0,0,1356,1359,1,0,0,0,1357,1355,1,0,0,0,1357,1358,1,0,0,0,1358,161,1,
0,0,0,1359,1357,1,0,0,0,1360,1362,5,14,0,0,1361,1363,5,147,0,0,1362,1361,
1,0,0,0,1362,1363,1,0,0,0,1363,1364,1,0,0,0,1364,1365,3,166,83,0,1365,163,
1,0,0,0,1366,1368,5,13,0,0,1367,1369,5,147,0,0,1368,1367,1,0,0,0,1368,1369,
1,0,0,0,1369,1374,1,0,0,0,1370,1372,3,254,127,0,1371,1373,5,147,0,0,1372,
1371,1,0,0,0,1372,1373,1,0,0,0,1373,1375,1,0,0,0,1374,1370,1,0,0,0,1374,
1375,1,0,0,0,1375,1386,1,0,0,0,1376,1378,5,15,0,0,1377,1379,5,147,0,0,1378,
1377,1,0,0,0,1378,1379,1,0,0,0,1379,1384,1,0,0,0,1380,1382,3,254,127,0,1381,
1383,5,147,0,0,1382,1381,1,0,0,0,1382,1383,1,0,0,0,1383,1385,1,0,0,0,1384,
1380,1,0,0,0,1384,1385,1,0,0,0,1385,1387,1,0,0,0,1386,1376,1,0,0,0,1386,
1387,1,0,0,0,1387,165,1,0,0,0,1388,1389,3,258,129,0,1389,167,1,0,0,0,1390,
1391,3,258,129,0,1391,169,1,0,0,0,1392,1393,3,172,86,0,1393,171,1,0,0,0,
1394,1401,3,174,87,0,1395,1396,5,147,0,0,1396,1397,5,101,0,0,1397,1398,5,
147,0,0,1398,1400,3,174,87,0,1399,1395,1,0,0,0,1400,1403,1,0,0,0,1401,1399,
1,0,0,0,1401,1402,1,0,0,0,1402,173,1,0,0,0,1403,1401,1,0,0,0,1404,1411,3,
176,88,0,1405,1406,5,147,0,0,1406,1407,5,102,0,0,1407,1408,5,147,0,0,1408,
1410,3,176,88,0,1409,1405,1,0,0,0,1410,1413,1,0,0,0,1411,1409,1,0,0,0,1411,
1412,1,0,0,0,1412,175,1,0,0,0,1413,1411,1,0,0,0,1414,1421,3,178,89,0,1415,
1416,5,147,0,0,1416,1417,5,103,0,0,1417,1418,5,147,0,0,1418,1420,3,178,89,
0,1419,1415,1,0,0,0,1420,1423,1,0,0,0,1421,1419,1,0,0,0,1421,1422,1,0,0,
0,1422,177,1,0,0,0,1423,1421,1,0,0,0,1424,1426,5,104,0,0,1425,1427,5,147,
0,0,1426,1425,1,0,0,0,1426,1427,1,0,0,0,1427,1429,1,0,0,0,1428,1424,1,0,
0,0,1429,1432,1,0,0,0,1430,1428,1,0,0,0,1430,1431,1,0,0,0,1431,1433,1,0,
0,0,1432,1430,1,0,0,0,1433,1434,3,180,90,0,1434,179,1,0,0,0,1435,1442,3,
182,91,0,1436,1438,5,147,0,0,1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,1439,
1,0,0,0,1439,1441,3,206,103,0,1440,1437,1,0,0,0,1441,1444,1,0,0,0,1442,1440,
1,0,0,0,1442,1443,1,0,0,0,1443,181,1,0,0,0,1444,1442,1,0,0,0,1445,1464,3,
184,92,0,1446,1448,5,147,0,0,1447,1446,1,0,0,0,1447,1448,1,0,0,0,1448,1449,
1,0,0,0,1449,1451,5,16,0,0,1450,1452,5,147,0,0,1451,1450,1,0,0,0,1451,1452,
1,0,0,0,1452,1453,1,0,0,0,1453,1463,3,184,92,0,1454,1456,5,147,0,0,1455,
1454,1,0,0,0,1455,1456,1,0,0,0,1456,1457,1,0,0,0,1457,1459,5,12,0,0,1458,
1460,5,147,0,0,1459,1458,1,0,0,0,1459,1460,1,0,0,0,1460,1461,1,0,0,0,1461,
1463,3,184,92,0,1462,1447,1,0,0,0,1462,1455,1,0,0,0,1463,1466,1,0,0,0,1464,
1462,1,0,0,0,1464,1465,1,0,0,0,1465,183,1,0,0,0,1466,1464,1,0,0,0,1467,1494,
3,186,93,0,1468,1470,5,147,0,0,1469,1468,1,0,0,0,1469,1470,1,0,0,0,1470,
1471,1,0,0,0,1471,1473,5,13,0,0,1472,1474,5,147,0,0,1473,1472,1,0,0,0,1473,
1474,1,0,0,0,1474,1475,1,0,0,0,1475,1493,3,186,93,0,1476,1478,5,147,0,0,
1477,1476,1,0,0,0,1477,1478,1,0,0,0,1478,1479,1,0,0,0,1479,1481,5,17,0,0,
1480,1482,5,147,0,0,1481,1480,1,0,0,0,1481,1482,1,0,0,0,1482,1483,1,0,0,
0,1483,1493,3,186,93,0,1484,1486,5,147,0,0,1485,1484,1,0,0,0,1485,1486,1,
0,0,0,1486,1487,1,0,0,0,1487,1489,5,18,0,0,1488,1490,5,147,0,0,1489,1488,
1,0,0,0,1489,1490,1,0,0,0,1490,1491,1,0,0,0,1491,1493,3,186,93,0,1492,1469,
1,0,0,0,1492,1477,1,0,0,0,1492,1485,1,0,0,0,1493,1496,1,0,0,0,1494,1492,
1,0,0,0,1494,1495,1,0,0,0,1495,185,1,0,0,0,1496,1494,1,0,0,0,1497,1508,3,
188,94,0,1498,1500,5,147,0,0,1499,1498,1,0,0,0,1499,1500,1,0,0,0,1500,1501,
1,0,0,0,1501,1503,5,19,0,0,1502,1504,5,147,0,0,1503,1502,1,0,0,0,1503,1504,
1,0,0,0,1504,1505,1,0,0,0,1505,1507,3,188,94,0,1506,1499,1,0,0,0,1507,1510,
1,0,0,0,1508,1506,1,0,0,0,1508,1509,1,0,0,0,1509,187,1,0,0,0,1510,1508,1,
0,0,0,1511,1513,7,1,0,0,1512,1514,5,147,0,0,1513,1512,1,0,0,0,1513,1514,
1,0,0,0,1514,1516,1,0,0,0,1515,1511,1,0,0,0,1516,1519,1,0,0,0,1517,1515,
1,0,0,0,1517,1518,1,0,0,0,1518,1520,1,0,0,0,1519,1517,1,0,0,0,1520,1521,
3,190,95,0,1521,189,1,0,0,0,1522,1573,3,194,97,0,1523,1525,5,147,0,0,1524,
1523,1,0,0,0,1524,1525,1,0,0,0,1525,1526,1,0,0,0,1526,1527,5,5,0,0,1527,
1528,3,170,85,0,1528,1529,5,6,0,0,1529,1572,1,0,0,0,1530,1532,5,147,0,0,
1531,1530,1,0,0,0,1531,1532,1,0,0,0,1532,1533,1,0,0,0,1533,1535,5,5,0,0,
1534,1536,3,170,85,0,1535,1534,1,0,0,0,1535,1536,1,0,0,0,1536,1537,1,0,0,
0,1537,1539,5,15,0,0,1538,1540,3,170,85,0,1539,1538,1,0,0,0,1539,1540,1,
0,0,0,1540,1541,1,0,0,0,1541,1572,5,6,0,0,1542,1556,3,192,96,0,1543,1544,
5,147,0,0,1544,1556,5,81,0,0,1545,1546,5,147,0,0,1546,1547,5,105,0,0,1547,
1548,5,147,0,0,1548,1556,5,67,0,0,1549,1550,5,147,0,0,1550,1551,5,106,0,
0,1551,1552,5,147,0,0,1552,1556,5,67,0,0,1553,1554,5,147,0,0,1554,1556,5,
107,0,0,1555,1542,1,0,0,0,1555,1543,1,0,0,0,1555,1545,1,0,0,0,1555,1549,
1,0,0,0,1555,1553,1,0,0,0,1556,1558,1,0,0,0,1557,1559,5,147,0,0,1558,1557,
1,0,0,0,1558,1559,1,0,0,0,1559,1560,1,0,0,0,1560,1572,3,194,97,0,1561,1562,
5,147,0,0,1562,1563,5,62,0,0,1563,1564,5,147,0,0,1564,1572,5,108,0,0,1565,
1566,5,147,0,0,1566,1567,5,62,0,0,1567,1568,5,147,0,0,1568,1569,5,104,0,
0,1569,1570,5,147,0,0,1570,1572,5,108,0,0,1571,1524,1,0,0,0,1571,1531,1,
0,0,0,1571,1555,1,0,0,0,1571,1561,1,0,0,0,1571,1565,1,0,0,0,1572,1575,1,
0,0,0,1573,1571,1,0,0,0,1573,1574,1,0,0,0,1574,191,1,0,0,0,1575,1573,1,0,
0,0,1576,1578,5,147,0,0,1577,1576,1,0,0,0,1577,1578,1,0,0,0,1578,1579,1,
0,0,0,1579,1580,5,20,0,0,1580,193,1,0,0,0,1581,1588,3,196,98,0,1582,1584,
5,147,0,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,1585,1,0,0,0,1585,1587,
3,234,117,0,1586,1583,1,0,0,0,1587,1590,1,0,0,0,1588,1586,1,0,0,0,1588,1589,
1,0,0,0,1589,1595,1,0,0,0,1590,1588,1,0,0,0,1591,1593,5,147,0,0,1592,1591,
1,0,0,0,1592,1593,1,0,0,0,1593,1594,1,0,0,0,1594,1596,3,160,80,0,1595,1592,
1,0,0,0,1595,1596,1,0,0,0,1596,195,1,0,0,0,1597,1721,3,198,99,0,1598,1721,
3,248,124,0,1599,1721,3,246,123,0,1600,1721,3,236,118,0,1601,1603,5,109,
0,0,1602,1604,5,147,0,0,1603,1602,1,0,0,0,1603,1604,1,0,0,0,1604,1605,1,
0,0,0,1605,1607,5,3,0,0,1606,1608,5,147,0,0,1607,1606,1,0,0,0,1607,1608,
1,0,0,0,1608,1609,1,0,0,0,1609,1611,5,13,0,0,1610,1612,5,147,0,0,1611,1610,
1,0,0,0,1611,1612,1,0,0,0,1612,1613,1,0,0,0,1613,1721,5,4,0,0,1614,1721,
3,230,115,0,1615,1721,3,232,116,0,1616,1618,5,110,0,0,1617,1619,5,147,0,
0,1618,1617,1,0,0,0,1618,1619,1,0,0,0,1619,1620,1,0,0,0,1620,1622,5,3,0,
0,1621,1623,5,147,0,0,1622,1621,1,0,0,0,1622,1623,1,0,0,0,1623,1624,1,0,
0,0,1624,1626,3,212,106,0,1625,1627,5,147,0,0,1626,1625,1,0,0,0,1626,1627,
1,0,0,0,1627,1628,1,0,0,0,1628,1629,5,4,0,0,1629,1721,1,0,0,0,1630,1632,
5,111,0,0,1631,1633,5,147,0,0,1632,1631,1,0,0,0,1632,1633,1,0,0,0,1633,1634,
1,0,0,0,1634,1636,5,3,0,0,1635,1637,5,147,0,0,1636,1635,1,0,0,0,1636,1637,
1,0,0,0,1637,1638,1,0,0,0,1638,1640,3,212,106,0,1639,1641,5,147,0,0,1640,
1639,1,0,0,0,1640,1641,1,0,0,0,1641,1650,1,0,0,0,1642,1644,5,147,0,0,1643,
1642,1,0,0,0,1643,1644,1,0,0,0,1644,1645,1,0,0,0,1645,1647,5,9,0,0,1646,
1648,5,147,0,0,1647,1646,1,0,0,0,1647,1648,1,0,0,0,1648,1649,1,0,0,0,1649,
1651,3,170,85,0,1650,1643,1,0,0,0,1650,1651,1,0,0,0,1651,1653,1,0,0,0,1652,
1654,5,147,0,0,1653,1652,1,0,0,0,1653,1654,1,0,0,0,1654,1655,1,0,0,0,1655,
1656,5,4,0,0,1656,1721,1,0,0,0,1657,1721,3,204,102,0,1658,1660,5,55,0,0,
1659,1661,5,147,0,0,1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,1662,1,0,0,
0,1662,1664,5,3,0,0,1663,1665,5,147,0,0,1664,1663,1,0,0,0,1664,1665,1,0,
0,0,1665,1666,1,0,0,0,1666,1668,3,212,106,0,1667,1669,5,147,0,0,1668,1667,
1,0,0,0,1668,1669,1,0,0,0,1669,1670,1,0,0,0,1670,1671,5,4,0,0,1671,1721,
1,0,0,0,1672,1674,5,112,0,0,1673,1675,5,147,0,0,1674,1673,1,0,0,0,1674,1675,
1,0,0,0,1675,1676,1,0,0,0,1676,1678,5,3,0,0,1677,1679,5,147,0,0,1678,1677,
1,0,0,0,1678,1679,1,0,0,0,1679,1680,1,0,0,0,1680,1682,3,212,106,0,1681,1683,
5,147,0,0,1682,1681,1,0,0,0,1682,1683,1,0,0,0,1683,1684,1,0,0,0,1684,1685,
5,4,0,0,1685,1721,1,0,0,0,1686,1688,5,113,0,0,1687,1689,5,147,0,0,1688,1687,
1,0,0,0,1688,1689,1,0,0,0,1689,1690,1,0,0,0,1690,1692,5,3,0,0,1691,1693,
5,147,0,0,1692,1691,1,0,0,0,1692,1693,1,0,0,0,1693,1694,1,0,0,0,1694,1696,
3,212,106,0,1695,1697,5,147,0,0,1696,1695,1,0,0,0,1696,1697,1,0,0,0,1697,
1698,1,0,0,0,1698,1699,5,4,0,0,1699,1721,1,0,0,0,1700,1702,5,114,0,0,1701,
1703,5,147,0,0,1702,1701,1,0,0,0,1702,1703,1,0,0,0,1703,1704,1,0,0,0,1704,
1706,5,3,0,0,1705,1707,5,147,0,0,1706,1705,1,0,0,0,1706,1707,1,0,0,0,1707,
1708,1,0,0,0,1708,1710,3,212,106,0,1709,1711,5,147,0,0,1710,1709,1,0,0,0,
1710,1711,1,0,0,0,1711,1712,1,0,0,0,1712,1713,5,4,0,0,1713,1721,1,0,0,0,
1714,1721,3,142,71,0,1715,1721,3,210,105,0,1716,1721,3,208,104,0,1717,1721,
3,216,108,0,1718,1721,3,240,120,0,1719,1721,3,220,110,0,1720,1597,1,0,0,
0,1720,1598,1,0,0,0,1720,1599,1,0,0,0,1720,1600,1,0,0,0,1720,1601,1,0,0,
0,1720,1614,1,0,0,0,1720,1615,1,0,0,0,1720,1616,1,0,0,0,1720,1630,1,0,0,
0,1720,1657,1,0,0,0,1720,1658,1,0,0,0,1720,1672,1,0,0,0,1720,1686,1,0,0,
0,1720,1700,1,0,0,0,1720,1714,1,0,0,0,1720,1715,1,0,0,0,1720,1716,1,0,0,
0,1720,1717,1,0,0,0,1720,1718,1,0,0,0,1720,1719,1,0,0,0,1721,197,1,0,0,0,
1722,1729,3,242,121,0,1723,1729,5,123,0,0,1724,1729,3,200,100,0,1725,1729,
5,108,0,0,1726,1729,3,244,122,0,1727,1729,3,202,101,0,1728,1722,1,0,0,0,
1728,1723,1,0,0,0,1728,1724,1,0,0,0,1728,1725,1,0,0,0,1728,1726,1,0,0,0,
1728,1727,1,0,0,0,1729,199,1,0,0,0,1730,1731,7,2,0,0,1731,201,1,0,0,0,1732,
1734,5,5,0,0,1733,1735,5,147,0,0,1734,1733,1,0,0,0,1734,1735,1,0,0,0,1735,
1753,1,0,0,0,1736,1738,3,170,85,0,1737,1739,5,147,0,0,1738,1737,1,0,0,0,
1738,1739,1,0,0,0,1739,1750,1,0,0,0,1740,1742,5,7,0,0,1741,1743,5,147,0,
0,1742,1741,1,0,0,0,1742,1743,1,0,0,0,1743,1744,1,0,0,0,1744,1746,3,170,
85,0,1745,1747,5,147,0,0,1746,1745,1,0,0,0,1746,1747,1,0,0,0,1747,1749,1,
0,0,0,1748,1740,1,0,0,0,1749,1752,1,0,0,0,1750,1748,1,0,0,0,1750,1751,1,
0,0,0,1751,1754,1,0,0,0,1752,1750,1,0,0,0,1753,1736,1,0,0,0,1753,1754,1,
0,0,0,1754,1755,1,0,0,0,1755,1756,5,6,0,0,1756,203,1,0,0,0,1757,1759,5,117,
0,0,1758,1760,5,147,0,0,1759,1758,1,0,0,0,1759,1760,1,0,0,0,1760,1761,1,
0,0,0,1761,1763,5,3,0,0,1762,1764,5,147,0,0,1763,1762,1,0,0,0,1763,1764,
1,0,0,0,1764,1765,1,0,0,0,1765,1767,3,240,120,0,1766,1768,5,147,0,0,1767,
1766,1,0,0,0,1767,1768,1,0,0,0,1768,1769,1,0,0,0,1769,1771,5,2,0,0,1770,
1772,5,147,0,0,1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,1773,1,0,0,0,1773,
1775,3,170,85,0,1774,1776,5,147,0,0,1775,1774,1,0,0,0,1775,1776,1,0,0,0,
1776,1777,1,0,0,0,1777,1779,5,7,0,0,1778,1780,5,147,0,0,1779,1778,1,0,0,
0,1779,1780,1,0,0,0,1780,1781,1,0,0,0,1781,1783,3,214,107,0,1782,1784,5,
147,0,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,1784,1785,1,0,0,0,1785,1787,
5,9,0,0,1786,1788,5,147,0,0,1787,1786,1,0,0,0,1787,1788,1,0,0,0,1788,1789,
1,0,0,0,1789,1791,3,170,85,0,1790,1792,5,147,0,0,1791,1790,1,0,0,0,1791,
1792,1,0,0,0,1792,1793,1,0,0,0,1793,1794,5,4,0,0,1794,205,1,0,0,0,1795,1797,
5,2,0,0,1796,1798,5,147,0,0,1797,1796,1,0,0,0,1797,1798,1,0,0,0,1798,1799,
1,0,0,0,1799,1826,3,182,91,0,1800,1802,5,21,0,0,1801,1803,5,147,0,0,1802,
1801,1,0,0,0,1802,1803,1,0,0,0,1803,1804,1,0,0,0,1804,1826,3,182,91,0,1805,
1807,5,22,0,0,1806,1808,5,147,0,0,1807,1806,1,0,0,0,1807,1808,1,0,0,0,1808,
1809,1,0,0,0,1809,1826,3,182,91,0,1810,1812,5,23,0,0,1811,1813,5,147,0,0,
1812,1811,1,0,0,0,1812,1813,1,0,0,0,1813,1814,1,0,0,0,1814,1826,3,182,91,
0,1815,1817,5,24,0,0,1816,1818,5,147,0,0,1817,1816,1,0,0,0,1817,1818,1,0,
0,0,1818,1819,1,0,0,0,1819,1826,3,182,91,0,1820,1822,5,25,0,0,1821,1823,
5,147,0,0,1822,1821,1,0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,0,0,1824,1826,
3,182,91,0,1825,1795,1,0,0,0,1825,1800,1,0,0,0,1825,1805,1,0,0,0,1825,1810,
1,0,0,0,1825,1815,1,0,0,0,1825,1820,1,0,0,0,1826,207,1,0,0,0,1827,1829,5,
3,0,0,1828,1830,5,147,0,0,1829,1828,1,0,0,0,1829,1830,1,0,0,0,1830,1831,
1,0,0,0,1831,1833,3,170,85,0,1832,1834,5,147,0,0,1833,1832,1,0,0,0,1833,
1834,1,0,0,0,1834,1835,1,0,0,0,1835,1836,5,4,0,0,1836,209,1,0,0,0,1837,1842,
3,146,73,0,1838,1840,5,147,0,0,1839,1838,1,0,0,0,1839,1840,1,0,0,0,1840,
1841,1,0,0,0,1841,1843,3,148,74,0,1842,1839,1,0,0,0,1843,1844,1,0,0,0,1844,
1842,1,0,0,0,1844,1845,1,0,0,0,1845,211,1,0,0,0,1846,1851,3,214,107,0,1847,
1849,5,147,0,0,1848,1847,1,0,0,0,1848,1849,1,0,0,0,1849,1850,1,0,0,0,1850,
1852,3,134,67,0,1851,1848,1,0,0,0,1851,1852,1,0,0,0,1852,213,1,0,0,0,1853,
1854,3,240,120,0,1854,1855,5,147,0,0,1855,1856,5,81,0,0,1856,1857,5,147,
0,0,1857,1858,3,170,85,0,1858,215,1,0,0,0,1859,1861,3,218,109,0,1860,1862,
5,147,0,0,1861,1860,1,0,0,0,1861,1862,1,0,0,0,1862,1863,1,0,0,0,1863,1865,
5,3,0,0,1864,1866,5,147,0,0,1865,1864,1,0,0,0,1865,1866,1,0,0,0,1866,1871,
1,0,0,0,1867,1869,5,84,0,0,1868,1870,5,147,0,0,1869,1868,1,0,0,0,1869,1870,
1,0,0,0,1870,1872,1,0,0,0,1871,1867,1,0,0,0,1871,1872,1,0,0,0,1872,1890,
1,0,0,0,1873,1875,3,170,85,0,1874,1876,5,147,0,0,1875,1874,1,0,0,0,1875,
1876,1,0,0,0,1876,1887,1,0,0,0,1877,1879,5,7,0,0,1878,1880,5,147,0,0,1879,
1878,1,0,0,0,1879,1880,1,0,0,0,1880,1881,1,0,0,0,1881,1883,3,170,85,0,1882,
1884,5,147,0,0,1883,1882,1,0,0,0,1883,1884,1,0,0,0,1884,1886,1,0,0,0,1885,
1877,1,0,0,0,1886,1889,1,0,0,0,1887,1885,1,0,0,0,1887,1888,1,0,0,0,1888,
1891,1,0,0,0,1889,1887,1,0,0,0,1890,1873,1,0,0,0,1890,1891,1,0,0,0,1891,
1892,1,0,0,0,1892,1893,5,4,0,0,1893,217,1,0,0,0,1894,1897,3,226,113,0,1895,
1897,5,64,0,0,1896,1894,1,0,0,0,1896,1895,1,0,0,0,1897,219,1,0,0,0,1898,
1900,3,226,113,0,1899,1901,5,147,0,0,1900,1899,1,0,0,0,1900,1901,1,0,0,0,
1901,1902,1,0,0,0,1902,1904,5,3,0,0,1903,1905,5,147,0,0,1904,1903,1,0,0,
0,1904,1905,1,0,0,0,1905,1923,1,0,0,0,1906,1908,3,170,85,0,1907,1909,5,147,
0,0,1908,1907,1,0,0,0,1908,1909,1,0,0,0,1909,1920,1,0,0,0,1910,1912,5,7,
0,0,1911,1913,5,147,0,0,1912,1911,1,0,0,0,1912,1913,1,0,0,0,1913,1914,1,
0,0,0,1914,1916,3,170,85,0,1915,1917,5,147,0,0,1916,1915,1,0,0,0,1916,1917,
1,0,0,0,1917,1919,1,0,0,0,1918,1910,1,0,0,0,1919,1922,1,0,0,0,1920,1918,
1,0,0,0,1920,1921,1,0,0,0,1921,1924,1,0,0,0,1922,1920,1,0,0,0,1923,1906,
1,0,0,0,1923,1924,1,0,0,0,1924,1925,1,0,0,0,1925,1926,5,4,0,0,1926,221,1,
0,0,0,1927,1928,3,226,113,0,1928,223,1,0,0,0,1929,1930,3,262,131,0,1930,
225,1,0,0,0,1931,1932,3,228,114,0,1932,1933,3,262,131,0,1933,227,1,0,0,0,
1934,1935,3,262,131,0,1935,1936,5,26,0,0,1936,1938,1,0,0,0,1937,1934,1,0,
0,0,1938,1941,1,0,0,0,1939,1937,1,0,0,0,1939,1940,1,0,0,0,1940,229,1,0,0,
0,1941,1939,1,0,0,0,1942,1944,5,5,0,0,1943,1945,5,147,0,0,1944,1943,1,0,
0,0,1944,1945,1,0,0,0,1945,1946,1,0,0,0,1946,1955,3,212,106,0,1947,1949,
5,147,0,0,1948,1947,1,0,0,0,1948,1949,1,0,0,0,1949,1950,1,0,0,0,1950,1952,
5,9,0,0,1951,1953,5,147,0,0,1952,1951,1,0,0,0,1952,1953,1,0,0,0,1953,1954,
1,0,0,0,1954,1956,3,170,85,0,1955,1948,1,0,0,0,1955,1956,1,0,0,0,1956,1958,
1,0,0,0,1957,1959,5,147,0,0,1958,1957,1,0,0,0,1958,1959,1,0,0,0,1959,1960,
1,0,0,0,1960,1961,5,6,0,0,1961,231,1,0,0,0,1962,1964,5,5,0,0,1963,1965,5,
147,0,0,1964,1963,1,0,0,0,1964,1965,1,0,0,0,1965,1974,1,0,0,0,1966,1968,
3,240,120,0,1967,1969,5,147,0,0,1968,1967,1,0,0,0,1968,1969,1,0,0,0,1969,
1970,1,0,0,0,1970,1972,5,2,0,0,1971,1973,5,147,0,0,1972,1971,1,0,0,0,1972,
1973,1,0,0,0,1973,1975,1,0,0,0,1974,1966,1,0,0,0,1974,1975,1,0,0,0,1975,
1976,1,0,0,0,1976,1978,3,210,105,0,1977,1979,5,147,0,0,1978,1977,1,0,0,0,
1978,1979,1,0,0,0,1979,1988,1,0,0,0,1980,1982,5,98,0,0,1981,1983,5,147,0,
0,1982,1981,1,0,0,0,1982,1983,1,0,0,0,1983,1984,1,0,0,0,1984,1986,3,170,
85,0,1985,1987,5,147,0,0,1986,1985,1,0,0,0,1986,1987,1,0,0,0,1987,1989,1,
0,0,0,1988,1980,1,0,0,0,1988,1989,1,0,0,0,1989,1990,1,0,0,0,1990,1992,5,
9,0,0,1991,1993,5,147,0,0,1992,1991,1,0,0,0,1992,1993,1,0,0,0,1993,1994,
1,0,0,0,1994,1996,3,170,85,0,1995,1997,5,147,0,0,1996,1995,1,0,0,0,1996,
1997,1,0,0,0,1997,1998,1,0,0,0,1998,1999,5,6,0,0,1999,233,1,0,0,0,2000,2002,
5,26,0,0,2001,2003,5,147,0,0,2002,2001,1,0,0,0,2002,2003,1,0,0,0,2003,2004,
1,0,0,0,2004,2005,3,252,126,0,2005,235,1,0,0,0,2006,2011,5,118,0,0,2007,
2009,5,147,0,0,2008,2007,1,0,0,0,2008,2009,1,0,0,0,2009,2010,1,0,0,0,2010,
2012,3,238,119,0,2011,2008,1,0,0,0,2012,2013,1,0,0,0,2013,2011,1,0,0,0,2013,
2014,1,0,0,0,2014,2029,1,0,0,0,2015,2017,5,118,0,0,2016,2018,5,147,0,0,2017,
2016,1,0,0,0,2017,2018,1,0,0,0,2018,2019,1,0,0,0,2019,2024,3,170,85,0,2020,
2022,5,147,0,0,2021,2020,1,0,0,0,2021,2022,1,0,0,0,2022,2023,1,0,0,0,2023,
2025,3,238,119,0,2024,2021,1,0,0,0,2025,2026,1,0,0,0,2026,2024,1,0,0,0,2026,
2027,1,0,0,0,2027,2029,1,0,0,0,2028,2006,1,0,0,0,2028,2015,1,0,0,0,2029,
2038,1,0,0,0,2030,2032,5,147,0,0,2031,2030,1,0,0,0,2031,2032,1,0,0,0,2032,
2033,1,0,0,0,2033,2035,5,119,0,0,2034,2036,5,147,0,0,2035,2034,1,0,0,0,2035,
2036,1,0,0,0,2036,2037,1,0,0,0,2037,2039,3,170,85,0,2038,2031,1,0,0,0,2038,
2039,1,0,0,0,2039,2041,1,0,0,0,2040,2042,5,147,0,0,2041,2040,1,0,0,0,2041,
2042,1,0,0,0,2042,2043,1,0,0,0,2043,2044,5,120,0,0,2044,237,1,0,0,0,2045,
2047,5,121,0,0,2046,2048,5,147,0,0,2047,2046,1,0,0,0,2047,2048,1,0,0,0,2048,
2049,1,0,0,0,2049,2051,3,170,85,0,2050,2052,5,147,0,0,2051,2050,1,0,0,0,
2051,2052,1,0,0,0,2052,2053,1,0,0,0,2053,2055,5,122,0,0,2054,2056,5,147,
0,0,2055,2054,1,0,0,0,2055,2056,1,0,0,0,2056,2057,1,0,0,0,2057,2058,3,170,
85,0,2058,239,1,0,0,0,2059,2060,3,262,131,0,2060,241,1,0,0,0,2061,2064,3,
256,128,0,2062,2064,3,254,127,0,2063,2061,1,0,0,0,2063,2062,1,0,0,0,2064,
243,1,0,0,0,2065,2067,5,10,0,0,2066,2068,5,147,0,0,2067,2066,1,0,0,0,2067,
2068,1,0,0,0,2068,2102,1,0,0,0,2069,2071,3,252,126,0,2070,2072,5,147,0,0,
2071,2070,1,0,0,0,2071,2072,1,0,0,0,2072,2073,1,0,0,0,2073,2075,5,14,0,0,
2074,2076,5,147,0,0,2075,2074,1,0,0,0,2075,2076,1,0,0,0,2076,2077,1,0,0,
0,2077,2079,3,170,85,0,2078,2080,5,147,0,0,2079,2078,1,0,0,0,2079,2080,1,
0,0,0,2080,2099,1,0,0,0,2081,2083,5,7,0,0,2082,2084,5,147,0,0,2083,2082,
1,0,0,0,2083,2084,1,0,0,0,2084,2085,1,0,0,0,2085,2087,3,252,126,0,2086,2088,
5,147,0,0,2087,2086,1,0,0,0,2087,2088,1,0,0,0,2088,2089,1,0,0,0,2089,2091,
5,14,0,0,2090,2092,5,147,0,0,2091,2090,1,0,0,0,2091,2092,1,0,0,0,2092,2093,
1,0,0,0,2093,2095,3,170,85,0,2094,2096,5,147,0,0,2095,2094,1,0,0,0,2095,
2096,1,0,0,0,2096,2098,1,0,0,0,2097,2081,1,0,0,0,2098,2101,1,0,0,0,2099,
2097,1,0,0,0,2099,2100,1,0,0,0,2100,2103,1,0,0,0,2101,2099,1,0,0,0,2102,
2069,1,0,0,0,2102,2103,1,0,0,0,2103,2104,1,0,0,0,2104,2105,5,11,0,0,2105,
245,1,0,0,0,2106,2108,5,10,0,0,2107,2109,5,147,0,0,2108,2107,1,0,0,0,2108,
2109,1,0,0,0,2109,2112,1,0,0,0,2110,2113,3,262,131,0,2111,2113,5,126,0,0,
2112,2110,1,0,0,0,2112,2111,1,0,0,0,2113,2115,1,0,0,0,2114,2116,5,147,0,
0,2115,2114,1,0,0,0,2115,2116,1,0,0,0,2116,2117,1,0,0,0,2117,2118,5,11,0,
0,2118,247,1,0,0,0,2119,2122,5,27,0,0,2120,2123,3,262,131,0,2121,2123,5,
126,0,0,2122,2120,1,0,0,0,2122,2121,1,0,0,0,2123,249,1,0,0,0,2124,2129,3,
196,98,0,2125,2127,5,147,0,0,2126,2125,1,0,0,0,2126,2127,1,0,0,0,2127,2128,
1,0,0,0,2128,2130,3,234,117,0,2129,2126,1,0,0,0,2130,2131,1,0,0,0,2131,2129,
1,0,0,0,2131,2132,1,0,0,0,2132,251,1,0,0,0,2133,2140,3,258,129,0,2134,2135,
3,258,129,0,2135,2136,5,5,0,0,2136,2137,5,126,0,0,2137,2138,5,6,0,0,2138,
2140,1,0,0,0,2139,2133,1,0,0,0,2139,2134,1,0,0,0,2140,253,1,0,0,0,2141,2142,
7,3,0,0,2142,255,1,0,0,0,2143,2144,7,4,0,0,2144,257,1,0,0,0,2145,2148,3,
262,131,0,2146,2148,3,260,130,0,2147,2145,1,0,0,0,2147,2146,1,0,0,0,2148,
259,1,0,0,0,2149,2150,7,5,0,0,2150,261,1,0,0,0,2151,2167,5,143,0,0,2152,
2167,5,146,0,0,2153,2167,5,128,0,0,2154,2167,5,109,0,0,2155,2167,5,110,0,
0,2156,2167,5,111,0,0,2157,2167,5,112,0,0,2158,2167,5,113,0,0,2159,2167,
5,114,0,0,2160,2167,5,65,0,0,2161,2167,5,120,0,0,2162,2167,5,69,0,0,2163,
2167,5,96,0,0,2164,2167,5,47,0,0,2165,2167,3,264,132,0,2166,2151,1,0,0,0,
2166,2152,1,0,0,0,2166,2153,1,0,0,0,2166,2154,1,0,0,0,2166,2155,1,0,0,0,
2166,2156,1,0,0,0,2166,2157,1,0,0,0,2166,2158,1,0,0,0,2166,2159,1,0,0,0,
2166,2160,1,0,0,0,2166,2161,1,0,0,0,2166,2162,1,0,0,0,2166,2163,1,0,0,0,
2166,2164,1,0,0,0,2166,2165,1,0,0,0,2167,263,1,0,0,0,2168,2193,5,61,0,0,
2169,2193,5,82,0,0,2170,2193,5,118,0,0,2171,2193,5,53,0,0,2172,2193,5,56,
0,0,2173,2193,5,66,0,0,2174,2193,5,78,0,0,2175,2193,5,48,0,0,2176,2193,5,
71,0,0,2177,2193,5,80,0,0,2178,2193,5,68,0,0,2179,2193,5,58,0,0,2180,2193,
5,94,0,0,2181,2193,5,97,0,0,2182,2193,5,52,0,0,2183,2193,5,49,0,0,2184,2193,
5,117,0,0,2185,2193,5,95,0,0,2186,2193,5,99,0,0,2187,2193,5,50,0,0,2188,
2193,5,51,0,0,2189,2193,5,121,0,0,2190,2193,5,83,0,0,2191,2193,3,260,130,
0,2192,2168,1,0,0,0,2192,2169,1,0,0,0,2192,2170,1,0,0,0,2192,2171,1,0,0,
0,2192,2172,1,0,0,0,2192,2173,1,0,0,0,2192,2174,1,0,0,0,2192,2175,1,0,0,
0,2192,2176,1,0,0,0,2192,2177,1,0,0,0,2192,2178,1,0,0,0,2192,2179,1,0,0,
0,2192,2180,1,0,0,0,2192,2181,1,0,0,0,2192,2182,1,0,0,0,2192,2183,1,0,0,
0,2192,2184,1,0,0,0,2192,2185,1,0,0,0,2192,2186,1,0,0,0,2192,2187,1,0,0,
0,2192,2188,1,0,0,0,2192,2189,1,0,0,0,2192,2190,1,0,0,0,2192,2191,1,0,0,
0,2193,265,1,0,0,0,2194,2195,7,6,0,0,2195,267,1,0,0,0,2196,2197,7,7,0,0,
2197,269,1,0,0,0,2198,2199,7,8,0,0,2199,271,1,0,0,0,366,273,278,281,284,
290,294,300,305,311,322,326,332,338,347,352,357,368,377,382,385,388,392,
395,399,403,409,413,418,423,427,430,432,436,440,445,449,454,458,469,476,
486,524,535,542,556,563,569,579,583,589,597,608,614,626,632,644,648,658,
671,674,678,682,688,692,695,699,709,716,729,733,741,747,751,755,760,765,
769,775,779,785,789,795,799,803,807,811,815,820,827,831,836,843,847,851,
859,866,869,877,882,886,890,894,898,901,907,913,917,921,926,930,937,943,
946,951,954,958,961,969,973,977,981,985,990,995,999,1004,1007,1016,1025,
1030,1043,1046,1049,1069,1073,1078,1088,1097,1106,1114,1120,1124,1129,1138,
1142,1147,1152,1156,1161,1165,1177,1181,1186,1193,1197,1201,1203,1207,1209,
1213,1215,1221,1227,1231,1234,1237,1241,1247,1251,1254,1257,1263,1266,1269,
1273,1279,1282,1285,1289,1293,1297,1299,1303,1305,1308,1312,1314,1321,1325,
1331,1335,1339,1342,1347,1352,1357,1362,1368,1372,1374,1378,1382,1384,1386,
1401,1411,1421,1426,1430,1437,1442,1447,1451,1455,1459,1462,1464,1469,1473,
1477,1481,1485,1489,1492,1494,1499,1503,1508,1513,1517,1524,1531,1535,1539,
1555,1558,1571,1573,1577,1583,1588,1592,1595,1603,1607,1611,1618,1622,1626,
1632,1636,1640,1643,1647,1650,1653,1660,1664,1668,1674,1678,1682,1688,1692,
1696,1702,1706,1710,1720,1728,1734,1738,1742,1746,1750,1753,1759,1763,1767,
1771,1775,1779,1783,1787,1791,1797,1802,1807,1812,1817,1822,1825,1829,1833,
1839,1844,1848,1851,1861,1865,1869,1871,1875,1879,1883,1887,1890,1896,1900,
1904,1908,1912,1916,1920,1923,1939,1944,1948,1952,1955,1958,1964,1968,1972,
1974,1978,1982,1986,1988,1992,1996,2002,2008,2013,2017,2021,2026,2028,2031,
2035,2038,2041,2047,2051,2055,2063,2067,2071,2075,2079,2083,2087,2091,2095,
2099,2102,2108,2112,2115,2122,2126,2131,2139,2147,2166,2192];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

// commented line was failing until I updated to the line below
// https://github.com/antlr/antlr4/issues/4139
// const sharedContextCache = new antlr4.PredictionContextCache()
const sharedContextCache = new antlr4.atn.PredictionContextCache()

export default class CypherParser extends antlr4.Parser {

    static grammarFileName = "Cypher.g4";
    static literalNames = [ null, "';'", "'='", "'('", "')'", "'['", "']'", 
                            "','", "'+='", "'|'", "'{'", "'}'", "'-'", "'*'", 
                            "':'", "'..'", "'+'", "'/'", "'%'", "'^'", "'=~'", 
                            "'<>'", "'<'", "'>'", "'<='", "'>='", "'.'", 
                            "'$'", "'\\u27E8'", "'\\u3008'", "'\\uFE64'", 
                            "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", "'\\uFE65'", 
                            "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", 
                            "'\\u2012'", "'\\u2013'", "'\\u2014'", "'\\u2015'", 
                            "'\\u2212'", "'\\uFE58'", "'\\uFE63'", "'\\uFF0D'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, "'0'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, "CYPHER", 
                             "EXPLAIN", "PROFILE", "USE", "USING", "PERIODIC", 
                             "COMMIT", "UNION", "ALL", "CREATE", "DROP", 
                             "INDEX", "ON", "CONSTRAINT", "ASSERT", "IS", 
                             "UNIQUE", "EXISTS", "LOAD", "CSV", "WITH", 
                             "HEADERS", "FROM", "AS", "FIELDTERMINATOR", 
                             "OPTIONAL", "MATCH", "UNWIND", "MERGE", "SET", 
                             "DETACH", "DELETE", "REMOVE", "FOREACH", "IN", 
                             "CALL", "YIELD", "DISTINCT", "RETURN", "ORDER", 
                             "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", 
                             "DESCENDING", "DESC", "JOIN", "SCAN", "START", 
                             "NODE", "WHERE", "SHORTESTPATH", "ALLSHORTESTPATHS", 
                             "OR", "XOR", "AND", "NOT", "STARTS", "ENDS", 
                             "CONTAINS", "NULL", "COUNT", "FILTER", "EXTRACT", 
                             "ANY", "NONE", "SINGLE", "TRUE", "FALSE", "REDUCE", 
                             "CASE", "ELSE", "END", "WHEN", "THEN", "StringLiteral", 
                             "EscapedChar", "HexInteger", "DecimalInteger", 
                             "OctalInteger", "HexLetter", "HexDigit", "Digit", 
                             "NonZeroDigit", "NonZeroOctDigit", "OctDigit", 
                             "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", 
                             "FOR", "REQUIRE", "MANDATORY", "SCALAR", "OF", 
                             "ADD", "UnescapedSymbolicName", "IdentifierStart", 
                             "IdentifierPart", "EscapedSymbolicName", "SP", 
                             "WHITESPACE", "Comment" ];
    static ruleNames = [ "oC_Cypher", "oC_QueryOptions", "oC_AnyCypherOption", 
                         "oC_CypherOption", "oC_VersionNumber", "oC_Explain", 
                         "oC_Profile", "oC_ConfigurationOption", "oC_Statement", 
                         "oC_Query", "oC_Use", "oC_RegularQuery", "oC_BulkImportQuery", 
                         "oC_PeriodicCommitHint", "oC_LoadCSVQuery", "oC_Union", 
                         "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                         "oC_UpdatingClause", "oC_ReadingClause", "oC_Command", 
                         "oC_CreateUniqueConstraint", "oC_CreateNodePropertyExistenceConstraint", 
                         "oC_CreateRelationshipPropertyExistenceConstraint", 
                         "oC_CreateIndex", "oC_DropUniqueConstraint", "oC_DropNodePropertyExistenceConstraint", 
                         "oC_DropRelationshipPropertyExistenceConstraint", 
                         "oC_DropIndex", "oC_Index", "oC_UniqueConstraint", 
                         "oC_NodePropertyExistenceConstraint", "oC_RelationshipPropertyExistenceConstraint", 
                         "oC_RelationshipPatternSyntax", "oC_LoadCSV", "oC_Match", 
                         "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                         "oC_CreateUnique", "oC_Set", "oC_SetItem", "oC_Delete", 
                         "oC_Remove", "oC_RemoveItem", "oC_Foreach", "oC_InQueryCall", 
                         "oC_SubQuery", "oC_StandaloneCall", "oC_YieldItems", 
                         "oC_YieldItem", "oC_With", "oC_Return", "oC_ReturnBody", 
                         "oC_ReturnItems", "oC_ReturnItem", "oC_Order", 
                         "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Hint", 
                         "oC_IdentifiedIndexLookup", "oC_IndexQuery", "oC_IdLookup", 
                         "oC_LiteralIds", "oC_Where", "oC_Pattern", "oC_PatternPart", 
                         "oC_AnonymousPatternPart", "oC_ShortestPathPattern", 
                         "oC_PatternElement", "oC_NodePattern", "oC_PatternElementChain", 
                         "oC_RelationshipPattern", "oC_RelationshipDetail", 
                         "oC_Properties", "oC_RelType", "oC_RelationshipTypes", 
                         "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", 
                         "oC_LabelName", "oC_RelTypeName", "oC_Expression", 
                         "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
                         "oC_NotExpression", "oC_ComparisonExpression", 
                         "oC_AddOrSubtractExpression", "oC_MultiplyDivideModuloExpression", 
                         "oC_PowerOfExpression", "oC_UnaryAddOrSubtractExpression", 
                         "oC_StringListNullOperatorExpression", "oC_RegularExpression", 
                         "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", 
                         "oC_BooleanLiteral", "oC_ListLiteral", "oC_Reduce", 
                         "oC_PartialComparisonExpression", "oC_ParenthesizedExpression", 
                         "oC_RelationshipsPattern", "oC_FilterExpression", 
                         "oC_IdInColl", "oC_FunctionInvocation", "oC_FunctionName", 
                         "oC_ExplicitProcedureInvocation", "oC_ImplicitProcedureInvocation", 
                         "oC_ProcedureResultField", "oC_ProcedureName", 
                         "oC_Namespace", "oC_ListComprehension", "oC_PatternComprehension", 
                         "oC_PropertyLookup", "oC_CaseExpression", "oC_CaseAlternatives", 
                         "oC_Variable", "oC_NumberLiteral", "oC_MapLiteral", 
                         "oC_LegacyParameter", "oC_Parameter", "oC_PropertyExpression", 
                         "oC_PropertyKeyName", "oC_IntegerLiteral", "oC_DoubleLiteral", 
                         "oC_SchemaName", "oC_ReservedWord", "oC_SymbolicName", 
                         "oC_KeywordsThatArePartOfFunctionNames", "oC_LeftArrowHead", 
                         "oC_RightArrowHead", "oC_Dash" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CypherParser.ruleNames;
        this.literalNames = CypherParser.literalNames;
        this.symbolicNames = CypherParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	oC_Cypher() {
	    let localctx = new OC_CypherContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CypherParser.RULE_oC_Cypher);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 273;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 272;
	            this.match(CypherParser.SP);
	        }

	        this.state = 275;
	        this.oC_QueryOptions();
	        this.state = 276;
	        this.oC_Statement();
	        this.state = 281;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        if(la_===1) {
	            this.state = 278;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 277;
	                this.match(CypherParser.SP);
	            }

	            this.state = 280;
	            this.match(CypherParser.T__0);

	        }
	        this.state = 284;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 283;
	            this.match(CypherParser.SP);
	        }

	        this.state = 286;
	        this.match(CypherParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_QueryOptions() {
	    let localctx = new OC_QueryOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CypherParser.RULE_oC_QueryOptions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 294;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CypherParser.CYPHER - 47)) | (1 << (CypherParser.EXPLAIN - 47)) | (1 << (CypherParser.PROFILE - 47)))) !== 0)) {
	            this.state = 288;
	            this.oC_AnyCypherOption();
	            this.state = 290;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 289;
	                this.match(CypherParser.SP);
	            }

	            this.state = 296;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_AnyCypherOption() {
	    let localctx = new OC_AnyCypherOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CypherParser.RULE_oC_AnyCypherOption);
	    try {
	        this.state = 300;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.CYPHER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 297;
	            this.oC_CypherOption();
	            break;
	        case CypherParser.EXPLAIN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 298;
	            this.oC_Explain();
	            break;
	        case CypherParser.PROFILE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 299;
	            this.oC_Profile();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CypherOption() {
	    let localctx = new OC_CypherOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CypherParser.RULE_oC_CypherOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 302;
	        this.match(CypherParser.CYPHER);
	        this.state = 305;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        if(la_===1) {
	            this.state = 303;
	            this.match(CypherParser.SP);
	            this.state = 304;
	            this.oC_VersionNumber();

	        }
	        this.state = 311;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 307;
	                this.match(CypherParser.SP);
	                this.state = 308;
	                this.oC_ConfigurationOption(); 
	            }
	            this.state = 313;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_VersionNumber() {
	    let localctx = new OC_VersionNumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CypherParser.RULE_oC_VersionNumber);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 314;
	        this.match(CypherParser.RegularDecimalReal);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Explain() {
	    let localctx = new OC_ExplainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, CypherParser.RULE_oC_Explain);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 316;
	        this.match(CypherParser.EXPLAIN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Profile() {
	    let localctx = new OC_ProfileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CypherParser.RULE_oC_Profile);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 318;
	        this.match(CypherParser.PROFILE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ConfigurationOption() {
	    let localctx = new OC_ConfigurationOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CypherParser.RULE_oC_ConfigurationOption);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 320;
	        this.oC_SymbolicName();
	        this.state = 322;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 321;
	            this.match(CypherParser.SP);
	        }

	        this.state = 324;
	        this.match(CypherParser.T__1);
	        this.state = 326;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 325;
	            this.match(CypherParser.SP);
	        }

	        this.state = 328;
	        this.oC_SymbolicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Statement() {
	    let localctx = new OC_StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CypherParser.RULE_oC_Statement);
	    try {
	        this.state = 332;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 330;
	            this.oC_Command();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 331;
	            this.oC_Query();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Query() {
	    let localctx = new OC_QueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CypherParser.RULE_oC_Query);
	    try {
	        this.state = 338;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 334;
	            this.oC_RegularQuery();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 335;
	            this.oC_StandaloneCall();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 336;
	            this.oC_BulkImportQuery();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 337;
	            this.oC_SubQuery();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Use() {
	    let localctx = new OC_UseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CypherParser.RULE_oC_Use);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 340;
	        this.match(CypherParser.USE);
	        this.state = 341;
	        this.match(CypherParser.SP);
	        this.state = 342;
	        this.oC_Expression();
	        this.state = 343;
	        this.match(CypherParser.SP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RegularQuery() {
	    let localctx = new OC_RegularQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CypherParser.RULE_oC_RegularQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 345;
	        this.oC_SingleQuery();
	        this.state = 352;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 347;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 346;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 349;
	                this.oC_Union(); 
	            }
	            this.state = 354;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_BulkImportQuery() {
	    let localctx = new OC_BulkImportQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CypherParser.RULE_oC_BulkImportQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 355;
	        this.oC_PeriodicCommitHint();
	        this.state = 357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 356;
	            this.match(CypherParser.SP);
	        }

	        this.state = 359;
	        this.oC_LoadCSVQuery();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PeriodicCommitHint() {
	    let localctx = new OC_PeriodicCommitHintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CypherParser.RULE_oC_PeriodicCommitHint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 361;
	        this.match(CypherParser.USING);
	        this.state = 362;
	        this.match(CypherParser.SP);
	        this.state = 363;
	        this.match(CypherParser.PERIODIC);
	        this.state = 364;
	        this.match(CypherParser.SP);
	        this.state = 365;
	        this.match(CypherParser.COMMIT);
	        this.state = 368;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        if(la_===1) {
	            this.state = 366;
	            this.match(CypherParser.SP);
	            this.state = 367;
	            this.oC_IntegerLiteral();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_LoadCSVQuery() {
	    let localctx = new OC_LoadCSVQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CypherParser.RULE_oC_LoadCSVQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 370;
	        this.oC_LoadCSV();
	        this.state = 371;
	        this.oC_SingleQuery();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Union() {
	    let localctx = new OC_UnionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, CypherParser.RULE_oC_Union);
	    var _la = 0; // Token type
	    try {
	        this.state = 385;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 373;
	            this.match(CypherParser.UNION);
	            this.state = 374;
	            this.match(CypherParser.SP);
	            this.state = 375;
	            this.match(CypherParser.ALL);
	            this.state = 377;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 376;
	                this.match(CypherParser.SP);
	            }

	            this.state = 379;
	            this.oC_SingleQuery();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 380;
	            this.match(CypherParser.UNION);
	            this.state = 382;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 381;
	                this.match(CypherParser.SP);
	            }

	            this.state = 384;
	            this.oC_SingleQuery();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SingleQuery() {
	    let localctx = new OC_SingleQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CypherParser.RULE_oC_SingleQuery);
	    var _la = 0; // Token type
	    try {
	        this.state = 395;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 388;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.USE) {
	                this.state = 387;
	                this.oC_Use();
	            }

	            this.state = 390;
	            this.oC_SinglePartQuery();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 392;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.USE) {
	                this.state = 391;
	                this.oC_Use();
	            }

	            this.state = 394;
	            this.oC_MultiPartQuery();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SinglePartQuery() {
	    let localctx = new OC_SinglePartQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CypherParser.RULE_oC_SinglePartQuery);
	    var _la = 0; // Token type
	    try {
	        this.state = 432;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 403;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CypherParser.LOAD - 65)) | (1 << (CypherParser.OPTIONAL - 65)) | (1 << (CypherParser.MATCH - 65)) | (1 << (CypherParser.UNWIND - 65)) | (1 << (CypherParser.CALL - 65)))) !== 0)) {
	                this.state = 397;
	                this.oC_ReadingClause();
	                this.state = 399;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 398;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 405;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 406;
	            this.oC_Return();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 413;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CypherParser.LOAD - 65)) | (1 << (CypherParser.OPTIONAL - 65)) | (1 << (CypherParser.MATCH - 65)) | (1 << (CypherParser.UNWIND - 65)) | (1 << (CypherParser.CALL - 65)))) !== 0)) {
	                this.state = 407;
	                this.oC_ReadingClause();
	                this.state = 409;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 408;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 415;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 416;
	            this.oC_UpdatingClause();
	            this.state = 423;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 418;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 417;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 420;
	                    this.oC_UpdatingClause(); 
	                }
	                this.state = 425;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
	            }

	            this.state = 430;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	            if(la_===1) {
	                this.state = 427;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 426;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 429;
	                this.oC_Return();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_MultiPartQuery() {
	    let localctx = new OC_MultiPartQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CypherParser.RULE_oC_MultiPartQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 456; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 440;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		while(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CypherParser.LOAD - 65)) | (1 << (CypherParser.OPTIONAL - 65)) | (1 << (CypherParser.MATCH - 65)) | (1 << (CypherParser.UNWIND - 65)) | (1 << (CypherParser.CALL - 65)))) !== 0)) {
	        		    this.state = 434;
	        		    this.oC_ReadingClause();
	        		    this.state = 436;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		    if(_la===CypherParser.SP) {
	        		        this.state = 435;
	        		        this.match(CypherParser.SP);
	        		    }

	        		    this.state = 442;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		}
	        		this.state = 449;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		while(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (CypherParser.CREATE - 56)) | (1 << (CypherParser.MERGE - 56)) | (1 << (CypherParser.SET - 56)) | (1 << (CypherParser.DETACH - 56)) | (1 << (CypherParser.DELETE - 56)) | (1 << (CypherParser.REMOVE - 56)) | (1 << (CypherParser.FOREACH - 56)))) !== 0)) {
	        		    this.state = 443;
	        		    this.oC_UpdatingClause();
	        		    this.state = 445;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		    if(_la===CypherParser.SP) {
	        		        this.state = 444;
	        		        this.match(CypherParser.SP);
	        		    }

	        		    this.state = 451;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		}
	        		this.state = 452;
	        		this.oC_With();
	        		this.state = 454;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		if(_la===CypherParser.SP) {
	        		    this.state = 453;
	        		    this.match(CypherParser.SP);
	        		}

	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 458; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,37, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 460;
	        this.oC_SinglePartQuery();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_UpdatingClause() {
	    let localctx = new OC_UpdatingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CypherParser.RULE_oC_UpdatingClause);
	    try {
	        this.state = 469;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 462;
	            this.oC_Create();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 463;
	            this.oC_Merge();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 464;
	            this.oC_CreateUnique();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 465;
	            this.oC_Foreach();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 466;
	            this.oC_Delete();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 467;
	            this.oC_Set();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 468;
	            this.oC_Remove();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ReadingClause() {
	    let localctx = new OC_ReadingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CypherParser.RULE_oC_ReadingClause);
	    try {
	        this.state = 476;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 471;
	            this.oC_LoadCSV();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 472;
	            this.oC_Match();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 473;
	            this.oC_Unwind();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 474;
	            this.oC_InQueryCall();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 475;
	            this.oC_SubQuery();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Command() {
	    let localctx = new OC_CommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CypherParser.RULE_oC_Command);
	    try {
	        this.state = 486;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 478;
	            this.oC_CreateIndex();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 479;
	            this.oC_DropIndex();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 480;
	            this.oC_CreateUniqueConstraint();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 481;
	            this.oC_DropUniqueConstraint();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 482;
	            this.oC_CreateNodePropertyExistenceConstraint();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 483;
	            this.oC_DropNodePropertyExistenceConstraint();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 484;
	            this.oC_CreateRelationshipPropertyExistenceConstraint();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 485;
	            this.oC_DropRelationshipPropertyExistenceConstraint();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CreateUniqueConstraint() {
	    let localctx = new OC_CreateUniqueConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CypherParser.RULE_oC_CreateUniqueConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 488;
	        this.match(CypherParser.CREATE);
	        this.state = 489;
	        this.match(CypherParser.SP);
	        this.state = 490;
	        this.oC_UniqueConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CreateNodePropertyExistenceConstraint() {
	    let localctx = new OC_CreateNodePropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CypherParser.RULE_oC_CreateNodePropertyExistenceConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 492;
	        this.match(CypherParser.CREATE);
	        this.state = 493;
	        this.match(CypherParser.SP);
	        this.state = 494;
	        this.oC_NodePropertyExistenceConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CreateRelationshipPropertyExistenceConstraint() {
	    let localctx = new OC_CreateRelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CypherParser.RULE_oC_CreateRelationshipPropertyExistenceConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 496;
	        this.match(CypherParser.CREATE);
	        this.state = 497;
	        this.match(CypherParser.SP);
	        this.state = 498;
	        this.oC_RelationshipPropertyExistenceConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CreateIndex() {
	    let localctx = new OC_CreateIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, CypherParser.RULE_oC_CreateIndex);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 500;
	        this.match(CypherParser.CREATE);
	        this.state = 501;
	        this.match(CypherParser.SP);
	        this.state = 502;
	        this.oC_Index();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_DropUniqueConstraint() {
	    let localctx = new OC_DropUniqueConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CypherParser.RULE_oC_DropUniqueConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 504;
	        this.match(CypherParser.DROP);
	        this.state = 505;
	        this.match(CypherParser.SP);
	        this.state = 506;
	        this.oC_UniqueConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_DropNodePropertyExistenceConstraint() {
	    let localctx = new OC_DropNodePropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CypherParser.RULE_oC_DropNodePropertyExistenceConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 508;
	        this.match(CypherParser.DROP);
	        this.state = 509;
	        this.match(CypherParser.SP);
	        this.state = 510;
	        this.oC_NodePropertyExistenceConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_DropRelationshipPropertyExistenceConstraint() {
	    let localctx = new OC_DropRelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CypherParser.RULE_oC_DropRelationshipPropertyExistenceConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 512;
	        this.match(CypherParser.DROP);
	        this.state = 513;
	        this.match(CypherParser.SP);
	        this.state = 514;
	        this.oC_RelationshipPropertyExistenceConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_DropIndex() {
	    let localctx = new OC_DropIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CypherParser.RULE_oC_DropIndex);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 516;
	        this.match(CypherParser.DROP);
	        this.state = 517;
	        this.match(CypherParser.SP);
	        this.state = 518;
	        this.oC_Index();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Index() {
	    let localctx = new OC_IndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CypherParser.RULE_oC_Index);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 520;
	        this.match(CypherParser.INDEX);
	        this.state = 521;
	        this.match(CypherParser.SP);
	        this.state = 522;
	        this.match(CypherParser.ON);
	        this.state = 524;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 523;
	            this.match(CypherParser.SP);
	        }

	        this.state = 526;
	        this.oC_NodeLabel();
	        this.state = 527;
	        this.match(CypherParser.T__2);
	        this.state = 528;
	        this.oC_PropertyKeyName();
	        this.state = 529;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_UniqueConstraint() {
	    let localctx = new OC_UniqueConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CypherParser.RULE_oC_UniqueConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 531;
	        this.match(CypherParser.CONSTRAINT);
	        this.state = 532;
	        this.match(CypherParser.SP);
	        this.state = 533;
	        this.match(CypherParser.ON);
	        this.state = 535;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 534;
	            this.match(CypherParser.SP);
	        }

	        this.state = 537;
	        this.match(CypherParser.T__2);
	        this.state = 538;
	        this.oC_Variable();
	        this.state = 539;
	        this.oC_NodeLabel();
	        this.state = 540;
	        this.match(CypherParser.T__3);
	        this.state = 542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 541;
	            this.match(CypherParser.SP);
	        }

	        this.state = 544;
	        this.match(CypherParser.ASSERT);
	        this.state = 545;
	        this.match(CypherParser.SP);
	        this.state = 546;
	        this.oC_PropertyExpression();
	        this.state = 547;
	        this.match(CypherParser.SP);
	        this.state = 548;
	        this.match(CypherParser.IS);
	        this.state = 549;
	        this.match(CypherParser.SP);
	        this.state = 550;
	        this.match(CypherParser.UNIQUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodePropertyExistenceConstraint() {
	    let localctx = new OC_NodePropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CypherParser.RULE_oC_NodePropertyExistenceConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 552;
	        this.match(CypherParser.CONSTRAINT);
	        this.state = 553;
	        this.match(CypherParser.SP);
	        this.state = 554;
	        this.match(CypherParser.ON);
	        this.state = 556;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 555;
	            this.match(CypherParser.SP);
	        }

	        this.state = 558;
	        this.match(CypherParser.T__2);
	        this.state = 559;
	        this.oC_Variable();
	        this.state = 560;
	        this.oC_NodeLabel();
	        this.state = 561;
	        this.match(CypherParser.T__3);
	        this.state = 563;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 562;
	            this.match(CypherParser.SP);
	        }

	        this.state = 565;
	        this.match(CypherParser.ASSERT);
	        this.state = 566;
	        this.match(CypherParser.SP);
	        this.state = 567;
	        this.match(CypherParser.EXISTS);
	        this.state = 569;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 568;
	            this.match(CypherParser.SP);
	        }

	        this.state = 571;
	        this.match(CypherParser.T__2);
	        this.state = 572;
	        this.oC_PropertyExpression();
	        this.state = 573;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipPropertyExistenceConstraint() {
	    let localctx = new OC_RelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CypherParser.RULE_oC_RelationshipPropertyExistenceConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 575;
	        this.match(CypherParser.CONSTRAINT);
	        this.state = 576;
	        this.match(CypherParser.SP);
	        this.state = 577;
	        this.match(CypherParser.ON);
	        this.state = 579;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 578;
	            this.match(CypherParser.SP);
	        }

	        this.state = 581;
	        this.oC_RelationshipPatternSyntax();
	        this.state = 583;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 582;
	            this.match(CypherParser.SP);
	        }

	        this.state = 585;
	        this.match(CypherParser.ASSERT);
	        this.state = 586;
	        this.match(CypherParser.SP);
	        this.state = 587;
	        this.match(CypherParser.EXISTS);
	        this.state = 589;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 588;
	            this.match(CypherParser.SP);
	        }

	        this.state = 591;
	        this.match(CypherParser.T__2);
	        this.state = 592;
	        this.oC_PropertyExpression();
	        this.state = 593;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipPatternSyntax() {
	    let localctx = new OC_RelationshipPatternSyntaxContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CypherParser.RULE_oC_RelationshipPatternSyntax);
	    var _la = 0; // Token type
	    try {
	        this.state = 648;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 595;
	            this.match(CypherParser.T__2);
	            this.state = 597;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 596;
	                this.match(CypherParser.SP);
	            }

	            this.state = 599;
	            this.match(CypherParser.T__3);
	            this.state = 600;
	            this.oC_Dash();
	            this.state = 601;
	            this.match(CypherParser.T__4);
	            this.state = 602;
	            this.oC_Variable();
	            this.state = 603;
	            this.oC_RelType();
	            this.state = 604;
	            this.match(CypherParser.T__5);
	            this.state = 605;
	            this.oC_Dash();
	            this.state = 606;
	            this.match(CypherParser.T__2);
	            this.state = 608;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 607;
	                this.match(CypherParser.SP);
	            }

	            this.state = 610;
	            this.match(CypherParser.T__3);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 612;
	            this.match(CypherParser.T__2);
	            this.state = 614;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 613;
	                this.match(CypherParser.SP);
	            }

	            this.state = 616;
	            this.match(CypherParser.T__3);
	            this.state = 617;
	            this.oC_Dash();
	            this.state = 618;
	            this.match(CypherParser.T__4);
	            this.state = 619;
	            this.oC_Variable();
	            this.state = 620;
	            this.oC_RelType();
	            this.state = 621;
	            this.match(CypherParser.T__5);
	            this.state = 622;
	            this.oC_Dash();
	            this.state = 623;
	            this.oC_RightArrowHead();
	            this.state = 624;
	            this.match(CypherParser.T__2);
	            this.state = 626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 625;
	                this.match(CypherParser.SP);
	            }

	            this.state = 628;
	            this.match(CypherParser.T__3);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 630;
	            this.match(CypherParser.T__2);
	            this.state = 632;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 631;
	                this.match(CypherParser.SP);
	            }

	            this.state = 634;
	            this.match(CypherParser.T__3);
	            this.state = 635;
	            this.oC_LeftArrowHead();
	            this.state = 636;
	            this.oC_Dash();
	            this.state = 637;
	            this.match(CypherParser.T__4);
	            this.state = 638;
	            this.oC_Variable();
	            this.state = 639;
	            this.oC_RelType();
	            this.state = 640;
	            this.match(CypherParser.T__5);
	            this.state = 641;
	            this.oC_Dash();
	            this.state = 642;
	            this.match(CypherParser.T__2);
	            this.state = 644;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 643;
	                this.match(CypherParser.SP);
	            }

	            this.state = 646;
	            this.match(CypherParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_LoadCSV() {
	    let localctx = new OC_LoadCSVContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CypherParser.RULE_oC_LoadCSV);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 650;
	        this.match(CypherParser.LOAD);
	        this.state = 651;
	        this.match(CypherParser.SP);
	        this.state = 652;
	        this.match(CypherParser.CSV);
	        this.state = 653;
	        this.match(CypherParser.SP);
	        this.state = 658;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.WITH) {
	            this.state = 654;
	            this.match(CypherParser.WITH);
	            this.state = 655;
	            this.match(CypherParser.SP);
	            this.state = 656;
	            this.match(CypherParser.HEADERS);
	            this.state = 657;
	            this.match(CypherParser.SP);
	        }

	        this.state = 660;
	        this.match(CypherParser.FROM);
	        this.state = 661;
	        this.match(CypherParser.SP);
	        this.state = 662;
	        this.oC_Expression();
	        this.state = 663;
	        this.match(CypherParser.SP);
	        this.state = 664;
	        this.match(CypherParser.AS);
	        this.state = 665;
	        this.match(CypherParser.SP);
	        this.state = 666;
	        this.oC_Variable();
	        this.state = 667;
	        this.match(CypherParser.SP);
	        this.state = 671;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.FIELDTERMINATOR) {
	            this.state = 668;
	            this.match(CypherParser.FIELDTERMINATOR);
	            this.state = 669;
	            this.match(CypherParser.SP);
	            this.state = 670;
	            this.match(CypherParser.StringLiteral);
	        }

	        this.state = 674;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        if(la_===1) {
	            this.state = 673;
	            this.match(CypherParser.SP);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Match() {
	    let localctx = new OC_MatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CypherParser.RULE_oC_Match);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 678;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.OPTIONAL) {
	            this.state = 676;
	            this.match(CypherParser.OPTIONAL);
	            this.state = 677;
	            this.match(CypherParser.SP);
	        }

	        this.state = 680;
	        this.match(CypherParser.MATCH);
	        this.state = 682;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 681;
	            this.match(CypherParser.SP);
	        }

	        this.state = 684;
	        this.oC_Pattern();
	        this.state = 688;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 685;
	                this.oC_Hint(); 
	            }
	            this.state = 690;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
	        }

	        this.state = 695;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        if(la_===1) {
	            this.state = 692;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 691;
	                this.match(CypherParser.SP);
	            }

	            this.state = 694;
	            this.oC_Where();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Unwind() {
	    let localctx = new OC_UnwindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CypherParser.RULE_oC_Unwind);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 697;
	        this.match(CypherParser.UNWIND);
	        this.state = 699;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 698;
	            this.match(CypherParser.SP);
	        }

	        this.state = 701;
	        this.oC_Expression();
	        this.state = 702;
	        this.match(CypherParser.SP);
	        this.state = 703;
	        this.match(CypherParser.AS);
	        this.state = 704;
	        this.match(CypherParser.SP);
	        this.state = 705;
	        this.oC_Variable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Merge() {
	    let localctx = new OC_MergeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CypherParser.RULE_oC_Merge);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 707;
	        this.match(CypherParser.MERGE);
	        this.state = 709;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 708;
	            this.match(CypherParser.SP);
	        }

	        this.state = 711;
	        this.oC_PatternPart();
	        this.state = 716;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,67,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 712;
	                this.match(CypherParser.SP);
	                this.state = 713;
	                this.oC_MergeAction(); 
	            }
	            this.state = 718;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,67,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_MergeAction() {
	    let localctx = new OC_MergeActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CypherParser.RULE_oC_MergeAction);
	    try {
	        this.state = 729;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 719;
	            this.match(CypherParser.ON);
	            this.state = 720;
	            this.match(CypherParser.SP);
	            this.state = 721;
	            this.match(CypherParser.MATCH);
	            this.state = 722;
	            this.match(CypherParser.SP);
	            this.state = 723;
	            this.oC_Set();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 724;
	            this.match(CypherParser.ON);
	            this.state = 725;
	            this.match(CypherParser.SP);
	            this.state = 726;
	            this.match(CypherParser.CREATE);
	            this.state = 727;
	            this.match(CypherParser.SP);
	            this.state = 728;
	            this.oC_Set();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Create() {
	    let localctx = new OC_CreateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CypherParser.RULE_oC_Create);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 731;
	        this.match(CypherParser.CREATE);
	        this.state = 733;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 732;
	            this.match(CypherParser.SP);
	        }

	        this.state = 735;
	        this.oC_Pattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CreateUnique() {
	    let localctx = new OC_CreateUniqueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CypherParser.RULE_oC_CreateUnique);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 737;
	        this.match(CypherParser.CREATE);
	        this.state = 738;
	        this.match(CypherParser.SP);
	        this.state = 739;
	        this.match(CypherParser.UNIQUE);
	        this.state = 741;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 740;
	            this.match(CypherParser.SP);
	        }

	        this.state = 743;
	        this.oC_Pattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Set() {
	    let localctx = new OC_SetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CypherParser.RULE_oC_Set);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 745;
	        this.match(CypherParser.SET);
	        this.state = 747;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 746;
	            this.match(CypherParser.SP);
	        }

	        this.state = 749;
	        this.oC_SetItem();
	        this.state = 760;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,74,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 751;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 750;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 753;
	                this.match(CypherParser.T__6);
	                this.state = 755;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 754;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 757;
	                this.oC_SetItem(); 
	            }
	            this.state = 762;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,74,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SetItem() {
	    let localctx = new OC_SetItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CypherParser.RULE_oC_SetItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 799;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 763;
	            this.oC_PropertyExpression();
	            this.state = 765;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 764;
	                this.match(CypherParser.SP);
	            }

	            this.state = 767;
	            this.match(CypherParser.T__1);
	            this.state = 769;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 768;
	                this.match(CypherParser.SP);
	            }

	            this.state = 771;
	            this.oC_Expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 773;
	            this.oC_Variable();
	            this.state = 775;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 774;
	                this.match(CypherParser.SP);
	            }

	            this.state = 777;
	            this.match(CypherParser.T__1);
	            this.state = 779;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 778;
	                this.match(CypherParser.SP);
	            }

	            this.state = 781;
	            this.oC_Expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 783;
	            this.oC_Variable();
	            this.state = 785;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 784;
	                this.match(CypherParser.SP);
	            }

	            this.state = 787;
	            this.match(CypherParser.T__7);
	            this.state = 789;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 788;
	                this.match(CypherParser.SP);
	            }

	            this.state = 791;
	            this.oC_Expression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 793;
	            this.oC_Variable();
	            this.state = 795;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 794;
	                this.match(CypherParser.SP);
	            }

	            this.state = 797;
	            this.oC_NodeLabels();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Delete() {
	    let localctx = new OC_DeleteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CypherParser.RULE_oC_Delete);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 803;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.DETACH) {
	            this.state = 801;
	            this.match(CypherParser.DETACH);
	            this.state = 802;
	            this.match(CypherParser.SP);
	        }

	        this.state = 805;
	        this.match(CypherParser.DELETE);
	        this.state = 807;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 806;
	            this.match(CypherParser.SP);
	        }

	        this.state = 809;
	        this.oC_Expression();
	        this.state = 820;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 811;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 810;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 813;
	                this.match(CypherParser.T__6);
	                this.state = 815;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 814;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 817;
	                this.oC_Expression(); 
	            }
	            this.state = 822;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Remove() {
	    let localctx = new OC_RemoveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CypherParser.RULE_oC_Remove);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 823;
	        this.match(CypherParser.REMOVE);
	        this.state = 824;
	        this.match(CypherParser.SP);
	        this.state = 825;
	        this.oC_RemoveItem();
	        this.state = 836;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 827;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 826;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 829;
	                this.match(CypherParser.T__6);
	                this.state = 831;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 830;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 833;
	                this.oC_RemoveItem(); 
	            }
	            this.state = 838;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RemoveItem() {
	    let localctx = new OC_RemoveItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CypherParser.RULE_oC_RemoveItem);
	    try {
	        this.state = 843;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 839;
	            this.oC_Variable();
	            this.state = 840;
	            this.oC_NodeLabels();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 842;
	            this.oC_PropertyExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Foreach() {
	    let localctx = new OC_ForeachContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CypherParser.RULE_oC_Foreach);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 845;
	        this.match(CypherParser.FOREACH);
	        this.state = 847;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 846;
	            this.match(CypherParser.SP);
	        }

	        this.state = 849;
	        this.match(CypherParser.T__2);
	        this.state = 851;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 850;
	            this.match(CypherParser.SP);
	        }

	        this.state = 853;
	        this.oC_Variable();
	        this.state = 854;
	        this.match(CypherParser.SP);
	        this.state = 855;
	        this.match(CypherParser.IN);
	        this.state = 856;
	        this.match(CypherParser.SP);
	        this.state = 857;
	        this.oC_Expression();
	        this.state = 859;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 858;
	            this.match(CypherParser.SP);
	        }

	        this.state = 861;
	        this.match(CypherParser.T__8);
	        this.state = 864; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 862;
	        		this.match(CypherParser.SP);
	        		this.state = 863;
	        		this.oC_UpdatingClause();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 866; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,95, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 869;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 868;
	            this.match(CypherParser.SP);
	        }

	        this.state = 871;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_InQueryCall() {
	    let localctx = new OC_InQueryCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, CypherParser.RULE_oC_InQueryCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 873;
	        this.match(CypherParser.CALL);
	        this.state = 874;
	        this.match(CypherParser.SP);
	        this.state = 875;
	        this.oC_ExplicitProcedureInvocation();
	        this.state = 882;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        if(la_===1) {
	            this.state = 877;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 876;
	                this.match(CypherParser.SP);
	            }

	            this.state = 879;
	            this.match(CypherParser.YIELD);
	            this.state = 880;
	            this.match(CypherParser.SP);
	            this.state = 881;
	            this.oC_YieldItems();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SubQuery() {
	    let localctx = new OC_SubQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CypherParser.RULE_oC_SubQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 884;
	        this.match(CypherParser.CALL);
	        this.state = 886;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 885;
	            this.match(CypherParser.SP);
	        }

	        this.state = 888;
	        this.match(CypherParser.T__9);
	        this.state = 890;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 889;
	            this.match(CypherParser.SP);
	        }

	        this.state = 892;
	        this.oC_Query();
	        this.state = 894;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 893;
	            this.match(CypherParser.SP);
	        }

	        this.state = 896;
	        this.match(CypherParser.T__10);
	        this.state = 898;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        if(la_===1) {
	            this.state = 897;
	            this.match(CypherParser.SP);

	        }
	        this.state = 901;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	        if(la_===1) {
	            this.state = 900;
	            this.oC_Return();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_StandaloneCall() {
	    let localctx = new OC_StandaloneCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CypherParser.RULE_oC_StandaloneCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 903;
	        this.match(CypherParser.CALL);
	        this.state = 904;
	        this.match(CypherParser.SP);
	        this.state = 907;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 905;
	            this.oC_ExplicitProcedureInvocation();
	            break;

	        case 2:
	            this.state = 906;
	            this.oC_ImplicitProcedureInvocation();
	            break;

	        }
	        this.state = 913;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        if(la_===1) {
	            this.state = 909;
	            this.match(CypherParser.SP);
	            this.state = 910;
	            this.match(CypherParser.YIELD);
	            this.state = 911;
	            this.match(CypherParser.SP);
	            this.state = 912;
	            this.oC_YieldItems();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_YieldItems() {
	    let localctx = new OC_YieldItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CypherParser.RULE_oC_YieldItems);
	    var _la = 0; // Token type
	    try {
	        this.state = 930;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.CYPHER:
	        case CypherParser.EXPLAIN:
	        case CypherParser.PROFILE:
	        case CypherParser.USE:
	        case CypherParser.USING:
	        case CypherParser.PERIODIC:
	        case CypherParser.COMMIT:
	        case CypherParser.UNION:
	        case CypherParser.ALL:
	        case CypherParser.CREATE:
	        case CypherParser.DROP:
	        case CypherParser.INDEX:
	        case CypherParser.ON:
	        case CypherParser.CONSTRAINT:
	        case CypherParser.ASSERT:
	        case CypherParser.IS:
	        case CypherParser.UNIQUE:
	        case CypherParser.EXISTS:
	        case CypherParser.LOAD:
	        case CypherParser.CSV:
	        case CypherParser.WITH:
	        case CypherParser.HEADERS:
	        case CypherParser.FROM:
	        case CypherParser.AS:
	        case CypherParser.FIELDTERMINATOR:
	        case CypherParser.OPTIONAL:
	        case CypherParser.MATCH:
	        case CypherParser.UNWIND:
	        case CypherParser.MERGE:
	        case CypherParser.SET:
	        case CypherParser.DETACH:
	        case CypherParser.DELETE:
	        case CypherParser.REMOVE:
	        case CypherParser.FOREACH:
	        case CypherParser.IN:
	        case CypherParser.CALL:
	        case CypherParser.YIELD:
	        case CypherParser.DISTINCT:
	        case CypherParser.RETURN:
	        case CypherParser.ORDER:
	        case CypherParser.BY:
	        case CypherParser.L_SKIP:
	        case CypherParser.LIMIT:
	        case CypherParser.ASCENDING:
	        case CypherParser.ASC:
	        case CypherParser.DESCENDING:
	        case CypherParser.DESC:
	        case CypherParser.JOIN:
	        case CypherParser.SCAN:
	        case CypherParser.START:
	        case CypherParser.NODE:
	        case CypherParser.WHERE:
	        case CypherParser.SHORTESTPATH:
	        case CypherParser.OR:
	        case CypherParser.XOR:
	        case CypherParser.AND:
	        case CypherParser.NOT:
	        case CypherParser.STARTS:
	        case CypherParser.ENDS:
	        case CypherParser.CONTAINS:
	        case CypherParser.NULL:
	        case CypherParser.COUNT:
	        case CypherParser.FILTER:
	        case CypherParser.EXTRACT:
	        case CypherParser.ANY:
	        case CypherParser.NONE:
	        case CypherParser.SINGLE:
	        case CypherParser.TRUE:
	        case CypherParser.FALSE:
	        case CypherParser.REDUCE:
	        case CypherParser.CASE:
	        case CypherParser.ELSE:
	        case CypherParser.END:
	        case CypherParser.WHEN:
	        case CypherParser.THEN:
	        case CypherParser.HexLetter:
	        case CypherParser.FOR:
	        case CypherParser.REQUIRE:
	        case CypherParser.MANDATORY:
	        case CypherParser.SCALAR:
	        case CypherParser.OF:
	        case CypherParser.ADD:
	        case CypherParser.UnescapedSymbolicName:
	        case CypherParser.EscapedSymbolicName:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 915;
	            this.oC_YieldItem();
	            this.state = 926;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,108,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 917;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 916;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 919;
	                    this.match(CypherParser.T__6);
	                    this.state = 921;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 920;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 923;
	                    this.oC_YieldItem(); 
	                }
	                this.state = 928;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,108,this._ctx);
	            }

	            break;
	        case CypherParser.T__11:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 929;
	            this.match(CypherParser.T__11);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_YieldItem() {
	    let localctx = new OC_YieldItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CypherParser.RULE_oC_YieldItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 937;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	        if(la_===1) {
	            this.state = 932;
	            this.oC_ProcedureResultField();
	            this.state = 933;
	            this.match(CypherParser.SP);
	            this.state = 934;
	            this.match(CypherParser.AS);
	            this.state = 935;
	            this.match(CypherParser.SP);

	        }
	        this.state = 939;
	        this.oC_Variable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_With() {
	    let localctx = new OC_WithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CypherParser.RULE_oC_With);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 941;
	        this.match(CypherParser.WITH);
	        this.state = 946;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        if(la_===1) {
	            this.state = 943;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 942;
	                this.match(CypherParser.SP);
	            }

	            this.state = 945;
	            this.match(CypherParser.DISTINCT);

	        }
	        this.state = 948;
	        this.match(CypherParser.SP);
	        this.state = 949;
	        this.oC_ReturnBody();
	        this.state = 954;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        if(la_===1) {
	            this.state = 951;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 950;
	                this.match(CypherParser.SP);
	            }

	            this.state = 953;
	            this.oC_Where();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Return() {
	    let localctx = new OC_ReturnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CypherParser.RULE_oC_Return);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 956;
	        this.match(CypherParser.RETURN);
	        this.state = 961;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        if(la_===1) {
	            this.state = 958;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 957;
	                this.match(CypherParser.SP);
	            }

	            this.state = 960;
	            this.match(CypherParser.DISTINCT);

	        }
	        this.state = 963;
	        this.match(CypherParser.SP);
	        this.state = 964;
	        this.oC_ReturnBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ReturnBody() {
	    let localctx = new OC_ReturnBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CypherParser.RULE_oC_ReturnBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 966;
	        this.oC_ReturnItems();
	        this.state = 969;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        if(la_===1) {
	            this.state = 967;
	            this.match(CypherParser.SP);
	            this.state = 968;
	            this.oC_Order();

	        }
	        this.state = 973;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        if(la_===1) {
	            this.state = 971;
	            this.match(CypherParser.SP);
	            this.state = 972;
	            this.oC_Skip();

	        }
	        this.state = 977;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        if(la_===1) {
	            this.state = 975;
	            this.match(CypherParser.SP);
	            this.state = 976;
	            this.oC_Limit();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ReturnItems() {
	    let localctx = new OC_ReturnItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CypherParser.RULE_oC_ReturnItems);
	    var _la = 0; // Token type
	    try {
	        this.state = 1007;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.T__12:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 979;
	            this.match(CypherParser.T__12);
	            this.state = 990;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,122,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 981;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 980;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 983;
	                    this.match(CypherParser.T__6);
	                    this.state = 985;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 984;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 987;
	                    this.oC_ReturnItem(); 
	                }
	                this.state = 992;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,122,this._ctx);
	            }

	            break;
	        case CypherParser.T__2:
	        case CypherParser.T__4:
	        case CypherParser.T__9:
	        case CypherParser.T__11:
	        case CypherParser.T__15:
	        case CypherParser.T__26:
	        case CypherParser.CYPHER:
	        case CypherParser.EXPLAIN:
	        case CypherParser.PROFILE:
	        case CypherParser.USE:
	        case CypherParser.USING:
	        case CypherParser.PERIODIC:
	        case CypherParser.COMMIT:
	        case CypherParser.UNION:
	        case CypherParser.ALL:
	        case CypherParser.CREATE:
	        case CypherParser.DROP:
	        case CypherParser.INDEX:
	        case CypherParser.ON:
	        case CypherParser.CONSTRAINT:
	        case CypherParser.ASSERT:
	        case CypherParser.IS:
	        case CypherParser.UNIQUE:
	        case CypherParser.EXISTS:
	        case CypherParser.LOAD:
	        case CypherParser.CSV:
	        case CypherParser.WITH:
	        case CypherParser.HEADERS:
	        case CypherParser.FROM:
	        case CypherParser.AS:
	        case CypherParser.FIELDTERMINATOR:
	        case CypherParser.OPTIONAL:
	        case CypherParser.MATCH:
	        case CypherParser.UNWIND:
	        case CypherParser.MERGE:
	        case CypherParser.SET:
	        case CypherParser.DETACH:
	        case CypherParser.DELETE:
	        case CypherParser.REMOVE:
	        case CypherParser.FOREACH:
	        case CypherParser.IN:
	        case CypherParser.CALL:
	        case CypherParser.YIELD:
	        case CypherParser.DISTINCT:
	        case CypherParser.RETURN:
	        case CypherParser.ORDER:
	        case CypherParser.BY:
	        case CypherParser.L_SKIP:
	        case CypherParser.LIMIT:
	        case CypherParser.ASCENDING:
	        case CypherParser.ASC:
	        case CypherParser.DESCENDING:
	        case CypherParser.DESC:
	        case CypherParser.JOIN:
	        case CypherParser.SCAN:
	        case CypherParser.START:
	        case CypherParser.NODE:
	        case CypherParser.WHERE:
	        case CypherParser.SHORTESTPATH:
	        case CypherParser.ALLSHORTESTPATHS:
	        case CypherParser.OR:
	        case CypherParser.XOR:
	        case CypherParser.AND:
	        case CypherParser.NOT:
	        case CypherParser.STARTS:
	        case CypherParser.ENDS:
	        case CypherParser.CONTAINS:
	        case CypherParser.NULL:
	        case CypherParser.COUNT:
	        case CypherParser.FILTER:
	        case CypherParser.EXTRACT:
	        case CypherParser.ANY:
	        case CypherParser.NONE:
	        case CypherParser.SINGLE:
	        case CypherParser.TRUE:
	        case CypherParser.FALSE:
	        case CypherParser.REDUCE:
	        case CypherParser.CASE:
	        case CypherParser.ELSE:
	        case CypherParser.END:
	        case CypherParser.WHEN:
	        case CypherParser.THEN:
	        case CypherParser.StringLiteral:
	        case CypherParser.HexInteger:
	        case CypherParser.DecimalInteger:
	        case CypherParser.OctalInteger:
	        case CypherParser.HexLetter:
	        case CypherParser.ExponentDecimalReal:
	        case CypherParser.RegularDecimalReal:
	        case CypherParser.FOR:
	        case CypherParser.REQUIRE:
	        case CypherParser.MANDATORY:
	        case CypherParser.SCALAR:
	        case CypherParser.OF:
	        case CypherParser.ADD:
	        case CypherParser.UnescapedSymbolicName:
	        case CypherParser.EscapedSymbolicName:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 993;
	            this.oC_ReturnItem();
	            this.state = 1004;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 995;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 994;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 997;
	                    this.match(CypherParser.T__6);
	                    this.state = 999;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 998;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1001;
	                    this.oC_ReturnItem(); 
	                }
	                this.state = 1006;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ReturnItem() {
	    let localctx = new OC_ReturnItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CypherParser.RULE_oC_ReturnItem);
	    try {
	        this.state = 1016;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1009;
	            this.oC_Expression();
	            this.state = 1010;
	            this.match(CypherParser.SP);
	            this.state = 1011;
	            this.match(CypherParser.AS);
	            this.state = 1012;
	            this.match(CypherParser.SP);
	            this.state = 1013;
	            this.oC_Variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1015;
	            this.oC_Expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Order() {
	    let localctx = new OC_OrderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CypherParser.RULE_oC_Order);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1018;
	        this.match(CypherParser.ORDER);
	        this.state = 1019;
	        this.match(CypherParser.SP);
	        this.state = 1020;
	        this.match(CypherParser.BY);
	        this.state = 1021;
	        this.match(CypherParser.SP);
	        this.state = 1022;
	        this.oC_SortItem();
	        this.state = 1030;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CypherParser.T__6) {
	            this.state = 1023;
	            this.match(CypherParser.T__6);
	            this.state = 1025;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1024;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1027;
	            this.oC_SortItem();
	            this.state = 1032;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Skip() {
	    let localctx = new OC_SkipContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CypherParser.RULE_oC_Skip);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1033;
	        this.match(CypherParser.L_SKIP);
	        this.state = 1034;
	        this.match(CypherParser.SP);
	        this.state = 1035;
	        this.oC_Expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Limit() {
	    let localctx = new OC_LimitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CypherParser.RULE_oC_Limit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1037;
	        this.match(CypherParser.LIMIT);
	        this.state = 1038;
	        this.match(CypherParser.SP);
	        this.state = 1039;
	        this.oC_Expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SortItem() {
	    let localctx = new OC_SortItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CypherParser.RULE_oC_SortItem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1041;
	        this.oC_Expression();
	        this.state = 1046;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	        if(la_===1) {
	            this.state = 1043;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1042;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1045;
	            _la = this._input.LA(1);
	            if(!(((((_la - 90)) & ~0x1f) == 0 && ((1 << (_la - 90)) & ((1 << (CypherParser.ASCENDING - 90)) | (1 << (CypherParser.ASC - 90)) | (1 << (CypherParser.DESCENDING - 90)) | (1 << (CypherParser.DESC - 90)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Hint() {
	    let localctx = new OC_HintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, CypherParser.RULE_oC_Hint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1049;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1048;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1088;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1051;
	            this.match(CypherParser.USING);
	            this.state = 1052;
	            this.match(CypherParser.SP);
	            this.state = 1053;
	            this.match(CypherParser.INDEX);
	            this.state = 1054;
	            this.match(CypherParser.SP);
	            this.state = 1055;
	            this.oC_Variable();
	            this.state = 1056;
	            this.oC_NodeLabel();
	            this.state = 1057;
	            this.match(CypherParser.T__2);
	            this.state = 1058;
	            this.oC_PropertyKeyName();
	            this.state = 1059;
	            this.match(CypherParser.T__3);
	            break;

	        case 2:
	            this.state = 1061;
	            this.match(CypherParser.USING);
	            this.state = 1062;
	            this.match(CypherParser.SP);
	            this.state = 1063;
	            this.match(CypherParser.JOIN);
	            this.state = 1064;
	            this.match(CypherParser.SP);
	            this.state = 1065;
	            this.match(CypherParser.ON);
	            this.state = 1066;
	            this.match(CypherParser.SP);
	            this.state = 1067;
	            this.oC_Variable();
	            this.state = 1078;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,135,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1069;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1068;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1071;
	                    this.match(CypherParser.T__6);
	                    this.state = 1073;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1072;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1075;
	                    this.oC_Variable(); 
	                }
	                this.state = 1080;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,135,this._ctx);
	            }

	            break;

	        case 3:
	            this.state = 1081;
	            this.match(CypherParser.USING);
	            this.state = 1082;
	            this.match(CypherParser.SP);
	            this.state = 1083;
	            this.match(CypherParser.SCAN);
	            this.state = 1084;
	            this.match(CypherParser.SP);
	            this.state = 1085;
	            this.oC_Variable();
	            this.state = 1086;
	            this.oC_NodeLabel();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_IdentifiedIndexLookup() {
	    let localctx = new OC_IdentifiedIndexLookupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, CypherParser.RULE_oC_IdentifiedIndexLookup);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1090;
	        this.match(CypherParser.T__13);
	        this.state = 1091;
	        this.oC_SymbolicName();
	        this.state = 1092;
	        this.match(CypherParser.T__2);
	        this.state = 1093;
	        this.oC_SymbolicName();
	        this.state = 1094;
	        this.match(CypherParser.T__1);
	        this.state = 1097;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.StringLiteral:
	            this.state = 1095;
	            this.match(CypherParser.StringLiteral);
	            break;
	        case CypherParser.T__9:
	            this.state = 1096;
	            this.oC_LegacyParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1099;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_IndexQuery() {
	    let localctx = new OC_IndexQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CypherParser.RULE_oC_IndexQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1101;
	        this.match(CypherParser.T__13);
	        this.state = 1102;
	        this.oC_SymbolicName();
	        this.state = 1103;
	        this.match(CypherParser.T__2);
	        this.state = 1106;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.StringLiteral:
	            this.state = 1104;
	            this.match(CypherParser.StringLiteral);
	            break;
	        case CypherParser.T__9:
	            this.state = 1105;
	            this.oC_LegacyParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1108;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_IdLookup() {
	    let localctx = new OC_IdLookupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CypherParser.RULE_oC_IdLookup);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1110;
	        this.match(CypherParser.T__2);
	        this.state = 1114;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.HexInteger:
	        case CypherParser.DecimalInteger:
	        case CypherParser.OctalInteger:
	            this.state = 1111;
	            this.oC_LiteralIds();
	            break;
	        case CypherParser.T__9:
	            this.state = 1112;
	            this.oC_LegacyParameter();
	            break;
	        case CypherParser.T__12:
	            this.state = 1113;
	            this.match(CypherParser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1116;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_LiteralIds() {
	    let localctx = new OC_LiteralIdsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CypherParser.RULE_oC_LiteralIds);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1118;
	        this.oC_IntegerLiteral();
	        this.state = 1129;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CypherParser.T__6 || _la===CypherParser.SP) {
	            this.state = 1120;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1119;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1122;
	            this.match(CypherParser.T__6);
	            this.state = 1124;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1123;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1126;
	            this.oC_IntegerLiteral();
	            this.state = 1131;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Where() {
	    let localctx = new OC_WhereContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CypherParser.RULE_oC_Where);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1132;
	        this.match(CypherParser.WHERE);
	        this.state = 1133;
	        this.match(CypherParser.SP);
	        this.state = 1134;
	        this.oC_Expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Pattern() {
	    let localctx = new OC_PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CypherParser.RULE_oC_Pattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1136;
	        this.oC_PatternPart();
	        this.state = 1147;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,145,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1138;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1137;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1140;
	                this.match(CypherParser.T__6);
	                this.state = 1142;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1141;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1144;
	                this.oC_PatternPart(); 
	            }
	            this.state = 1149;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,145,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PatternPart() {
	    let localctx = new OC_PatternPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CypherParser.RULE_oC_PatternPart);
	    var _la = 0; // Token type
	    try {
	        this.state = 1161;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1150;
	            this.oC_Variable();
	            this.state = 1152;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1151;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1154;
	            this.match(CypherParser.T__1);
	            this.state = 1156;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1155;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1158;
	            this.oC_AnonymousPatternPart();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1160;
	            this.oC_AnonymousPatternPart();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_AnonymousPatternPart() {
	    let localctx = new OC_AnonymousPatternPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CypherParser.RULE_oC_AnonymousPatternPart);
	    try {
	        this.state = 1165;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.SHORTESTPATH:
	        case CypherParser.ALLSHORTESTPATHS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1163;
	            this.oC_ShortestPathPattern();
	            break;
	        case CypherParser.T__2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1164;
	            this.oC_PatternElement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ShortestPathPattern() {
	    let localctx = new OC_ShortestPathPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CypherParser.RULE_oC_ShortestPathPattern);
	    try {
	        this.state = 1177;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.SHORTESTPATH:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1167;
	            this.match(CypherParser.SHORTESTPATH);
	            this.state = 1168;
	            this.match(CypherParser.T__2);
	            this.state = 1169;
	            this.oC_PatternElement();
	            this.state = 1170;
	            this.match(CypherParser.T__3);
	            break;
	        case CypherParser.ALLSHORTESTPATHS:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1172;
	            this.match(CypherParser.ALLSHORTESTPATHS);
	            this.state = 1173;
	            this.match(CypherParser.T__2);
	            this.state = 1174;
	            this.oC_PatternElement();
	            this.state = 1175;
	            this.match(CypherParser.T__3);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PatternElement() {
	    let localctx = new OC_PatternElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CypherParser.RULE_oC_PatternElement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1193;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1179;
	            this.oC_NodePattern();
	            this.state = 1186;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,152,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1181;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1180;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1183;
	                    this.oC_PatternElementChain(); 
	                }
	                this.state = 1188;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,152,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1189;
	            this.match(CypherParser.T__2);
	            this.state = 1190;
	            this.oC_PatternElement();
	            this.state = 1191;
	            this.match(CypherParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodePattern() {
	    let localctx = new OC_NodePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CypherParser.RULE_oC_NodePattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1195;
	        this.match(CypherParser.T__2);
	        this.state = 1197;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1196;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1203;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CypherParser.CYPHER - 47)) | (1 << (CypherParser.EXPLAIN - 47)) | (1 << (CypherParser.PROFILE - 47)) | (1 << (CypherParser.USE - 47)) | (1 << (CypherParser.USING - 47)) | (1 << (CypherParser.PERIODIC - 47)) | (1 << (CypherParser.COMMIT - 47)) | (1 << (CypherParser.UNION - 47)) | (1 << (CypherParser.ALL - 47)) | (1 << (CypherParser.CREATE - 47)) | (1 << (CypherParser.DROP - 47)) | (1 << (CypherParser.INDEX - 47)) | (1 << (CypherParser.ON - 47)) | (1 << (CypherParser.CONSTRAINT - 47)) | (1 << (CypherParser.ASSERT - 47)) | (1 << (CypherParser.IS - 47)) | (1 << (CypherParser.UNIQUE - 47)) | (1 << (CypherParser.EXISTS - 47)) | (1 << (CypherParser.LOAD - 47)) | (1 << (CypherParser.CSV - 47)) | (1 << (CypherParser.WITH - 47)) | (1 << (CypherParser.HEADERS - 47)) | (1 << (CypherParser.FROM - 47)) | (1 << (CypherParser.AS - 47)) | (1 << (CypherParser.FIELDTERMINATOR - 47)) | (1 << (CypherParser.OPTIONAL - 47)) | (1 << (CypherParser.MATCH - 47)) | (1 << (CypherParser.UNWIND - 47)) | (1 << (CypherParser.MERGE - 47)) | (1 << (CypherParser.SET - 47)) | (1 << (CypherParser.DETACH - 47)) | (1 << (CypherParser.DELETE - 47)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (CypherParser.REMOVE - 79)) | (1 << (CypherParser.FOREACH - 79)) | (1 << (CypherParser.IN - 79)) | (1 << (CypherParser.CALL - 79)) | (1 << (CypherParser.YIELD - 79)) | (1 << (CypherParser.DISTINCT - 79)) | (1 << (CypherParser.RETURN - 79)) | (1 << (CypherParser.ORDER - 79)) | (1 << (CypherParser.BY - 79)) | (1 << (CypherParser.L_SKIP - 79)) | (1 << (CypherParser.LIMIT - 79)) | (1 << (CypherParser.ASCENDING - 79)) | (1 << (CypherParser.ASC - 79)) | (1 << (CypherParser.DESCENDING - 79)) | (1 << (CypherParser.DESC - 79)) | (1 << (CypherParser.JOIN - 79)) | (1 << (CypherParser.SCAN - 79)) | (1 << (CypherParser.START - 79)) | (1 << (CypherParser.NODE - 79)) | (1 << (CypherParser.WHERE - 79)) | (1 << (CypherParser.SHORTESTPATH - 79)) | (1 << (CypherParser.OR - 79)) | (1 << (CypherParser.XOR - 79)) | (1 << (CypherParser.AND - 79)) | (1 << (CypherParser.NOT - 79)) | (1 << (CypherParser.STARTS - 79)) | (1 << (CypherParser.ENDS - 79)) | (1 << (CypherParser.CONTAINS - 79)) | (1 << (CypherParser.NULL - 79)) | (1 << (CypherParser.COUNT - 79)) | (1 << (CypherParser.FILTER - 79)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CypherParser.EXTRACT - 111)) | (1 << (CypherParser.ANY - 111)) | (1 << (CypherParser.NONE - 111)) | (1 << (CypherParser.SINGLE - 111)) | (1 << (CypherParser.TRUE - 111)) | (1 << (CypherParser.FALSE - 111)) | (1 << (CypherParser.REDUCE - 111)) | (1 << (CypherParser.CASE - 111)) | (1 << (CypherParser.ELSE - 111)) | (1 << (CypherParser.END - 111)) | (1 << (CypherParser.WHEN - 111)) | (1 << (CypherParser.THEN - 111)) | (1 << (CypherParser.HexLetter - 111)) | (1 << (CypherParser.FOR - 111)) | (1 << (CypherParser.REQUIRE - 111)) | (1 << (CypherParser.MANDATORY - 111)) | (1 << (CypherParser.SCALAR - 111)) | (1 << (CypherParser.OF - 111)) | (1 << (CypherParser.ADD - 111)))) !== 0) || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName) {
	            this.state = 1199;
	            this.oC_Variable();
	            this.state = 1201;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1200;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1209;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__13) {
	            this.state = 1205;
	            this.oC_NodeLabels();
	            this.state = 1207;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1206;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1215;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__9 || _la===CypherParser.T__26) {
	            this.state = 1211;
	            this.oC_Properties();
	            this.state = 1213;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1212;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1217;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PatternElementChain() {
	    let localctx = new OC_PatternElementChainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CypherParser.RULE_oC_PatternElementChain);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1219;
	        this.oC_RelationshipPattern();
	        this.state = 1221;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1220;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1223;
	        this.oC_NodePattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipPattern() {
	    let localctx = new OC_RelationshipPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CypherParser.RULE_oC_RelationshipPattern);
	    var _la = 0; // Token type
	    try {
	        this.state = 1289;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1225;
	            this.oC_LeftArrowHead();
	            this.state = 1227;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1226;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1229;
	            this.oC_Dash();
	            this.state = 1231;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
	            if(la_===1) {
	                this.state = 1230;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1234;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.T__4) {
	                this.state = 1233;
	                this.oC_RelationshipDetail();
	            }

	            this.state = 1237;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1236;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1239;
	            this.oC_Dash();
	            this.state = 1241;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1240;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1243;
	            this.oC_RightArrowHead();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1245;
	            this.oC_LeftArrowHead();
	            this.state = 1247;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1246;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1249;
	            this.oC_Dash();
	            this.state = 1251;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	            if(la_===1) {
	                this.state = 1250;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1254;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.T__4) {
	                this.state = 1253;
	                this.oC_RelationshipDetail();
	            }

	            this.state = 1257;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1256;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1259;
	            this.oC_Dash();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1261;
	            this.oC_Dash();
	            this.state = 1263;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
	            if(la_===1) {
	                this.state = 1262;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1266;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.T__4) {
	                this.state = 1265;
	                this.oC_RelationshipDetail();
	            }

	            this.state = 1269;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1268;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1271;
	            this.oC_Dash();
	            this.state = 1273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1272;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1275;
	            this.oC_RightArrowHead();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1277;
	            this.oC_Dash();
	            this.state = 1279;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
	            if(la_===1) {
	                this.state = 1278;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1282;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.T__4) {
	                this.state = 1281;
	                this.oC_RelationshipDetail();
	            }

	            this.state = 1285;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1284;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1287;
	            this.oC_Dash();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipDetail() {
	    let localctx = new OC_RelationshipDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CypherParser.RULE_oC_RelationshipDetail);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1291;
	        this.match(CypherParser.T__4);
	        this.state = 1293;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1292;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1299;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CypherParser.CYPHER - 47)) | (1 << (CypherParser.EXPLAIN - 47)) | (1 << (CypherParser.PROFILE - 47)) | (1 << (CypherParser.USE - 47)) | (1 << (CypherParser.USING - 47)) | (1 << (CypherParser.PERIODIC - 47)) | (1 << (CypherParser.COMMIT - 47)) | (1 << (CypherParser.UNION - 47)) | (1 << (CypherParser.ALL - 47)) | (1 << (CypherParser.CREATE - 47)) | (1 << (CypherParser.DROP - 47)) | (1 << (CypherParser.INDEX - 47)) | (1 << (CypherParser.ON - 47)) | (1 << (CypherParser.CONSTRAINT - 47)) | (1 << (CypherParser.ASSERT - 47)) | (1 << (CypherParser.IS - 47)) | (1 << (CypherParser.UNIQUE - 47)) | (1 << (CypherParser.EXISTS - 47)) | (1 << (CypherParser.LOAD - 47)) | (1 << (CypherParser.CSV - 47)) | (1 << (CypherParser.WITH - 47)) | (1 << (CypherParser.HEADERS - 47)) | (1 << (CypherParser.FROM - 47)) | (1 << (CypherParser.AS - 47)) | (1 << (CypherParser.FIELDTERMINATOR - 47)) | (1 << (CypherParser.OPTIONAL - 47)) | (1 << (CypherParser.MATCH - 47)) | (1 << (CypherParser.UNWIND - 47)) | (1 << (CypherParser.MERGE - 47)) | (1 << (CypherParser.SET - 47)) | (1 << (CypherParser.DETACH - 47)) | (1 << (CypherParser.DELETE - 47)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (CypherParser.REMOVE - 79)) | (1 << (CypherParser.FOREACH - 79)) | (1 << (CypherParser.IN - 79)) | (1 << (CypherParser.CALL - 79)) | (1 << (CypherParser.YIELD - 79)) | (1 << (CypherParser.DISTINCT - 79)) | (1 << (CypherParser.RETURN - 79)) | (1 << (CypherParser.ORDER - 79)) | (1 << (CypherParser.BY - 79)) | (1 << (CypherParser.L_SKIP - 79)) | (1 << (CypherParser.LIMIT - 79)) | (1 << (CypherParser.ASCENDING - 79)) | (1 << (CypherParser.ASC - 79)) | (1 << (CypherParser.DESCENDING - 79)) | (1 << (CypherParser.DESC - 79)) | (1 << (CypherParser.JOIN - 79)) | (1 << (CypherParser.SCAN - 79)) | (1 << (CypherParser.START - 79)) | (1 << (CypherParser.NODE - 79)) | (1 << (CypherParser.WHERE - 79)) | (1 << (CypherParser.SHORTESTPATH - 79)) | (1 << (CypherParser.OR - 79)) | (1 << (CypherParser.XOR - 79)) | (1 << (CypherParser.AND - 79)) | (1 << (CypherParser.NOT - 79)) | (1 << (CypherParser.STARTS - 79)) | (1 << (CypherParser.ENDS - 79)) | (1 << (CypherParser.CONTAINS - 79)) | (1 << (CypherParser.NULL - 79)) | (1 << (CypherParser.COUNT - 79)) | (1 << (CypherParser.FILTER - 79)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CypherParser.EXTRACT - 111)) | (1 << (CypherParser.ANY - 111)) | (1 << (CypherParser.NONE - 111)) | (1 << (CypherParser.SINGLE - 111)) | (1 << (CypherParser.TRUE - 111)) | (1 << (CypherParser.FALSE - 111)) | (1 << (CypherParser.REDUCE - 111)) | (1 << (CypherParser.CASE - 111)) | (1 << (CypherParser.ELSE - 111)) | (1 << (CypherParser.END - 111)) | (1 << (CypherParser.WHEN - 111)) | (1 << (CypherParser.THEN - 111)) | (1 << (CypherParser.HexLetter - 111)) | (1 << (CypherParser.FOR - 111)) | (1 << (CypherParser.REQUIRE - 111)) | (1 << (CypherParser.MANDATORY - 111)) | (1 << (CypherParser.SCALAR - 111)) | (1 << (CypherParser.OF - 111)) | (1 << (CypherParser.ADD - 111)))) !== 0) || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName) {
	            this.state = 1295;
	            this.oC_Variable();
	            this.state = 1297;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1296;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1305;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__13) {
	            this.state = 1301;
	            this.oC_RelationshipTypes();
	            this.state = 1303;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1302;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1308;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__12) {
	            this.state = 1307;
	            this.oC_RangeLiteral();
	        }

	        this.state = 1314;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__9 || _la===CypherParser.T__26) {
	            this.state = 1310;
	            this.oC_Properties();
	            this.state = 1312;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1311;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1316;
	        this.match(CypherParser.T__5);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Properties() {
	    let localctx = new OC_PropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CypherParser.RULE_oC_Properties);
	    try {
	        this.state = 1321;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1318;
	            this.oC_MapLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1319;
	            this.oC_Parameter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1320;
	            this.oC_LegacyParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelType() {
	    let localctx = new OC_RelTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CypherParser.RULE_oC_RelType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1323;
	        this.match(CypherParser.T__13);
	        this.state = 1325;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1324;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1327;
	        this.oC_RelTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipTypes() {
	    let localctx = new OC_RelationshipTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CypherParser.RULE_oC_RelationshipTypes);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1329;
	        this.match(CypherParser.T__13);
	        this.state = 1331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1330;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1333;
	        this.oC_RelTypeName();
	        this.state = 1347;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,193,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1335;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1334;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1337;
	                this.match(CypherParser.T__8);
	                this.state = 1339;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.T__13) {
	                    this.state = 1338;
	                    this.match(CypherParser.T__13);
	                }

	                this.state = 1342;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1341;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1344;
	                this.oC_RelTypeName(); 
	            }
	            this.state = 1349;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,193,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodeLabels() {
	    let localctx = new OC_NodeLabelsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CypherParser.RULE_oC_NodeLabels);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1350;
	        this.oC_NodeLabel();
	        this.state = 1357;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,195,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1352;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1351;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1354;
	                this.oC_NodeLabel(); 
	            }
	            this.state = 1359;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,195,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodeLabel() {
	    let localctx = new OC_NodeLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CypherParser.RULE_oC_NodeLabel);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1360;
	        this.match(CypherParser.T__13);
	        this.state = 1362;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1361;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1364;
	        this.oC_LabelName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RangeLiteral() {
	    let localctx = new OC_RangeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CypherParser.RULE_oC_RangeLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1366;
	        this.match(CypherParser.T__12);
	        this.state = 1368;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1367;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1374;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (CypherParser.HexInteger - 125)) | (1 << (CypherParser.DecimalInteger - 125)) | (1 << (CypherParser.OctalInteger - 125)))) !== 0)) {
	            this.state = 1370;
	            this.oC_IntegerLiteral();
	            this.state = 1372;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1371;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1386;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__14) {
	            this.state = 1376;
	            this.match(CypherParser.T__14);
	            this.state = 1378;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1377;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1384;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (CypherParser.HexInteger - 125)) | (1 << (CypherParser.DecimalInteger - 125)) | (1 << (CypherParser.OctalInteger - 125)))) !== 0)) {
	                this.state = 1380;
	                this.oC_IntegerLiteral();
	                this.state = 1382;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1381;
	                    this.match(CypherParser.SP);
	                }

	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_LabelName() {
	    let localctx = new OC_LabelNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CypherParser.RULE_oC_LabelName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1388;
	        this.oC_SchemaName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelTypeName() {
	    let localctx = new OC_RelTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CypherParser.RULE_oC_RelTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1390;
	        this.oC_SchemaName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Expression() {
	    let localctx = new OC_ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, CypherParser.RULE_oC_Expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1392;
	        this.oC_OrExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_OrExpression() {
	    let localctx = new OC_OrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, CypherParser.RULE_oC_OrExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1394;
	        this.oC_XorExpression();
	        this.state = 1401;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,204,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1395;
	                this.match(CypherParser.SP);
	                this.state = 1396;
	                this.match(CypherParser.OR);
	                this.state = 1397;
	                this.match(CypherParser.SP);
	                this.state = 1398;
	                this.oC_XorExpression(); 
	            }
	            this.state = 1403;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,204,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_XorExpression() {
	    let localctx = new OC_XorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, CypherParser.RULE_oC_XorExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1404;
	        this.oC_AndExpression();
	        this.state = 1411;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,205,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1405;
	                this.match(CypherParser.SP);
	                this.state = 1406;
	                this.match(CypherParser.XOR);
	                this.state = 1407;
	                this.match(CypherParser.SP);
	                this.state = 1408;
	                this.oC_AndExpression(); 
	            }
	            this.state = 1413;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,205,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_AndExpression() {
	    let localctx = new OC_AndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, CypherParser.RULE_oC_AndExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1414;
	        this.oC_NotExpression();
	        this.state = 1421;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,206,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1415;
	                this.match(CypherParser.SP);
	                this.state = 1416;
	                this.match(CypherParser.AND);
	                this.state = 1417;
	                this.match(CypherParser.SP);
	                this.state = 1418;
	                this.oC_NotExpression(); 
	            }
	            this.state = 1423;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,206,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NotExpression() {
	    let localctx = new OC_NotExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, CypherParser.RULE_oC_NotExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1430;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,208,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1424;
	                this.match(CypherParser.NOT);
	                this.state = 1426;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1425;
	                    this.match(CypherParser.SP);
	                }
	         
	            }
	            this.state = 1432;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,208,this._ctx);
	        }

	        this.state = 1433;
	        this.oC_ComparisonExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ComparisonExpression() {
	    let localctx = new OC_ComparisonExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, CypherParser.RULE_oC_ComparisonExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1435;
	        this.oC_AddOrSubtractExpression();
	        this.state = 1442;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,210,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1437;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1436;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1439;
	                this.oC_PartialComparisonExpression(); 
	            }
	            this.state = 1444;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,210,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_AddOrSubtractExpression() {
	    let localctx = new OC_AddOrSubtractExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, CypherParser.RULE_oC_AddOrSubtractExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1445;
	        this.oC_MultiplyDivideModuloExpression();
	        this.state = 1464;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,216,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1462;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1447;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1446;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1449;
	                    this.match(CypherParser.T__15);
	                    this.state = 1451;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1450;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1453;
	                    this.oC_MultiplyDivideModuloExpression();
	                    break;

	                case 2:
	                    this.state = 1455;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1454;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1457;
	                    this.match(CypherParser.T__11);
	                    this.state = 1459;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1458;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1461;
	                    this.oC_MultiplyDivideModuloExpression();
	                    break;

	                } 
	            }
	            this.state = 1466;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,216,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_MultiplyDivideModuloExpression() {
	    let localctx = new OC_MultiplyDivideModuloExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, CypherParser.RULE_oC_MultiplyDivideModuloExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1467;
	        this.oC_PowerOfExpression();
	        this.state = 1494;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,224,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1492;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1469;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1468;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1471;
	                    this.match(CypherParser.T__12);
	                    this.state = 1473;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1472;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1475;
	                    this.oC_PowerOfExpression();
	                    break;

	                case 2:
	                    this.state = 1477;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1476;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1479;
	                    this.match(CypherParser.T__16);
	                    this.state = 1481;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1480;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1483;
	                    this.oC_PowerOfExpression();
	                    break;

	                case 3:
	                    this.state = 1485;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1484;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1487;
	                    this.match(CypherParser.T__17);
	                    this.state = 1489;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1488;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1491;
	                    this.oC_PowerOfExpression();
	                    break;

	                } 
	            }
	            this.state = 1496;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,224,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PowerOfExpression() {
	    let localctx = new OC_PowerOfExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, CypherParser.RULE_oC_PowerOfExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1497;
	        this.oC_UnaryAddOrSubtractExpression();
	        this.state = 1508;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,227,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1499;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1498;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1501;
	                this.match(CypherParser.T__18);
	                this.state = 1503;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1502;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1505;
	                this.oC_UnaryAddOrSubtractExpression(); 
	            }
	            this.state = 1510;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,227,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_UnaryAddOrSubtractExpression() {
	    let localctx = new OC_UnaryAddOrSubtractExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, CypherParser.RULE_oC_UnaryAddOrSubtractExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1517;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CypherParser.T__11 || _la===CypherParser.T__15) {
	            this.state = 1511;
	            _la = this._input.LA(1);
	            if(!(_la===CypherParser.T__11 || _la===CypherParser.T__15)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1513;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1512;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1519;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1520;
	        this.oC_StringListNullOperatorExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_StringListNullOperatorExpression() {
	    let localctx = new OC_StringListNullOperatorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, CypherParser.RULE_oC_StringListNullOperatorExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1522;
	        this.oC_PropertyOrLabelsExpression();
	        this.state = 1573;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,237,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1571;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1524;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1523;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1526;
	                    this.match(CypherParser.T__4);
	                    this.state = 1527;
	                    this.oC_Expression();
	                    this.state = 1528;
	                    this.match(CypherParser.T__5);
	                    break;

	                case 2:
	                    this.state = 1531;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1530;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1533;
	                    this.match(CypherParser.T__4);
	                    this.state = 1535;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__9) | (1 << CypherParser.T__11) | (1 << CypherParser.T__15) | (1 << CypherParser.T__26))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CypherParser.CYPHER - 47)) | (1 << (CypherParser.EXPLAIN - 47)) | (1 << (CypherParser.PROFILE - 47)) | (1 << (CypherParser.USE - 47)) | (1 << (CypherParser.USING - 47)) | (1 << (CypherParser.PERIODIC - 47)) | (1 << (CypherParser.COMMIT - 47)) | (1 << (CypherParser.UNION - 47)) | (1 << (CypherParser.ALL - 47)) | (1 << (CypherParser.CREATE - 47)) | (1 << (CypherParser.DROP - 47)) | (1 << (CypherParser.INDEX - 47)) | (1 << (CypherParser.ON - 47)) | (1 << (CypherParser.CONSTRAINT - 47)) | (1 << (CypherParser.ASSERT - 47)) | (1 << (CypherParser.IS - 47)) | (1 << (CypherParser.UNIQUE - 47)) | (1 << (CypherParser.EXISTS - 47)) | (1 << (CypherParser.LOAD - 47)) | (1 << (CypherParser.CSV - 47)) | (1 << (CypherParser.WITH - 47)) | (1 << (CypherParser.HEADERS - 47)) | (1 << (CypherParser.FROM - 47)) | (1 << (CypherParser.AS - 47)) | (1 << (CypherParser.FIELDTERMINATOR - 47)) | (1 << (CypherParser.OPTIONAL - 47)) | (1 << (CypherParser.MATCH - 47)) | (1 << (CypherParser.UNWIND - 47)) | (1 << (CypherParser.MERGE - 47)) | (1 << (CypherParser.SET - 47)) | (1 << (CypherParser.DETACH - 47)) | (1 << (CypherParser.DELETE - 47)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (CypherParser.REMOVE - 79)) | (1 << (CypherParser.FOREACH - 79)) | (1 << (CypherParser.IN - 79)) | (1 << (CypherParser.CALL - 79)) | (1 << (CypherParser.YIELD - 79)) | (1 << (CypherParser.DISTINCT - 79)) | (1 << (CypherParser.RETURN - 79)) | (1 << (CypherParser.ORDER - 79)) | (1 << (CypherParser.BY - 79)) | (1 << (CypherParser.L_SKIP - 79)) | (1 << (CypherParser.LIMIT - 79)) | (1 << (CypherParser.ASCENDING - 79)) | (1 << (CypherParser.ASC - 79)) | (1 << (CypherParser.DESCENDING - 79)) | (1 << (CypherParser.DESC - 79)) | (1 << (CypherParser.JOIN - 79)) | (1 << (CypherParser.SCAN - 79)) | (1 << (CypherParser.START - 79)) | (1 << (CypherParser.NODE - 79)) | (1 << (CypherParser.WHERE - 79)) | (1 << (CypherParser.SHORTESTPATH - 79)) | (1 << (CypherParser.ALLSHORTESTPATHS - 79)) | (1 << (CypherParser.OR - 79)) | (1 << (CypherParser.XOR - 79)) | (1 << (CypherParser.AND - 79)) | (1 << (CypherParser.NOT - 79)) | (1 << (CypherParser.STARTS - 79)) | (1 << (CypherParser.ENDS - 79)) | (1 << (CypherParser.CONTAINS - 79)) | (1 << (CypherParser.NULL - 79)) | (1 << (CypherParser.COUNT - 79)) | (1 << (CypherParser.FILTER - 79)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CypherParser.EXTRACT - 111)) | (1 << (CypherParser.ANY - 111)) | (1 << (CypherParser.NONE - 111)) | (1 << (CypherParser.SINGLE - 111)) | (1 << (CypherParser.TRUE - 111)) | (1 << (CypherParser.FALSE - 111)) | (1 << (CypherParser.REDUCE - 111)) | (1 << (CypherParser.CASE - 111)) | (1 << (CypherParser.ELSE - 111)) | (1 << (CypherParser.END - 111)) | (1 << (CypherParser.WHEN - 111)) | (1 << (CypherParser.THEN - 111)) | (1 << (CypherParser.StringLiteral - 111)) | (1 << (CypherParser.HexInteger - 111)) | (1 << (CypherParser.DecimalInteger - 111)) | (1 << (CypherParser.OctalInteger - 111)) | (1 << (CypherParser.HexLetter - 111)) | (1 << (CypherParser.ExponentDecimalReal - 111)) | (1 << (CypherParser.RegularDecimalReal - 111)) | (1 << (CypherParser.FOR - 111)) | (1 << (CypherParser.REQUIRE - 111)) | (1 << (CypherParser.MANDATORY - 111)) | (1 << (CypherParser.SCALAR - 111)) | (1 << (CypherParser.OF - 111)) | (1 << (CypherParser.ADD - 111)))) !== 0) || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName) {
	                        this.state = 1534;
	                        this.oC_Expression();
	                    }

	                    this.state = 1537;
	                    this.match(CypherParser.T__14);
	                    this.state = 1539;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__9) | (1 << CypherParser.T__11) | (1 << CypherParser.T__15) | (1 << CypherParser.T__26))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CypherParser.CYPHER - 47)) | (1 << (CypherParser.EXPLAIN - 47)) | (1 << (CypherParser.PROFILE - 47)) | (1 << (CypherParser.USE - 47)) | (1 << (CypherParser.USING - 47)) | (1 << (CypherParser.PERIODIC - 47)) | (1 << (CypherParser.COMMIT - 47)) | (1 << (CypherParser.UNION - 47)) | (1 << (CypherParser.ALL - 47)) | (1 << (CypherParser.CREATE - 47)) | (1 << (CypherParser.DROP - 47)) | (1 << (CypherParser.INDEX - 47)) | (1 << (CypherParser.ON - 47)) | (1 << (CypherParser.CONSTRAINT - 47)) | (1 << (CypherParser.ASSERT - 47)) | (1 << (CypherParser.IS - 47)) | (1 << (CypherParser.UNIQUE - 47)) | (1 << (CypherParser.EXISTS - 47)) | (1 << (CypherParser.LOAD - 47)) | (1 << (CypherParser.CSV - 47)) | (1 << (CypherParser.WITH - 47)) | (1 << (CypherParser.HEADERS - 47)) | (1 << (CypherParser.FROM - 47)) | (1 << (CypherParser.AS - 47)) | (1 << (CypherParser.FIELDTERMINATOR - 47)) | (1 << (CypherParser.OPTIONAL - 47)) | (1 << (CypherParser.MATCH - 47)) | (1 << (CypherParser.UNWIND - 47)) | (1 << (CypherParser.MERGE - 47)) | (1 << (CypherParser.SET - 47)) | (1 << (CypherParser.DETACH - 47)) | (1 << (CypherParser.DELETE - 47)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (CypherParser.REMOVE - 79)) | (1 << (CypherParser.FOREACH - 79)) | (1 << (CypherParser.IN - 79)) | (1 << (CypherParser.CALL - 79)) | (1 << (CypherParser.YIELD - 79)) | (1 << (CypherParser.DISTINCT - 79)) | (1 << (CypherParser.RETURN - 79)) | (1 << (CypherParser.ORDER - 79)) | (1 << (CypherParser.BY - 79)) | (1 << (CypherParser.L_SKIP - 79)) | (1 << (CypherParser.LIMIT - 79)) | (1 << (CypherParser.ASCENDING - 79)) | (1 << (CypherParser.ASC - 79)) | (1 << (CypherParser.DESCENDING - 79)) | (1 << (CypherParser.DESC - 79)) | (1 << (CypherParser.JOIN - 79)) | (1 << (CypherParser.SCAN - 79)) | (1 << (CypherParser.START - 79)) | (1 << (CypherParser.NODE - 79)) | (1 << (CypherParser.WHERE - 79)) | (1 << (CypherParser.SHORTESTPATH - 79)) | (1 << (CypherParser.ALLSHORTESTPATHS - 79)) | (1 << (CypherParser.OR - 79)) | (1 << (CypherParser.XOR - 79)) | (1 << (CypherParser.AND - 79)) | (1 << (CypherParser.NOT - 79)) | (1 << (CypherParser.STARTS - 79)) | (1 << (CypherParser.ENDS - 79)) | (1 << (CypherParser.CONTAINS - 79)) | (1 << (CypherParser.NULL - 79)) | (1 << (CypherParser.COUNT - 79)) | (1 << (CypherParser.FILTER - 79)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CypherParser.EXTRACT - 111)) | (1 << (CypherParser.ANY - 111)) | (1 << (CypherParser.NONE - 111)) | (1 << (CypherParser.SINGLE - 111)) | (1 << (CypherParser.TRUE - 111)) | (1 << (CypherParser.FALSE - 111)) | (1 << (CypherParser.REDUCE - 111)) | (1 << (CypherParser.CASE - 111)) | (1 << (CypherParser.ELSE - 111)) | (1 << (CypherParser.END - 111)) | (1 << (CypherParser.WHEN - 111)) | (1 << (CypherParser.THEN - 111)) | (1 << (CypherParser.StringLiteral - 111)) | (1 << (CypherParser.HexInteger - 111)) | (1 << (CypherParser.DecimalInteger - 111)) | (1 << (CypherParser.OctalInteger - 111)) | (1 << (CypherParser.HexLetter - 111)) | (1 << (CypherParser.ExponentDecimalReal - 111)) | (1 << (CypherParser.RegularDecimalReal - 111)) | (1 << (CypherParser.FOR - 111)) | (1 << (CypherParser.REQUIRE - 111)) | (1 << (CypherParser.MANDATORY - 111)) | (1 << (CypherParser.SCALAR - 111)) | (1 << (CypherParser.OF - 111)) | (1 << (CypherParser.ADD - 111)))) !== 0) || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName) {
	                        this.state = 1538;
	                        this.oC_Expression();
	                    }

	                    this.state = 1541;
	                    this.match(CypherParser.T__5);
	                    break;

	                case 3:
	                    this.state = 1555;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1542;
	                        this.oC_RegularExpression();
	                        break;

	                    case 2:
	                        this.state = 1543;
	                        this.match(CypherParser.SP);
	                        this.state = 1544;
	                        this.match(CypherParser.IN);
	                        break;

	                    case 3:
	                        this.state = 1545;
	                        this.match(CypherParser.SP);
	                        this.state = 1546;
	                        this.match(CypherParser.STARTS);
	                        this.state = 1547;
	                        this.match(CypherParser.SP);
	                        this.state = 1548;
	                        this.match(CypherParser.WITH);
	                        break;

	                    case 4:
	                        this.state = 1549;
	                        this.match(CypherParser.SP);
	                        this.state = 1550;
	                        this.match(CypherParser.ENDS);
	                        this.state = 1551;
	                        this.match(CypherParser.SP);
	                        this.state = 1552;
	                        this.match(CypherParser.WITH);
	                        break;

	                    case 5:
	                        this.state = 1553;
	                        this.match(CypherParser.SP);
	                        this.state = 1554;
	                        this.match(CypherParser.CONTAINS);
	                        break;

	                    }
	                    this.state = 1558;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1557;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1560;
	                    this.oC_PropertyOrLabelsExpression();
	                    break;

	                case 4:
	                    this.state = 1561;
	                    this.match(CypherParser.SP);
	                    this.state = 1562;
	                    this.match(CypherParser.IS);
	                    this.state = 1563;
	                    this.match(CypherParser.SP);
	                    this.state = 1564;
	                    this.match(CypherParser.NULL);
	                    break;

	                case 5:
	                    this.state = 1565;
	                    this.match(CypherParser.SP);
	                    this.state = 1566;
	                    this.match(CypherParser.IS);
	                    this.state = 1567;
	                    this.match(CypherParser.SP);
	                    this.state = 1568;
	                    this.match(CypherParser.NOT);
	                    this.state = 1569;
	                    this.match(CypherParser.SP);
	                    this.state = 1570;
	                    this.match(CypherParser.NULL);
	                    break;

	                } 
	            }
	            this.state = 1575;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,237,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RegularExpression() {
	    let localctx = new OC_RegularExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, CypherParser.RULE_oC_RegularExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1577;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1576;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1579;
	        this.match(CypherParser.T__19);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PropertyOrLabelsExpression() {
	    let localctx = new OC_PropertyOrLabelsExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, CypherParser.RULE_oC_PropertyOrLabelsExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1581;
	        this.oC_Atom();
	        this.state = 1588;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,240,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1583;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1582;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1585;
	                this.oC_PropertyLookup(); 
	            }
	            this.state = 1590;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,240,this._ctx);
	        }

	        this.state = 1595;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
	        if(la_===1) {
	            this.state = 1592;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1591;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1594;
	            this.oC_NodeLabels();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Atom() {
	    let localctx = new OC_AtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, CypherParser.RULE_oC_Atom);
	    var _la = 0; // Token type
	    try {
	        this.state = 1720;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1597;
	            this.oC_Literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1598;
	            this.oC_Parameter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1599;
	            this.oC_LegacyParameter();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1600;
	            this.oC_CaseExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1601;
	            this.match(CypherParser.COUNT);
	            this.state = 1603;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1602;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1605;
	            this.match(CypherParser.T__2);
	            this.state = 1607;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1606;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1609;
	            this.match(CypherParser.T__12);
	            this.state = 1611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1610;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1613;
	            this.match(CypherParser.T__3);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1614;
	            this.oC_ListComprehension();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1615;
	            this.oC_PatternComprehension();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1616;
	            this.match(CypherParser.FILTER);
	            this.state = 1618;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1617;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1620;
	            this.match(CypherParser.T__2);
	            this.state = 1622;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1621;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1624;
	            this.oC_FilterExpression();
	            this.state = 1626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1625;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1628;
	            this.match(CypherParser.T__3);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1630;
	            this.match(CypherParser.EXTRACT);
	            this.state = 1632;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1631;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1634;
	            this.match(CypherParser.T__2);
	            this.state = 1636;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1635;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1638;
	            this.oC_FilterExpression();
	            this.state = 1640;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
	            if(la_===1) {
	                this.state = 1639;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1650;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	            if(la_===1) {
	                this.state = 1643;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1642;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1645;
	                this.match(CypherParser.T__8);
	                this.state = 1647;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1646;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1649;
	                this.oC_Expression();

	            }
	            this.state = 1653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1652;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1655;
	            this.match(CypherParser.T__3);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1657;
	            this.oC_Reduce();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1658;
	            this.match(CypherParser.ALL);
	            this.state = 1660;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1659;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1662;
	            this.match(CypherParser.T__2);
	            this.state = 1664;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1663;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1666;
	            this.oC_FilterExpression();
	            this.state = 1668;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1667;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1670;
	            this.match(CypherParser.T__3);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1672;
	            this.match(CypherParser.ANY);
	            this.state = 1674;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1673;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1676;
	            this.match(CypherParser.T__2);
	            this.state = 1678;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1677;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1680;
	            this.oC_FilterExpression();
	            this.state = 1682;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1681;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1684;
	            this.match(CypherParser.T__3);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1686;
	            this.match(CypherParser.NONE);
	            this.state = 1688;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1687;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1690;
	            this.match(CypherParser.T__2);
	            this.state = 1692;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1691;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1694;
	            this.oC_FilterExpression();
	            this.state = 1696;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1695;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1698;
	            this.match(CypherParser.T__3);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1700;
	            this.match(CypherParser.SINGLE);
	            this.state = 1702;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1701;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1704;
	            this.match(CypherParser.T__2);
	            this.state = 1706;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1705;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1708;
	            this.oC_FilterExpression();
	            this.state = 1710;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1709;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1712;
	            this.match(CypherParser.T__3);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1714;
	            this.oC_ShortestPathPattern();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1715;
	            this.oC_RelationshipsPattern();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1716;
	            this.oC_ParenthesizedExpression();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1717;
	            this.oC_FunctionInvocation();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1718;
	            this.oC_Variable();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1719;
	            this.oC_ExplicitProcedureInvocation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Literal() {
	    let localctx = new OC_LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, CypherParser.RULE_oC_Literal);
	    try {
	        this.state = 1728;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.HexInteger:
	        case CypherParser.DecimalInteger:
	        case CypherParser.OctalInteger:
	        case CypherParser.ExponentDecimalReal:
	        case CypherParser.RegularDecimalReal:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1722;
	            this.oC_NumberLiteral();
	            break;
	        case CypherParser.StringLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1723;
	            this.match(CypherParser.StringLiteral);
	            break;
	        case CypherParser.TRUE:
	        case CypherParser.FALSE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1724;
	            this.oC_BooleanLiteral();
	            break;
	        case CypherParser.NULL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1725;
	            this.match(CypherParser.NULL);
	            break;
	        case CypherParser.T__9:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1726;
	            this.oC_MapLiteral();
	            break;
	        case CypherParser.T__4:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1727;
	            this.oC_ListLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_BooleanLiteral() {
	    let localctx = new OC_BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, CypherParser.RULE_oC_BooleanLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1730;
	        _la = this._input.LA(1);
	        if(!(_la===CypherParser.TRUE || _la===CypherParser.FALSE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ListLiteral() {
	    let localctx = new OC_ListLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, CypherParser.RULE_oC_ListLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1732;
	        this.match(CypherParser.T__4);
	        this.state = 1734;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1733;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1753;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__9) | (1 << CypherParser.T__11) | (1 << CypherParser.T__15) | (1 << CypherParser.T__26))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CypherParser.CYPHER - 47)) | (1 << (CypherParser.EXPLAIN - 47)) | (1 << (CypherParser.PROFILE - 47)) | (1 << (CypherParser.USE - 47)) | (1 << (CypherParser.USING - 47)) | (1 << (CypherParser.PERIODIC - 47)) | (1 << (CypherParser.COMMIT - 47)) | (1 << (CypherParser.UNION - 47)) | (1 << (CypherParser.ALL - 47)) | (1 << (CypherParser.CREATE - 47)) | (1 << (CypherParser.DROP - 47)) | (1 << (CypherParser.INDEX - 47)) | (1 << (CypherParser.ON - 47)) | (1 << (CypherParser.CONSTRAINT - 47)) | (1 << (CypherParser.ASSERT - 47)) | (1 << (CypherParser.IS - 47)) | (1 << (CypherParser.UNIQUE - 47)) | (1 << (CypherParser.EXISTS - 47)) | (1 << (CypherParser.LOAD - 47)) | (1 << (CypherParser.CSV - 47)) | (1 << (CypherParser.WITH - 47)) | (1 << (CypherParser.HEADERS - 47)) | (1 << (CypherParser.FROM - 47)) | (1 << (CypherParser.AS - 47)) | (1 << (CypherParser.FIELDTERMINATOR - 47)) | (1 << (CypherParser.OPTIONAL - 47)) | (1 << (CypherParser.MATCH - 47)) | (1 << (CypherParser.UNWIND - 47)) | (1 << (CypherParser.MERGE - 47)) | (1 << (CypherParser.SET - 47)) | (1 << (CypherParser.DETACH - 47)) | (1 << (CypherParser.DELETE - 47)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (CypherParser.REMOVE - 79)) | (1 << (CypherParser.FOREACH - 79)) | (1 << (CypherParser.IN - 79)) | (1 << (CypherParser.CALL - 79)) | (1 << (CypherParser.YIELD - 79)) | (1 << (CypherParser.DISTINCT - 79)) | (1 << (CypherParser.RETURN - 79)) | (1 << (CypherParser.ORDER - 79)) | (1 << (CypherParser.BY - 79)) | (1 << (CypherParser.L_SKIP - 79)) | (1 << (CypherParser.LIMIT - 79)) | (1 << (CypherParser.ASCENDING - 79)) | (1 << (CypherParser.ASC - 79)) | (1 << (CypherParser.DESCENDING - 79)) | (1 << (CypherParser.DESC - 79)) | (1 << (CypherParser.JOIN - 79)) | (1 << (CypherParser.SCAN - 79)) | (1 << (CypherParser.START - 79)) | (1 << (CypherParser.NODE - 79)) | (1 << (CypherParser.WHERE - 79)) | (1 << (CypherParser.SHORTESTPATH - 79)) | (1 << (CypherParser.ALLSHORTESTPATHS - 79)) | (1 << (CypherParser.OR - 79)) | (1 << (CypherParser.XOR - 79)) | (1 << (CypherParser.AND - 79)) | (1 << (CypherParser.NOT - 79)) | (1 << (CypherParser.STARTS - 79)) | (1 << (CypherParser.ENDS - 79)) | (1 << (CypherParser.CONTAINS - 79)) | (1 << (CypherParser.NULL - 79)) | (1 << (CypherParser.COUNT - 79)) | (1 << (CypherParser.FILTER - 79)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CypherParser.EXTRACT - 111)) | (1 << (CypherParser.ANY - 111)) | (1 << (CypherParser.NONE - 111)) | (1 << (CypherParser.SINGLE - 111)) | (1 << (CypherParser.TRUE - 111)) | (1 << (CypherParser.FALSE - 111)) | (1 << (CypherParser.REDUCE - 111)) | (1 << (CypherParser.CASE - 111)) | (1 << (CypherParser.ELSE - 111)) | (1 << (CypherParser.END - 111)) | (1 << (CypherParser.WHEN - 111)) | (1 << (CypherParser.THEN - 111)) | (1 << (CypherParser.StringLiteral - 111)) | (1 << (CypherParser.HexInteger - 111)) | (1 << (CypherParser.DecimalInteger - 111)) | (1 << (CypherParser.OctalInteger - 111)) | (1 << (CypherParser.HexLetter - 111)) | (1 << (CypherParser.ExponentDecimalReal - 111)) | (1 << (CypherParser.RegularDecimalReal - 111)) | (1 << (CypherParser.FOR - 111)) | (1 << (CypherParser.REQUIRE - 111)) | (1 << (CypherParser.MANDATORY - 111)) | (1 << (CypherParser.SCALAR - 111)) | (1 << (CypherParser.OF - 111)) | (1 << (CypherParser.ADD - 111)))) !== 0) || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName) {
	            this.state = 1736;
	            this.oC_Expression();
	            this.state = 1738;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1737;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1750;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CypherParser.T__6) {
	                this.state = 1740;
	                this.match(CypherParser.T__6);
	                this.state = 1742;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1741;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1744;
	                this.oC_Expression();
	                this.state = 1746;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1745;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1752;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1755;
	        this.match(CypherParser.T__5);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Reduce() {
	    let localctx = new OC_ReduceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, CypherParser.RULE_oC_Reduce);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1757;
	        this.match(CypherParser.REDUCE);
	        this.state = 1759;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1758;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1761;
	        this.match(CypherParser.T__2);
	        this.state = 1763;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1762;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1765;
	        this.oC_Variable();
	        this.state = 1767;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1766;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1769;
	        this.match(CypherParser.T__1);
	        this.state = 1771;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1770;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1773;
	        this.oC_Expression();
	        this.state = 1775;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1774;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1777;
	        this.match(CypherParser.T__6);
	        this.state = 1779;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1778;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1781;
	        this.oC_IdInColl();
	        this.state = 1783;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1782;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1785;
	        this.match(CypherParser.T__8);
	        this.state = 1787;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1786;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1789;
	        this.oC_Expression();
	        this.state = 1791;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1790;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1793;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PartialComparisonExpression() {
	    let localctx = new OC_PartialComparisonExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, CypherParser.RULE_oC_PartialComparisonExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 1825;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.T__1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1795;
	            this.match(CypherParser.T__1);
	            this.state = 1797;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1796;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1799;
	            this.oC_AddOrSubtractExpression();
	            break;
	        case CypherParser.T__20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1800;
	            this.match(CypherParser.T__20);
	            this.state = 1802;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1801;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1804;
	            this.oC_AddOrSubtractExpression();
	            break;
	        case CypherParser.T__21:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1805;
	            this.match(CypherParser.T__21);
	            this.state = 1807;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1806;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1809;
	            this.oC_AddOrSubtractExpression();
	            break;
	        case CypherParser.T__22:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1810;
	            this.match(CypherParser.T__22);
	            this.state = 1812;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1811;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1814;
	            this.oC_AddOrSubtractExpression();
	            break;
	        case CypherParser.T__23:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1815;
	            this.match(CypherParser.T__23);
	            this.state = 1817;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1816;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1819;
	            this.oC_AddOrSubtractExpression();
	            break;
	        case CypherParser.T__24:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1820;
	            this.match(CypherParser.T__24);
	            this.state = 1822;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1821;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1824;
	            this.oC_AddOrSubtractExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ParenthesizedExpression() {
	    let localctx = new OC_ParenthesizedExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, CypherParser.RULE_oC_ParenthesizedExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1827;
	        this.match(CypherParser.T__2);
	        this.state = 1829;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1828;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1831;
	        this.oC_Expression();
	        this.state = 1833;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1832;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1835;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipsPattern() {
	    let localctx = new OC_RelationshipsPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, CypherParser.RULE_oC_RelationshipsPattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1837;
	        this.oC_NodePattern();
	        this.state = 1842; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1839;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		if(_la===CypherParser.SP) {
	        		    this.state = 1838;
	        		    this.match(CypherParser.SP);
	        		}

	        		this.state = 1841;
	        		this.oC_PatternElementChain();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1844; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,295, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_FilterExpression() {
	    let localctx = new OC_FilterExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, CypherParser.RULE_oC_FilterExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1846;
	        this.oC_IdInColl();
	        this.state = 1851;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
	        if(la_===1) {
	            this.state = 1848;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1847;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1850;
	            this.oC_Where();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_IdInColl() {
	    let localctx = new OC_IdInCollContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, CypherParser.RULE_oC_IdInColl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1853;
	        this.oC_Variable();
	        this.state = 1854;
	        this.match(CypherParser.SP);
	        this.state = 1855;
	        this.match(CypherParser.IN);
	        this.state = 1856;
	        this.match(CypherParser.SP);
	        this.state = 1857;
	        this.oC_Expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_FunctionInvocation() {
	    let localctx = new OC_FunctionInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, CypherParser.RULE_oC_FunctionInvocation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1859;
	        this.oC_FunctionName();
	        this.state = 1861;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1860;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1863;
	        this.match(CypherParser.T__2);
	        this.state = 1865;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1864;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1871;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,301,this._ctx);
	        if(la_===1) {
	            this.state = 1867;
	            this.match(CypherParser.DISTINCT);
	            this.state = 1869;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1868;
	                this.match(CypherParser.SP);
	            }


	        }
	        this.state = 1890;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__9) | (1 << CypherParser.T__11) | (1 << CypherParser.T__15) | (1 << CypherParser.T__26))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CypherParser.CYPHER - 47)) | (1 << (CypherParser.EXPLAIN - 47)) | (1 << (CypherParser.PROFILE - 47)) | (1 << (CypherParser.USE - 47)) | (1 << (CypherParser.USING - 47)) | (1 << (CypherParser.PERIODIC - 47)) | (1 << (CypherParser.COMMIT - 47)) | (1 << (CypherParser.UNION - 47)) | (1 << (CypherParser.ALL - 47)) | (1 << (CypherParser.CREATE - 47)) | (1 << (CypherParser.DROP - 47)) | (1 << (CypherParser.INDEX - 47)) | (1 << (CypherParser.ON - 47)) | (1 << (CypherParser.CONSTRAINT - 47)) | (1 << (CypherParser.ASSERT - 47)) | (1 << (CypherParser.IS - 47)) | (1 << (CypherParser.UNIQUE - 47)) | (1 << (CypherParser.EXISTS - 47)) | (1 << (CypherParser.LOAD - 47)) | (1 << (CypherParser.CSV - 47)) | (1 << (CypherParser.WITH - 47)) | (1 << (CypherParser.HEADERS - 47)) | (1 << (CypherParser.FROM - 47)) | (1 << (CypherParser.AS - 47)) | (1 << (CypherParser.FIELDTERMINATOR - 47)) | (1 << (CypherParser.OPTIONAL - 47)) | (1 << (CypherParser.MATCH - 47)) | (1 << (CypherParser.UNWIND - 47)) | (1 << (CypherParser.MERGE - 47)) | (1 << (CypherParser.SET - 47)) | (1 << (CypherParser.DETACH - 47)) | (1 << (CypherParser.DELETE - 47)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (CypherParser.REMOVE - 79)) | (1 << (CypherParser.FOREACH - 79)) | (1 << (CypherParser.IN - 79)) | (1 << (CypherParser.CALL - 79)) | (1 << (CypherParser.YIELD - 79)) | (1 << (CypherParser.DISTINCT - 79)) | (1 << (CypherParser.RETURN - 79)) | (1 << (CypherParser.ORDER - 79)) | (1 << (CypherParser.BY - 79)) | (1 << (CypherParser.L_SKIP - 79)) | (1 << (CypherParser.LIMIT - 79)) | (1 << (CypherParser.ASCENDING - 79)) | (1 << (CypherParser.ASC - 79)) | (1 << (CypherParser.DESCENDING - 79)) | (1 << (CypherParser.DESC - 79)) | (1 << (CypherParser.JOIN - 79)) | (1 << (CypherParser.SCAN - 79)) | (1 << (CypherParser.START - 79)) | (1 << (CypherParser.NODE - 79)) | (1 << (CypherParser.WHERE - 79)) | (1 << (CypherParser.SHORTESTPATH - 79)) | (1 << (CypherParser.ALLSHORTESTPATHS - 79)) | (1 << (CypherParser.OR - 79)) | (1 << (CypherParser.XOR - 79)) | (1 << (CypherParser.AND - 79)) | (1 << (CypherParser.NOT - 79)) | (1 << (CypherParser.STARTS - 79)) | (1 << (CypherParser.ENDS - 79)) | (1 << (CypherParser.CONTAINS - 79)) | (1 << (CypherParser.NULL - 79)) | (1 << (CypherParser.COUNT - 79)) | (1 << (CypherParser.FILTER - 79)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CypherParser.EXTRACT - 111)) | (1 << (CypherParser.ANY - 111)) | (1 << (CypherParser.NONE - 111)) | (1 << (CypherParser.SINGLE - 111)) | (1 << (CypherParser.TRUE - 111)) | (1 << (CypherParser.FALSE - 111)) | (1 << (CypherParser.REDUCE - 111)) | (1 << (CypherParser.CASE - 111)) | (1 << (CypherParser.ELSE - 111)) | (1 << (CypherParser.END - 111)) | (1 << (CypherParser.WHEN - 111)) | (1 << (CypherParser.THEN - 111)) | (1 << (CypherParser.StringLiteral - 111)) | (1 << (CypherParser.HexInteger - 111)) | (1 << (CypherParser.DecimalInteger - 111)) | (1 << (CypherParser.OctalInteger - 111)) | (1 << (CypherParser.HexLetter - 111)) | (1 << (CypherParser.ExponentDecimalReal - 111)) | (1 << (CypherParser.RegularDecimalReal - 111)) | (1 << (CypherParser.FOR - 111)) | (1 << (CypherParser.REQUIRE - 111)) | (1 << (CypherParser.MANDATORY - 111)) | (1 << (CypherParser.SCALAR - 111)) | (1 << (CypherParser.OF - 111)) | (1 << (CypherParser.ADD - 111)))) !== 0) || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName) {
	            this.state = 1873;
	            this.oC_Expression();
	            this.state = 1875;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1874;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1887;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CypherParser.T__6) {
	                this.state = 1877;
	                this.match(CypherParser.T__6);
	                this.state = 1879;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1878;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1881;
	                this.oC_Expression();
	                this.state = 1883;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1882;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1889;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1892;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_FunctionName() {
	    let localctx = new OC_FunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, CypherParser.RULE_oC_FunctionName);
	    try {
	        this.state = 1896;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1894;
	            this.oC_ProcedureName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1895;
	            this.match(CypherParser.EXISTS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ExplicitProcedureInvocation() {
	    let localctx = new OC_ExplicitProcedureInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, CypherParser.RULE_oC_ExplicitProcedureInvocation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1898;
	        this.oC_ProcedureName();
	        this.state = 1900;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1899;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1902;
	        this.match(CypherParser.T__2);
	        this.state = 1904;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1903;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1923;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__9) | (1 << CypherParser.T__11) | (1 << CypherParser.T__15) | (1 << CypherParser.T__26))) !== 0) || ((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CypherParser.CYPHER - 47)) | (1 << (CypherParser.EXPLAIN - 47)) | (1 << (CypherParser.PROFILE - 47)) | (1 << (CypherParser.USE - 47)) | (1 << (CypherParser.USING - 47)) | (1 << (CypherParser.PERIODIC - 47)) | (1 << (CypherParser.COMMIT - 47)) | (1 << (CypherParser.UNION - 47)) | (1 << (CypherParser.ALL - 47)) | (1 << (CypherParser.CREATE - 47)) | (1 << (CypherParser.DROP - 47)) | (1 << (CypherParser.INDEX - 47)) | (1 << (CypherParser.ON - 47)) | (1 << (CypherParser.CONSTRAINT - 47)) | (1 << (CypherParser.ASSERT - 47)) | (1 << (CypherParser.IS - 47)) | (1 << (CypherParser.UNIQUE - 47)) | (1 << (CypherParser.EXISTS - 47)) | (1 << (CypherParser.LOAD - 47)) | (1 << (CypherParser.CSV - 47)) | (1 << (CypherParser.WITH - 47)) | (1 << (CypherParser.HEADERS - 47)) | (1 << (CypherParser.FROM - 47)) | (1 << (CypherParser.AS - 47)) | (1 << (CypherParser.FIELDTERMINATOR - 47)) | (1 << (CypherParser.OPTIONAL - 47)) | (1 << (CypherParser.MATCH - 47)) | (1 << (CypherParser.UNWIND - 47)) | (1 << (CypherParser.MERGE - 47)) | (1 << (CypherParser.SET - 47)) | (1 << (CypherParser.DETACH - 47)) | (1 << (CypherParser.DELETE - 47)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (CypherParser.REMOVE - 79)) | (1 << (CypherParser.FOREACH - 79)) | (1 << (CypherParser.IN - 79)) | (1 << (CypherParser.CALL - 79)) | (1 << (CypherParser.YIELD - 79)) | (1 << (CypherParser.DISTINCT - 79)) | (1 << (CypherParser.RETURN - 79)) | (1 << (CypherParser.ORDER - 79)) | (1 << (CypherParser.BY - 79)) | (1 << (CypherParser.L_SKIP - 79)) | (1 << (CypherParser.LIMIT - 79)) | (1 << (CypherParser.ASCENDING - 79)) | (1 << (CypherParser.ASC - 79)) | (1 << (CypherParser.DESCENDING - 79)) | (1 << (CypherParser.DESC - 79)) | (1 << (CypherParser.JOIN - 79)) | (1 << (CypherParser.SCAN - 79)) | (1 << (CypherParser.START - 79)) | (1 << (CypherParser.NODE - 79)) | (1 << (CypherParser.WHERE - 79)) | (1 << (CypherParser.SHORTESTPATH - 79)) | (1 << (CypherParser.ALLSHORTESTPATHS - 79)) | (1 << (CypherParser.OR - 79)) | (1 << (CypherParser.XOR - 79)) | (1 << (CypherParser.AND - 79)) | (1 << (CypherParser.NOT - 79)) | (1 << (CypherParser.STARTS - 79)) | (1 << (CypherParser.ENDS - 79)) | (1 << (CypherParser.CONTAINS - 79)) | (1 << (CypherParser.NULL - 79)) | (1 << (CypherParser.COUNT - 79)) | (1 << (CypherParser.FILTER - 79)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CypherParser.EXTRACT - 111)) | (1 << (CypherParser.ANY - 111)) | (1 << (CypherParser.NONE - 111)) | (1 << (CypherParser.SINGLE - 111)) | (1 << (CypherParser.TRUE - 111)) | (1 << (CypherParser.FALSE - 111)) | (1 << (CypherParser.REDUCE - 111)) | (1 << (CypherParser.CASE - 111)) | (1 << (CypherParser.ELSE - 111)) | (1 << (CypherParser.END - 111)) | (1 << (CypherParser.WHEN - 111)) | (1 << (CypherParser.THEN - 111)) | (1 << (CypherParser.StringLiteral - 111)) | (1 << (CypherParser.HexInteger - 111)) | (1 << (CypherParser.DecimalInteger - 111)) | (1 << (CypherParser.OctalInteger - 111)) | (1 << (CypherParser.HexLetter - 111)) | (1 << (CypherParser.ExponentDecimalReal - 111)) | (1 << (CypherParser.RegularDecimalReal - 111)) | (1 << (CypherParser.FOR - 111)) | (1 << (CypherParser.REQUIRE - 111)) | (1 << (CypherParser.MANDATORY - 111)) | (1 << (CypherParser.SCALAR - 111)) | (1 << (CypherParser.OF - 111)) | (1 << (CypherParser.ADD - 111)))) !== 0) || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName) {
	            this.state = 1906;
	            this.oC_Expression();
	            this.state = 1908;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1907;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1920;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CypherParser.T__6) {
	                this.state = 1910;
	                this.match(CypherParser.T__6);
	                this.state = 1912;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1911;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1914;
	                this.oC_Expression();
	                this.state = 1916;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1915;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1922;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1925;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ImplicitProcedureInvocation() {
	    let localctx = new OC_ImplicitProcedureInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, CypherParser.RULE_oC_ImplicitProcedureInvocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1927;
	        this.oC_ProcedureName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ProcedureResultField() {
	    let localctx = new OC_ProcedureResultFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, CypherParser.RULE_oC_ProcedureResultField);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1929;
	        this.oC_SymbolicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ProcedureName() {
	    let localctx = new OC_ProcedureNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, CypherParser.RULE_oC_ProcedureName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1931;
	        this.oC_Namespace();
	        this.state = 1932;
	        this.oC_SymbolicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Namespace() {
	    let localctx = new OC_NamespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, CypherParser.RULE_oC_Namespace);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1939;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,315,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1934;
	                this.oC_SymbolicName();
	                this.state = 1935;
	                this.match(CypherParser.T__25); 
	            }
	            this.state = 1941;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,315,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ListComprehension() {
	    let localctx = new OC_ListComprehensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, CypherParser.RULE_oC_ListComprehension);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1942;
	        this.match(CypherParser.T__4);
	        this.state = 1944;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1943;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1946;
	        this.oC_FilterExpression();
	        this.state = 1955;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,319,this._ctx);
	        if(la_===1) {
	            this.state = 1948;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1947;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1950;
	            this.match(CypherParser.T__8);
	            this.state = 1952;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1951;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1954;
	            this.oC_Expression();

	        }
	        this.state = 1958;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1957;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1960;
	        this.match(CypherParser.T__5);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PatternComprehension() {
	    let localctx = new OC_PatternComprehensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, CypherParser.RULE_oC_PatternComprehension);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1962;
	        this.match(CypherParser.T__4);
	        this.state = 1964;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1963;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1974;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CypherParser.CYPHER - 47)) | (1 << (CypherParser.EXPLAIN - 47)) | (1 << (CypherParser.PROFILE - 47)) | (1 << (CypherParser.USE - 47)) | (1 << (CypherParser.USING - 47)) | (1 << (CypherParser.PERIODIC - 47)) | (1 << (CypherParser.COMMIT - 47)) | (1 << (CypherParser.UNION - 47)) | (1 << (CypherParser.ALL - 47)) | (1 << (CypherParser.CREATE - 47)) | (1 << (CypherParser.DROP - 47)) | (1 << (CypherParser.INDEX - 47)) | (1 << (CypherParser.ON - 47)) | (1 << (CypherParser.CONSTRAINT - 47)) | (1 << (CypherParser.ASSERT - 47)) | (1 << (CypherParser.IS - 47)) | (1 << (CypherParser.UNIQUE - 47)) | (1 << (CypherParser.EXISTS - 47)) | (1 << (CypherParser.LOAD - 47)) | (1 << (CypherParser.CSV - 47)) | (1 << (CypherParser.WITH - 47)) | (1 << (CypherParser.HEADERS - 47)) | (1 << (CypherParser.FROM - 47)) | (1 << (CypherParser.AS - 47)) | (1 << (CypherParser.FIELDTERMINATOR - 47)) | (1 << (CypherParser.OPTIONAL - 47)) | (1 << (CypherParser.MATCH - 47)) | (1 << (CypherParser.UNWIND - 47)) | (1 << (CypherParser.MERGE - 47)) | (1 << (CypherParser.SET - 47)) | (1 << (CypherParser.DETACH - 47)) | (1 << (CypherParser.DELETE - 47)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (CypherParser.REMOVE - 79)) | (1 << (CypherParser.FOREACH - 79)) | (1 << (CypherParser.IN - 79)) | (1 << (CypherParser.CALL - 79)) | (1 << (CypherParser.YIELD - 79)) | (1 << (CypherParser.DISTINCT - 79)) | (1 << (CypherParser.RETURN - 79)) | (1 << (CypherParser.ORDER - 79)) | (1 << (CypherParser.BY - 79)) | (1 << (CypherParser.L_SKIP - 79)) | (1 << (CypherParser.LIMIT - 79)) | (1 << (CypherParser.ASCENDING - 79)) | (1 << (CypherParser.ASC - 79)) | (1 << (CypherParser.DESCENDING - 79)) | (1 << (CypherParser.DESC - 79)) | (1 << (CypherParser.JOIN - 79)) | (1 << (CypherParser.SCAN - 79)) | (1 << (CypherParser.START - 79)) | (1 << (CypherParser.NODE - 79)) | (1 << (CypherParser.WHERE - 79)) | (1 << (CypherParser.SHORTESTPATH - 79)) | (1 << (CypherParser.OR - 79)) | (1 << (CypherParser.XOR - 79)) | (1 << (CypherParser.AND - 79)) | (1 << (CypherParser.NOT - 79)) | (1 << (CypherParser.STARTS - 79)) | (1 << (CypherParser.ENDS - 79)) | (1 << (CypherParser.CONTAINS - 79)) | (1 << (CypherParser.NULL - 79)) | (1 << (CypherParser.COUNT - 79)) | (1 << (CypherParser.FILTER - 79)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CypherParser.EXTRACT - 111)) | (1 << (CypherParser.ANY - 111)) | (1 << (CypherParser.NONE - 111)) | (1 << (CypherParser.SINGLE - 111)) | (1 << (CypherParser.TRUE - 111)) | (1 << (CypherParser.FALSE - 111)) | (1 << (CypherParser.REDUCE - 111)) | (1 << (CypherParser.CASE - 111)) | (1 << (CypherParser.ELSE - 111)) | (1 << (CypherParser.END - 111)) | (1 << (CypherParser.WHEN - 111)) | (1 << (CypherParser.THEN - 111)) | (1 << (CypherParser.HexLetter - 111)) | (1 << (CypherParser.FOR - 111)) | (1 << (CypherParser.REQUIRE - 111)) | (1 << (CypherParser.MANDATORY - 111)) | (1 << (CypherParser.SCALAR - 111)) | (1 << (CypherParser.OF - 111)) | (1 << (CypherParser.ADD - 111)))) !== 0) || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName) {
	            this.state = 1966;
	            this.oC_Variable();
	            this.state = 1968;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1967;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1970;
	            this.match(CypherParser.T__1);
	            this.state = 1972;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1971;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1976;
	        this.oC_RelationshipsPattern();
	        this.state = 1978;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1977;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1988;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.WHERE) {
	            this.state = 1980;
	            this.match(CypherParser.WHERE);
	            this.state = 1982;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1981;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1984;
	            this.oC_Expression();
	            this.state = 1986;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1985;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1990;
	        this.match(CypherParser.T__8);
	        this.state = 1992;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1991;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1994;
	        this.oC_Expression();
	        this.state = 1996;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1995;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1998;
	        this.match(CypherParser.T__5);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PropertyLookup() {
	    let localctx = new OC_PropertyLookupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, CypherParser.RULE_oC_PropertyLookup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2000;
	        this.match(CypherParser.T__25);
	        this.state = 2002;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2001;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2004;
	        this.oC_PropertyKeyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CaseExpression() {
	    let localctx = new OC_CaseExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, CypherParser.RULE_oC_CaseExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2028;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,337,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2006;
	            this.match(CypherParser.CASE);
	            this.state = 2011; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2008;
	            		this._errHandler.sync(this);
	            		_la = this._input.LA(1);
	            		if(_la===CypherParser.SP) {
	            		    this.state = 2007;
	            		    this.match(CypherParser.SP);
	            		}

	            		this.state = 2010;
	            		this.oC_CaseAlternatives();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2013; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,333, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.state = 2015;
	            this.match(CypherParser.CASE);
	            this.state = 2017;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2016;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2019;
	            this.oC_Expression();
	            this.state = 2024; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2021;
	            		this._errHandler.sync(this);
	            		_la = this._input.LA(1);
	            		if(_la===CypherParser.SP) {
	            		    this.state = 2020;
	            		    this.match(CypherParser.SP);
	            		}

	            		this.state = 2023;
	            		this.oC_CaseAlternatives();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2026; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,336, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	        this.state = 2038;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,340,this._ctx);
	        if(la_===1) {
	            this.state = 2031;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2030;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2033;
	            this.match(CypherParser.ELSE);
	            this.state = 2035;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2034;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2037;
	            this.oC_Expression();

	        }
	        this.state = 2041;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2040;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2043;
	        this.match(CypherParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CaseAlternatives() {
	    let localctx = new OC_CaseAlternativesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, CypherParser.RULE_oC_CaseAlternatives);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2045;
	        this.match(CypherParser.WHEN);
	        this.state = 2047;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2046;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2049;
	        this.oC_Expression();
	        this.state = 2051;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2050;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2053;
	        this.match(CypherParser.THEN);
	        this.state = 2055;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2054;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2057;
	        this.oC_Expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Variable() {
	    let localctx = new OC_VariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, CypherParser.RULE_oC_Variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2059;
	        this.oC_SymbolicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NumberLiteral() {
	    let localctx = new OC_NumberLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, CypherParser.RULE_oC_NumberLiteral);
	    try {
	        this.state = 2063;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.ExponentDecimalReal:
	        case CypherParser.RegularDecimalReal:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2061;
	            this.oC_DoubleLiteral();
	            break;
	        case CypherParser.HexInteger:
	        case CypherParser.DecimalInteger:
	        case CypherParser.OctalInteger:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2062;
	            this.oC_IntegerLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_MapLiteral() {
	    let localctx = new OC_MapLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, CypherParser.RULE_oC_MapLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2065;
	        this.match(CypherParser.T__9);
	        this.state = 2067;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2066;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2102;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (CypherParser.CYPHER - 47)) | (1 << (CypherParser.EXPLAIN - 47)) | (1 << (CypherParser.PROFILE - 47)) | (1 << (CypherParser.USE - 47)) | (1 << (CypherParser.USING - 47)) | (1 << (CypherParser.PERIODIC - 47)) | (1 << (CypherParser.COMMIT - 47)) | (1 << (CypherParser.UNION - 47)) | (1 << (CypherParser.ALL - 47)) | (1 << (CypherParser.CREATE - 47)) | (1 << (CypherParser.DROP - 47)) | (1 << (CypherParser.INDEX - 47)) | (1 << (CypherParser.ON - 47)) | (1 << (CypherParser.CONSTRAINT - 47)) | (1 << (CypherParser.ASSERT - 47)) | (1 << (CypherParser.IS - 47)) | (1 << (CypherParser.UNIQUE - 47)) | (1 << (CypherParser.EXISTS - 47)) | (1 << (CypherParser.LOAD - 47)) | (1 << (CypherParser.CSV - 47)) | (1 << (CypherParser.WITH - 47)) | (1 << (CypherParser.HEADERS - 47)) | (1 << (CypherParser.FROM - 47)) | (1 << (CypherParser.AS - 47)) | (1 << (CypherParser.FIELDTERMINATOR - 47)) | (1 << (CypherParser.OPTIONAL - 47)) | (1 << (CypherParser.MATCH - 47)) | (1 << (CypherParser.UNWIND - 47)) | (1 << (CypherParser.MERGE - 47)) | (1 << (CypherParser.SET - 47)) | (1 << (CypherParser.DETACH - 47)) | (1 << (CypherParser.DELETE - 47)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (CypherParser.REMOVE - 79)) | (1 << (CypherParser.FOREACH - 79)) | (1 << (CypherParser.IN - 79)) | (1 << (CypherParser.CALL - 79)) | (1 << (CypherParser.YIELD - 79)) | (1 << (CypherParser.DISTINCT - 79)) | (1 << (CypherParser.RETURN - 79)) | (1 << (CypherParser.ORDER - 79)) | (1 << (CypherParser.BY - 79)) | (1 << (CypherParser.L_SKIP - 79)) | (1 << (CypherParser.LIMIT - 79)) | (1 << (CypherParser.ASCENDING - 79)) | (1 << (CypherParser.ASC - 79)) | (1 << (CypherParser.DESCENDING - 79)) | (1 << (CypherParser.DESC - 79)) | (1 << (CypherParser.JOIN - 79)) | (1 << (CypherParser.SCAN - 79)) | (1 << (CypherParser.START - 79)) | (1 << (CypherParser.NODE - 79)) | (1 << (CypherParser.WHERE - 79)) | (1 << (CypherParser.SHORTESTPATH - 79)) | (1 << (CypherParser.OR - 79)) | (1 << (CypherParser.XOR - 79)) | (1 << (CypherParser.AND - 79)) | (1 << (CypherParser.NOT - 79)) | (1 << (CypherParser.STARTS - 79)) | (1 << (CypherParser.ENDS - 79)) | (1 << (CypherParser.CONTAINS - 79)) | (1 << (CypherParser.NULL - 79)) | (1 << (CypherParser.COUNT - 79)) | (1 << (CypherParser.FILTER - 79)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (CypherParser.EXTRACT - 111)) | (1 << (CypherParser.ANY - 111)) | (1 << (CypherParser.NONE - 111)) | (1 << (CypherParser.SINGLE - 111)) | (1 << (CypherParser.TRUE - 111)) | (1 << (CypherParser.FALSE - 111)) | (1 << (CypherParser.REDUCE - 111)) | (1 << (CypherParser.CASE - 111)) | (1 << (CypherParser.ELSE - 111)) | (1 << (CypherParser.END - 111)) | (1 << (CypherParser.WHEN - 111)) | (1 << (CypherParser.THEN - 111)) | (1 << (CypherParser.HexLetter - 111)) | (1 << (CypherParser.FOR - 111)) | (1 << (CypherParser.REQUIRE - 111)) | (1 << (CypherParser.MANDATORY - 111)) | (1 << (CypherParser.SCALAR - 111)) | (1 << (CypherParser.OF - 111)) | (1 << (CypherParser.ADD - 111)))) !== 0) || _la===CypherParser.UnescapedSymbolicName || _la===CypherParser.EscapedSymbolicName) {
	            this.state = 2069;
	            this.oC_PropertyKeyName();
	            this.state = 2071;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2070;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2073;
	            this.match(CypherParser.T__13);
	            this.state = 2075;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2074;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2077;
	            this.oC_Expression();
	            this.state = 2079;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2078;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2099;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CypherParser.T__6) {
	                this.state = 2081;
	                this.match(CypherParser.T__6);
	                this.state = 2083;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2082;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2085;
	                this.oC_PropertyKeyName();
	                this.state = 2087;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2086;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2089;
	                this.match(CypherParser.T__13);
	                this.state = 2091;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2090;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2093;
	                this.oC_Expression();
	                this.state = 2095;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2094;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2101;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2104;
	        this.match(CypherParser.T__10);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_LegacyParameter() {
	    let localctx = new OC_LegacyParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, CypherParser.RULE_oC_LegacyParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2106;
	        this.match(CypherParser.T__9);
	        this.state = 2108;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2107;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2112;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.CYPHER:
	        case CypherParser.EXPLAIN:
	        case CypherParser.PROFILE:
	        case CypherParser.USE:
	        case CypherParser.USING:
	        case CypherParser.PERIODIC:
	        case CypherParser.COMMIT:
	        case CypherParser.UNION:
	        case CypherParser.ALL:
	        case CypherParser.CREATE:
	        case CypherParser.DROP:
	        case CypherParser.INDEX:
	        case CypherParser.ON:
	        case CypherParser.CONSTRAINT:
	        case CypherParser.ASSERT:
	        case CypherParser.IS:
	        case CypherParser.UNIQUE:
	        case CypherParser.EXISTS:
	        case CypherParser.LOAD:
	        case CypherParser.CSV:
	        case CypherParser.WITH:
	        case CypherParser.HEADERS:
	        case CypherParser.FROM:
	        case CypherParser.AS:
	        case CypherParser.FIELDTERMINATOR:
	        case CypherParser.OPTIONAL:
	        case CypherParser.MATCH:
	        case CypherParser.UNWIND:
	        case CypherParser.MERGE:
	        case CypherParser.SET:
	        case CypherParser.DETACH:
	        case CypherParser.DELETE:
	        case CypherParser.REMOVE:
	        case CypherParser.FOREACH:
	        case CypherParser.IN:
	        case CypherParser.CALL:
	        case CypherParser.YIELD:
	        case CypherParser.DISTINCT:
	        case CypherParser.RETURN:
	        case CypherParser.ORDER:
	        case CypherParser.BY:
	        case CypherParser.L_SKIP:
	        case CypherParser.LIMIT:
	        case CypherParser.ASCENDING:
	        case CypherParser.ASC:
	        case CypherParser.DESCENDING:
	        case CypherParser.DESC:
	        case CypherParser.JOIN:
	        case CypherParser.SCAN:
	        case CypherParser.START:
	        case CypherParser.NODE:
	        case CypherParser.WHERE:
	        case CypherParser.SHORTESTPATH:
	        case CypherParser.OR:
	        case CypherParser.XOR:
	        case CypherParser.AND:
	        case CypherParser.NOT:
	        case CypherParser.STARTS:
	        case CypherParser.ENDS:
	        case CypherParser.CONTAINS:
	        case CypherParser.NULL:
	        case CypherParser.COUNT:
	        case CypherParser.FILTER:
	        case CypherParser.EXTRACT:
	        case CypherParser.ANY:
	        case CypherParser.NONE:
	        case CypherParser.SINGLE:
	        case CypherParser.TRUE:
	        case CypherParser.FALSE:
	        case CypherParser.REDUCE:
	        case CypherParser.CASE:
	        case CypherParser.ELSE:
	        case CypherParser.END:
	        case CypherParser.WHEN:
	        case CypherParser.THEN:
	        case CypherParser.HexLetter:
	        case CypherParser.FOR:
	        case CypherParser.REQUIRE:
	        case CypherParser.MANDATORY:
	        case CypherParser.SCALAR:
	        case CypherParser.OF:
	        case CypherParser.ADD:
	        case CypherParser.UnescapedSymbolicName:
	        case CypherParser.EscapedSymbolicName:
	            this.state = 2110;
	            this.oC_SymbolicName();
	            break;
	        case CypherParser.DecimalInteger:
	            this.state = 2111;
	            this.match(CypherParser.DecimalInteger);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2115;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2114;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2117;
	        this.match(CypherParser.T__10);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Parameter() {
	    let localctx = new OC_ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, CypherParser.RULE_oC_Parameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2119;
	        this.match(CypherParser.T__26);
	        this.state = 2122;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.CYPHER:
	        case CypherParser.EXPLAIN:
	        case CypherParser.PROFILE:
	        case CypherParser.USE:
	        case CypherParser.USING:
	        case CypherParser.PERIODIC:
	        case CypherParser.COMMIT:
	        case CypherParser.UNION:
	        case CypherParser.ALL:
	        case CypherParser.CREATE:
	        case CypherParser.DROP:
	        case CypherParser.INDEX:
	        case CypherParser.ON:
	        case CypherParser.CONSTRAINT:
	        case CypherParser.ASSERT:
	        case CypherParser.IS:
	        case CypherParser.UNIQUE:
	        case CypherParser.EXISTS:
	        case CypherParser.LOAD:
	        case CypherParser.CSV:
	        case CypherParser.WITH:
	        case CypherParser.HEADERS:
	        case CypherParser.FROM:
	        case CypherParser.AS:
	        case CypherParser.FIELDTERMINATOR:
	        case CypherParser.OPTIONAL:
	        case CypherParser.MATCH:
	        case CypherParser.UNWIND:
	        case CypherParser.MERGE:
	        case CypherParser.SET:
	        case CypherParser.DETACH:
	        case CypherParser.DELETE:
	        case CypherParser.REMOVE:
	        case CypherParser.FOREACH:
	        case CypherParser.IN:
	        case CypherParser.CALL:
	        case CypherParser.YIELD:
	        case CypherParser.DISTINCT:
	        case CypherParser.RETURN:
	        case CypherParser.ORDER:
	        case CypherParser.BY:
	        case CypherParser.L_SKIP:
	        case CypherParser.LIMIT:
	        case CypherParser.ASCENDING:
	        case CypherParser.ASC:
	        case CypherParser.DESCENDING:
	        case CypherParser.DESC:
	        case CypherParser.JOIN:
	        case CypherParser.SCAN:
	        case CypherParser.START:
	        case CypherParser.NODE:
	        case CypherParser.WHERE:
	        case CypherParser.SHORTESTPATH:
	        case CypherParser.OR:
	        case CypherParser.XOR:
	        case CypherParser.AND:
	        case CypherParser.NOT:
	        case CypherParser.STARTS:
	        case CypherParser.ENDS:
	        case CypherParser.CONTAINS:
	        case CypherParser.NULL:
	        case CypherParser.COUNT:
	        case CypherParser.FILTER:
	        case CypherParser.EXTRACT:
	        case CypherParser.ANY:
	        case CypherParser.NONE:
	        case CypherParser.SINGLE:
	        case CypherParser.TRUE:
	        case CypherParser.FALSE:
	        case CypherParser.REDUCE:
	        case CypherParser.CASE:
	        case CypherParser.ELSE:
	        case CypherParser.END:
	        case CypherParser.WHEN:
	        case CypherParser.THEN:
	        case CypherParser.HexLetter:
	        case CypherParser.FOR:
	        case CypherParser.REQUIRE:
	        case CypherParser.MANDATORY:
	        case CypherParser.SCALAR:
	        case CypherParser.OF:
	        case CypherParser.ADD:
	        case CypherParser.UnescapedSymbolicName:
	        case CypherParser.EscapedSymbolicName:
	            this.state = 2120;
	            this.oC_SymbolicName();
	            break;
	        case CypherParser.DecimalInteger:
	            this.state = 2121;
	            this.match(CypherParser.DecimalInteger);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PropertyExpression() {
	    let localctx = new OC_PropertyExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, CypherParser.RULE_oC_PropertyExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2124;
	        this.oC_Atom();
	        this.state = 2129; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2126;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		if(_la===CypherParser.SP) {
	        		    this.state = 2125;
	        		    this.match(CypherParser.SP);
	        		}

	        		this.state = 2128;
	        		this.oC_PropertyLookup();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2131; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,361, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PropertyKeyName() {
	    let localctx = new OC_PropertyKeyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, CypherParser.RULE_oC_PropertyKeyName);
	    try {
	        this.state = 2139;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,362,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2133;
	            this.oC_SchemaName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2134;
	            this.oC_SchemaName();
	            this.state = 2135;
	            this.match(CypherParser.T__4);
	            this.state = 2136;
	            this.match(CypherParser.DecimalInteger);
	            this.state = 2137;
	            this.match(CypherParser.T__5);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_IntegerLiteral() {
	    let localctx = new OC_IntegerLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, CypherParser.RULE_oC_IntegerLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2141;
	        _la = this._input.LA(1);
	        if(!(((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (CypherParser.HexInteger - 125)) | (1 << (CypherParser.DecimalInteger - 125)) | (1 << (CypherParser.OctalInteger - 125)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_DoubleLiteral() {
	    let localctx = new OC_DoubleLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, CypherParser.RULE_oC_DoubleLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2143;
	        _la = this._input.LA(1);
	        if(!(_la===CypherParser.ExponentDecimalReal || _la===CypherParser.RegularDecimalReal)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SchemaName() {
	    let localctx = new OC_SchemaNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, CypherParser.RULE_oC_SchemaName);
	    try {
	        this.state = 2147;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,363,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2145;
	            this.oC_SymbolicName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2146;
	            this.oC_ReservedWord();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ReservedWord() {
	    let localctx = new OC_ReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, CypherParser.RULE_oC_ReservedWord);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2149;
	        _la = this._input.LA(1);
	        if(!(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (CypherParser.UNION - 54)) | (1 << (CypherParser.ALL - 54)) | (1 << (CypherParser.CREATE - 54)) | (1 << (CypherParser.DROP - 54)) | (1 << (CypherParser.ON - 54)) | (1 << (CypherParser.CONSTRAINT - 54)) | (1 << (CypherParser.IS - 54)) | (1 << (CypherParser.UNIQUE - 54)) | (1 << (CypherParser.EXISTS - 54)) | (1 << (CypherParser.WITH - 54)) | (1 << (CypherParser.AS - 54)) | (1 << (CypherParser.OPTIONAL - 54)) | (1 << (CypherParser.MATCH - 54)) | (1 << (CypherParser.UNWIND - 54)) | (1 << (CypherParser.MERGE - 54)) | (1 << (CypherParser.SET - 54)) | (1 << (CypherParser.DETACH - 54)) | (1 << (CypherParser.DELETE - 54)) | (1 << (CypherParser.REMOVE - 54)) | (1 << (CypherParser.IN - 54)) | (1 << (CypherParser.DISTINCT - 54)) | (1 << (CypherParser.RETURN - 54)))) !== 0) || ((((_la - 86)) & ~0x1f) == 0 && ((1 << (_la - 86)) & ((1 << (CypherParser.ORDER - 86)) | (1 << (CypherParser.BY - 86)) | (1 << (CypherParser.L_SKIP - 86)) | (1 << (CypherParser.LIMIT - 86)) | (1 << (CypherParser.ASCENDING - 86)) | (1 << (CypherParser.ASC - 86)) | (1 << (CypherParser.DESCENDING - 86)) | (1 << (CypherParser.DESC - 86)) | (1 << (CypherParser.WHERE - 86)) | (1 << (CypherParser.OR - 86)) | (1 << (CypherParser.XOR - 86)) | (1 << (CypherParser.AND - 86)) | (1 << (CypherParser.NOT - 86)) | (1 << (CypherParser.STARTS - 86)) | (1 << (CypherParser.ENDS - 86)) | (1 << (CypherParser.CONTAINS - 86)) | (1 << (CypherParser.NULL - 86)) | (1 << (CypherParser.TRUE - 86)) | (1 << (CypherParser.FALSE - 86)))) !== 0) || ((((_la - 118)) & ~0x1f) == 0 && ((1 << (_la - 118)) & ((1 << (CypherParser.CASE - 118)) | (1 << (CypherParser.ELSE - 118)) | (1 << (CypherParser.END - 118)) | (1 << (CypherParser.WHEN - 118)) | (1 << (CypherParser.THEN - 118)) | (1 << (CypherParser.FOR - 118)) | (1 << (CypherParser.REQUIRE - 118)) | (1 << (CypherParser.MANDATORY - 118)) | (1 << (CypherParser.SCALAR - 118)) | (1 << (CypherParser.OF - 118)) | (1 << (CypherParser.ADD - 118)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SymbolicName() {
	    let localctx = new OC_SymbolicNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, CypherParser.RULE_oC_SymbolicName);
	    try {
	        this.state = 2166;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,364,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2151;
	            this.match(CypherParser.UnescapedSymbolicName);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2152;
	            this.match(CypherParser.EscapedSymbolicName);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2153;
	            this.match(CypherParser.HexLetter);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2154;
	            this.match(CypherParser.COUNT);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2155;
	            this.match(CypherParser.FILTER);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2156;
	            this.match(CypherParser.EXTRACT);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2157;
	            this.match(CypherParser.ANY);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2158;
	            this.match(CypherParser.NONE);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2159;
	            this.match(CypherParser.SINGLE);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2160;
	            this.match(CypherParser.LOAD);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2161;
	            this.match(CypherParser.END);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2162;
	            this.match(CypherParser.FROM);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2163;
	            this.match(CypherParser.START);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2164;
	            this.match(CypherParser.CYPHER);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2165;
	            this.oC_KeywordsThatArePartOfFunctionNames();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_KeywordsThatArePartOfFunctionNames() {
	    let localctx = new OC_KeywordsThatArePartOfFunctionNamesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, CypherParser.RULE_oC_KeywordsThatArePartOfFunctionNames);
	    try {
	        this.state = 2192;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,365,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2168;
	            this.match(CypherParser.ASSERT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2169;
	            this.match(CypherParser.CALL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2170;
	            this.match(CypherParser.CASE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2171;
	            this.match(CypherParser.COMMIT);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2172;
	            this.match(CypherParser.CREATE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2173;
	            this.match(CypherParser.CSV);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2174;
	            this.match(CypherParser.DELETE);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2175;
	            this.match(CypherParser.EXPLAIN);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2176;
	            this.match(CypherParser.FIELDTERMINATOR);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2177;
	            this.match(CypherParser.FOREACH);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2178;
	            this.match(CypherParser.HEADERS);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2179;
	            this.match(CypherParser.INDEX);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2180;
	            this.match(CypherParser.JOIN);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2181;
	            this.match(CypherParser.NODE);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2182;
	            this.match(CypherParser.PERIODIC);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2183;
	            this.match(CypherParser.PROFILE);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2184;
	            this.match(CypherParser.REDUCE);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2185;
	            this.match(CypherParser.SCAN);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 2186;
	            this.match(CypherParser.SHORTESTPATH);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 2187;
	            this.match(CypherParser.USE);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 2188;
	            this.match(CypherParser.USING);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 2189;
	            this.match(CypherParser.WHEN);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 2190;
	            this.match(CypherParser.YIELD);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 2191;
	            this.oC_ReservedWord();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_LeftArrowHead() {
	    let localctx = new OC_LeftArrowHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, CypherParser.RULE_oC_LeftArrowHead);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2194;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__21) | (1 << CypherParser.T__27) | (1 << CypherParser.T__28) | (1 << CypherParser.T__29) | (1 << CypherParser.T__30))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RightArrowHead() {
	    let localctx = new OC_RightArrowHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, CypherParser.RULE_oC_RightArrowHead);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2196;
	        _la = this._input.LA(1);
	        if(!(((((_la - 23)) & ~0x1f) == 0 && ((1 << (_la - 23)) & ((1 << (CypherParser.T__22 - 23)) | (1 << (CypherParser.T__31 - 23)) | (1 << (CypherParser.T__32 - 23)) | (1 << (CypherParser.T__33 - 23)) | (1 << (CypherParser.T__34 - 23)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Dash() {
	    let localctx = new OC_DashContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, CypherParser.RULE_oC_Dash);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2198;
	        _la = this._input.LA(1);
	        if(!(_la===CypherParser.T__11 || ((((_la - 36)) & ~0x1f) == 0 && ((1 << (_la - 36)) & ((1 << (CypherParser.T__35 - 36)) | (1 << (CypherParser.T__36 - 36)) | (1 << (CypherParser.T__37 - 36)) | (1 << (CypherParser.T__38 - 36)) | (1 << (CypherParser.T__39 - 36)) | (1 << (CypherParser.T__40 - 36)) | (1 << (CypherParser.T__41 - 36)) | (1 << (CypherParser.T__42 - 36)) | (1 << (CypherParser.T__43 - 36)) | (1 << (CypherParser.T__44 - 36)) | (1 << (CypherParser.T__45 - 36)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CypherParser.EOF = antlr4.Token.EOF;
CypherParser.T__0 = 1;
CypherParser.T__1 = 2;
CypherParser.T__2 = 3;
CypherParser.T__3 = 4;
CypherParser.T__4 = 5;
CypherParser.T__5 = 6;
CypherParser.T__6 = 7;
CypherParser.T__7 = 8;
CypherParser.T__8 = 9;
CypherParser.T__9 = 10;
CypherParser.T__10 = 11;
CypherParser.T__11 = 12;
CypherParser.T__12 = 13;
CypherParser.T__13 = 14;
CypherParser.T__14 = 15;
CypherParser.T__15 = 16;
CypherParser.T__16 = 17;
CypherParser.T__17 = 18;
CypherParser.T__18 = 19;
CypherParser.T__19 = 20;
CypherParser.T__20 = 21;
CypherParser.T__21 = 22;
CypherParser.T__22 = 23;
CypherParser.T__23 = 24;
CypherParser.T__24 = 25;
CypherParser.T__25 = 26;
CypherParser.T__26 = 27;
CypherParser.T__27 = 28;
CypherParser.T__28 = 29;
CypherParser.T__29 = 30;
CypherParser.T__30 = 31;
CypherParser.T__31 = 32;
CypherParser.T__32 = 33;
CypherParser.T__33 = 34;
CypherParser.T__34 = 35;
CypherParser.T__35 = 36;
CypherParser.T__36 = 37;
CypherParser.T__37 = 38;
CypherParser.T__38 = 39;
CypherParser.T__39 = 40;
CypherParser.T__40 = 41;
CypherParser.T__41 = 42;
CypherParser.T__42 = 43;
CypherParser.T__43 = 44;
CypherParser.T__44 = 45;
CypherParser.T__45 = 46;
CypherParser.CYPHER = 47;
CypherParser.EXPLAIN = 48;
CypherParser.PROFILE = 49;
CypherParser.USE = 50;
CypherParser.USING = 51;
CypherParser.PERIODIC = 52;
CypherParser.COMMIT = 53;
CypherParser.UNION = 54;
CypherParser.ALL = 55;
CypherParser.CREATE = 56;
CypherParser.DROP = 57;
CypherParser.INDEX = 58;
CypherParser.ON = 59;
CypherParser.CONSTRAINT = 60;
CypherParser.ASSERT = 61;
CypherParser.IS = 62;
CypherParser.UNIQUE = 63;
CypherParser.EXISTS = 64;
CypherParser.LOAD = 65;
CypherParser.CSV = 66;
CypherParser.WITH = 67;
CypherParser.HEADERS = 68;
CypherParser.FROM = 69;
CypherParser.AS = 70;
CypherParser.FIELDTERMINATOR = 71;
CypherParser.OPTIONAL = 72;
CypherParser.MATCH = 73;
CypherParser.UNWIND = 74;
CypherParser.MERGE = 75;
CypherParser.SET = 76;
CypherParser.DETACH = 77;
CypherParser.DELETE = 78;
CypherParser.REMOVE = 79;
CypherParser.FOREACH = 80;
CypherParser.IN = 81;
CypherParser.CALL = 82;
CypherParser.YIELD = 83;
CypherParser.DISTINCT = 84;
CypherParser.RETURN = 85;
CypherParser.ORDER = 86;
CypherParser.BY = 87;
CypherParser.L_SKIP = 88;
CypherParser.LIMIT = 89;
CypherParser.ASCENDING = 90;
CypherParser.ASC = 91;
CypherParser.DESCENDING = 92;
CypherParser.DESC = 93;
CypherParser.JOIN = 94;
CypherParser.SCAN = 95;
CypherParser.START = 96;
CypherParser.NODE = 97;
CypherParser.WHERE = 98;
CypherParser.SHORTESTPATH = 99;
CypherParser.ALLSHORTESTPATHS = 100;
CypherParser.OR = 101;
CypherParser.XOR = 102;
CypherParser.AND = 103;
CypherParser.NOT = 104;
CypherParser.STARTS = 105;
CypherParser.ENDS = 106;
CypherParser.CONTAINS = 107;
CypherParser.NULL = 108;
CypherParser.COUNT = 109;
CypherParser.FILTER = 110;
CypherParser.EXTRACT = 111;
CypherParser.ANY = 112;
CypherParser.NONE = 113;
CypherParser.SINGLE = 114;
CypherParser.TRUE = 115;
CypherParser.FALSE = 116;
CypherParser.REDUCE = 117;
CypherParser.CASE = 118;
CypherParser.ELSE = 119;
CypherParser.END = 120;
CypherParser.WHEN = 121;
CypherParser.THEN = 122;
CypherParser.StringLiteral = 123;
CypherParser.EscapedChar = 124;
CypherParser.HexInteger = 125;
CypherParser.DecimalInteger = 126;
CypherParser.OctalInteger = 127;
CypherParser.HexLetter = 128;
CypherParser.HexDigit = 129;
CypherParser.Digit = 130;
CypherParser.NonZeroDigit = 131;
CypherParser.NonZeroOctDigit = 132;
CypherParser.OctDigit = 133;
CypherParser.ZeroDigit = 134;
CypherParser.ExponentDecimalReal = 135;
CypherParser.RegularDecimalReal = 136;
CypherParser.FOR = 137;
CypherParser.REQUIRE = 138;
CypherParser.MANDATORY = 139;
CypherParser.SCALAR = 140;
CypherParser.OF = 141;
CypherParser.ADD = 142;
CypherParser.UnescapedSymbolicName = 143;
CypherParser.IdentifierStart = 144;
CypherParser.IdentifierPart = 145;
CypherParser.EscapedSymbolicName = 146;
CypherParser.SP = 147;
CypherParser.WHITESPACE = 148;
CypherParser.Comment = 149;

CypherParser.RULE_oC_Cypher = 0;
CypherParser.RULE_oC_QueryOptions = 1;
CypherParser.RULE_oC_AnyCypherOption = 2;
CypherParser.RULE_oC_CypherOption = 3;
CypherParser.RULE_oC_VersionNumber = 4;
CypherParser.RULE_oC_Explain = 5;
CypherParser.RULE_oC_Profile = 6;
CypherParser.RULE_oC_ConfigurationOption = 7;
CypherParser.RULE_oC_Statement = 8;
CypherParser.RULE_oC_Query = 9;
CypherParser.RULE_oC_Use = 10;
CypherParser.RULE_oC_RegularQuery = 11;
CypherParser.RULE_oC_BulkImportQuery = 12;
CypherParser.RULE_oC_PeriodicCommitHint = 13;
CypherParser.RULE_oC_LoadCSVQuery = 14;
CypherParser.RULE_oC_Union = 15;
CypherParser.RULE_oC_SingleQuery = 16;
CypherParser.RULE_oC_SinglePartQuery = 17;
CypherParser.RULE_oC_MultiPartQuery = 18;
CypherParser.RULE_oC_UpdatingClause = 19;
CypherParser.RULE_oC_ReadingClause = 20;
CypherParser.RULE_oC_Command = 21;
CypherParser.RULE_oC_CreateUniqueConstraint = 22;
CypherParser.RULE_oC_CreateNodePropertyExistenceConstraint = 23;
CypherParser.RULE_oC_CreateRelationshipPropertyExistenceConstraint = 24;
CypherParser.RULE_oC_CreateIndex = 25;
CypherParser.RULE_oC_DropUniqueConstraint = 26;
CypherParser.RULE_oC_DropNodePropertyExistenceConstraint = 27;
CypherParser.RULE_oC_DropRelationshipPropertyExistenceConstraint = 28;
CypherParser.RULE_oC_DropIndex = 29;
CypherParser.RULE_oC_Index = 30;
CypherParser.RULE_oC_UniqueConstraint = 31;
CypherParser.RULE_oC_NodePropertyExistenceConstraint = 32;
CypherParser.RULE_oC_RelationshipPropertyExistenceConstraint = 33;
CypherParser.RULE_oC_RelationshipPatternSyntax = 34;
CypherParser.RULE_oC_LoadCSV = 35;
CypherParser.RULE_oC_Match = 36;
CypherParser.RULE_oC_Unwind = 37;
CypherParser.RULE_oC_Merge = 38;
CypherParser.RULE_oC_MergeAction = 39;
CypherParser.RULE_oC_Create = 40;
CypherParser.RULE_oC_CreateUnique = 41;
CypherParser.RULE_oC_Set = 42;
CypherParser.RULE_oC_SetItem = 43;
CypherParser.RULE_oC_Delete = 44;
CypherParser.RULE_oC_Remove = 45;
CypherParser.RULE_oC_RemoveItem = 46;
CypherParser.RULE_oC_Foreach = 47;
CypherParser.RULE_oC_InQueryCall = 48;
CypherParser.RULE_oC_SubQuery = 49;
CypherParser.RULE_oC_StandaloneCall = 50;
CypherParser.RULE_oC_YieldItems = 51;
CypherParser.RULE_oC_YieldItem = 52;
CypherParser.RULE_oC_With = 53;
CypherParser.RULE_oC_Return = 54;
CypherParser.RULE_oC_ReturnBody = 55;
CypherParser.RULE_oC_ReturnItems = 56;
CypherParser.RULE_oC_ReturnItem = 57;
CypherParser.RULE_oC_Order = 58;
CypherParser.RULE_oC_Skip = 59;
CypherParser.RULE_oC_Limit = 60;
CypherParser.RULE_oC_SortItem = 61;
CypherParser.RULE_oC_Hint = 62;
CypherParser.RULE_oC_IdentifiedIndexLookup = 63;
CypherParser.RULE_oC_IndexQuery = 64;
CypherParser.RULE_oC_IdLookup = 65;
CypherParser.RULE_oC_LiteralIds = 66;
CypherParser.RULE_oC_Where = 67;
CypherParser.RULE_oC_Pattern = 68;
CypherParser.RULE_oC_PatternPart = 69;
CypherParser.RULE_oC_AnonymousPatternPart = 70;
CypherParser.RULE_oC_ShortestPathPattern = 71;
CypherParser.RULE_oC_PatternElement = 72;
CypherParser.RULE_oC_NodePattern = 73;
CypherParser.RULE_oC_PatternElementChain = 74;
CypherParser.RULE_oC_RelationshipPattern = 75;
CypherParser.RULE_oC_RelationshipDetail = 76;
CypherParser.RULE_oC_Properties = 77;
CypherParser.RULE_oC_RelType = 78;
CypherParser.RULE_oC_RelationshipTypes = 79;
CypherParser.RULE_oC_NodeLabels = 80;
CypherParser.RULE_oC_NodeLabel = 81;
CypherParser.RULE_oC_RangeLiteral = 82;
CypherParser.RULE_oC_LabelName = 83;
CypherParser.RULE_oC_RelTypeName = 84;
CypherParser.RULE_oC_Expression = 85;
CypherParser.RULE_oC_OrExpression = 86;
CypherParser.RULE_oC_XorExpression = 87;
CypherParser.RULE_oC_AndExpression = 88;
CypherParser.RULE_oC_NotExpression = 89;
CypherParser.RULE_oC_ComparisonExpression = 90;
CypherParser.RULE_oC_AddOrSubtractExpression = 91;
CypherParser.RULE_oC_MultiplyDivideModuloExpression = 92;
CypherParser.RULE_oC_PowerOfExpression = 93;
CypherParser.RULE_oC_UnaryAddOrSubtractExpression = 94;
CypherParser.RULE_oC_StringListNullOperatorExpression = 95;
CypherParser.RULE_oC_RegularExpression = 96;
CypherParser.RULE_oC_PropertyOrLabelsExpression = 97;
CypherParser.RULE_oC_Atom = 98;
CypherParser.RULE_oC_Literal = 99;
CypherParser.RULE_oC_BooleanLiteral = 100;
CypherParser.RULE_oC_ListLiteral = 101;
CypherParser.RULE_oC_Reduce = 102;
CypherParser.RULE_oC_PartialComparisonExpression = 103;
CypherParser.RULE_oC_ParenthesizedExpression = 104;
CypherParser.RULE_oC_RelationshipsPattern = 105;
CypherParser.RULE_oC_FilterExpression = 106;
CypherParser.RULE_oC_IdInColl = 107;
CypherParser.RULE_oC_FunctionInvocation = 108;
CypherParser.RULE_oC_FunctionName = 109;
CypherParser.RULE_oC_ExplicitProcedureInvocation = 110;
CypherParser.RULE_oC_ImplicitProcedureInvocation = 111;
CypherParser.RULE_oC_ProcedureResultField = 112;
CypherParser.RULE_oC_ProcedureName = 113;
CypherParser.RULE_oC_Namespace = 114;
CypherParser.RULE_oC_ListComprehension = 115;
CypherParser.RULE_oC_PatternComprehension = 116;
CypherParser.RULE_oC_PropertyLookup = 117;
CypherParser.RULE_oC_CaseExpression = 118;
CypherParser.RULE_oC_CaseAlternatives = 119;
CypherParser.RULE_oC_Variable = 120;
CypherParser.RULE_oC_NumberLiteral = 121;
CypherParser.RULE_oC_MapLiteral = 122;
CypherParser.RULE_oC_LegacyParameter = 123;
CypherParser.RULE_oC_Parameter = 124;
CypherParser.RULE_oC_PropertyExpression = 125;
CypherParser.RULE_oC_PropertyKeyName = 126;
CypherParser.RULE_oC_IntegerLiteral = 127;
CypherParser.RULE_oC_DoubleLiteral = 128;
CypherParser.RULE_oC_SchemaName = 129;
CypherParser.RULE_oC_ReservedWord = 130;
CypherParser.RULE_oC_SymbolicName = 131;
CypherParser.RULE_oC_KeywordsThatArePartOfFunctionNames = 132;
CypherParser.RULE_oC_LeftArrowHead = 133;
CypherParser.RULE_oC_RightArrowHead = 134;
CypherParser.RULE_oC_Dash = 135;

class OC_CypherContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Cypher;
    }

	oC_QueryOptions() {
	    return this.getTypedRuleContext(OC_QueryOptionsContext,0);
	};

	oC_Statement() {
	    return this.getTypedRuleContext(OC_StatementContext,0);
	};

	EOF() {
	    return this.getToken(CypherParser.EOF, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Cypher(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Cypher(this);
		}
	}


}



class OC_QueryOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_QueryOptions;
    }

	oC_AnyCypherOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_AnyCypherOptionContext);
	    } else {
	        return this.getTypedRuleContext(OC_AnyCypherOptionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_QueryOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_QueryOptions(this);
		}
	}


}



class OC_AnyCypherOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_AnyCypherOption;
    }

	oC_CypherOption() {
	    return this.getTypedRuleContext(OC_CypherOptionContext,0);
	};

	oC_Explain() {
	    return this.getTypedRuleContext(OC_ExplainContext,0);
	};

	oC_Profile() {
	    return this.getTypedRuleContext(OC_ProfileContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_AnyCypherOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_AnyCypherOption(this);
		}
	}


}



class OC_CypherOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CypherOption;
    }

	CYPHER() {
	    return this.getToken(CypherParser.CYPHER, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_VersionNumber() {
	    return this.getTypedRuleContext(OC_VersionNumberContext,0);
	};

	oC_ConfigurationOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ConfigurationOptionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ConfigurationOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CypherOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CypherOption(this);
		}
	}


}



class OC_VersionNumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_VersionNumber;
    }

	RegularDecimalReal() {
	    return this.getToken(CypherParser.RegularDecimalReal, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_VersionNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_VersionNumber(this);
		}
	}


}



class OC_ExplainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Explain;
    }

	EXPLAIN() {
	    return this.getToken(CypherParser.EXPLAIN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Explain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Explain(this);
		}
	}


}



class OC_ProfileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Profile;
    }

	PROFILE() {
	    return this.getToken(CypherParser.PROFILE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Profile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Profile(this);
		}
	}


}



class OC_ConfigurationOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ConfigurationOption;
    }

	oC_SymbolicName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_SymbolicNameContext);
	    } else {
	        return this.getTypedRuleContext(OC_SymbolicNameContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ConfigurationOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ConfigurationOption(this);
		}
	}


}



class OC_StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Statement;
    }

	oC_Command() {
	    return this.getTypedRuleContext(OC_CommandContext,0);
	};

	oC_Query() {
	    return this.getTypedRuleContext(OC_QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Statement(this);
		}
	}


}



class OC_QueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Query;
    }

	oC_RegularQuery() {
	    return this.getTypedRuleContext(OC_RegularQueryContext,0);
	};

	oC_StandaloneCall() {
	    return this.getTypedRuleContext(OC_StandaloneCallContext,0);
	};

	oC_BulkImportQuery() {
	    return this.getTypedRuleContext(OC_BulkImportQueryContext,0);
	};

	oC_SubQuery() {
	    return this.getTypedRuleContext(OC_SubQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Query(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Query(this);
		}
	}


}



class OC_UseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Use;
    }

	USE() {
	    return this.getToken(CypherParser.USE, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Use(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Use(this);
		}
	}


}



class OC_RegularQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RegularQuery;
    }

	oC_SingleQuery() {
	    return this.getTypedRuleContext(OC_SingleQueryContext,0);
	};

	oC_Union = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_UnionContext);
	    } else {
	        return this.getTypedRuleContext(OC_UnionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RegularQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RegularQuery(this);
		}
	}


}



class OC_BulkImportQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_BulkImportQuery;
    }

	oC_PeriodicCommitHint() {
	    return this.getTypedRuleContext(OC_PeriodicCommitHintContext,0);
	};

	oC_LoadCSVQuery() {
	    return this.getTypedRuleContext(OC_LoadCSVQueryContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_BulkImportQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_BulkImportQuery(this);
		}
	}


}



class OC_PeriodicCommitHintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PeriodicCommitHint;
    }

	USING() {
	    return this.getToken(CypherParser.USING, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	PERIODIC() {
	    return this.getToken(CypherParser.PERIODIC, 0);
	};

	COMMIT() {
	    return this.getToken(CypherParser.COMMIT, 0);
	};

	oC_IntegerLiteral() {
	    return this.getTypedRuleContext(OC_IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PeriodicCommitHint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PeriodicCommitHint(this);
		}
	}


}



class OC_LoadCSVQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_LoadCSVQuery;
    }

	oC_LoadCSV() {
	    return this.getTypedRuleContext(OC_LoadCSVContext,0);
	};

	oC_SingleQuery() {
	    return this.getTypedRuleContext(OC_SingleQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_LoadCSVQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_LoadCSVQuery(this);
		}
	}


}



class OC_UnionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Union;
    }

	UNION() {
	    return this.getToken(CypherParser.UNION, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ALL() {
	    return this.getToken(CypherParser.ALL, 0);
	};

	oC_SingleQuery() {
	    return this.getTypedRuleContext(OC_SingleQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Union(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Union(this);
		}
	}


}



class OC_SingleQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SingleQuery;
    }

	oC_SinglePartQuery() {
	    return this.getTypedRuleContext(OC_SinglePartQueryContext,0);
	};

	oC_Use() {
	    return this.getTypedRuleContext(OC_UseContext,0);
	};

	oC_MultiPartQuery() {
	    return this.getTypedRuleContext(OC_MultiPartQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SingleQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SingleQuery(this);
		}
	}


}



class OC_SinglePartQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SinglePartQuery;
    }

	oC_Return() {
	    return this.getTypedRuleContext(OC_ReturnContext,0);
	};

	oC_ReadingClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ReadingClauseContext);
	    } else {
	        return this.getTypedRuleContext(OC_ReadingClauseContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_UpdatingClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_UpdatingClauseContext);
	    } else {
	        return this.getTypedRuleContext(OC_UpdatingClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SinglePartQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SinglePartQuery(this);
		}
	}


}



class OC_MultiPartQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_MultiPartQuery;
    }

	oC_SinglePartQuery() {
	    return this.getTypedRuleContext(OC_SinglePartQueryContext,0);
	};

	oC_With = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_WithContext);
	    } else {
	        return this.getTypedRuleContext(OC_WithContext,i);
	    }
	};

	oC_ReadingClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ReadingClauseContext);
	    } else {
	        return this.getTypedRuleContext(OC_ReadingClauseContext,i);
	    }
	};

	oC_UpdatingClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_UpdatingClauseContext);
	    } else {
	        return this.getTypedRuleContext(OC_UpdatingClauseContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_MultiPartQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_MultiPartQuery(this);
		}
	}


}



class OC_UpdatingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_UpdatingClause;
    }

	oC_Create() {
	    return this.getTypedRuleContext(OC_CreateContext,0);
	};

	oC_Merge() {
	    return this.getTypedRuleContext(OC_MergeContext,0);
	};

	oC_CreateUnique() {
	    return this.getTypedRuleContext(OC_CreateUniqueContext,0);
	};

	oC_Foreach() {
	    return this.getTypedRuleContext(OC_ForeachContext,0);
	};

	oC_Delete() {
	    return this.getTypedRuleContext(OC_DeleteContext,0);
	};

	oC_Set() {
	    return this.getTypedRuleContext(OC_SetContext,0);
	};

	oC_Remove() {
	    return this.getTypedRuleContext(OC_RemoveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_UpdatingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_UpdatingClause(this);
		}
	}


}



class OC_ReadingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ReadingClause;
    }

	oC_LoadCSV() {
	    return this.getTypedRuleContext(OC_LoadCSVContext,0);
	};

	oC_Match() {
	    return this.getTypedRuleContext(OC_MatchContext,0);
	};

	oC_Unwind() {
	    return this.getTypedRuleContext(OC_UnwindContext,0);
	};

	oC_InQueryCall() {
	    return this.getTypedRuleContext(OC_InQueryCallContext,0);
	};

	oC_SubQuery() {
	    return this.getTypedRuleContext(OC_SubQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ReadingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ReadingClause(this);
		}
	}


}



class OC_CommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Command;
    }

	oC_CreateIndex() {
	    return this.getTypedRuleContext(OC_CreateIndexContext,0);
	};

	oC_DropIndex() {
	    return this.getTypedRuleContext(OC_DropIndexContext,0);
	};

	oC_CreateUniqueConstraint() {
	    return this.getTypedRuleContext(OC_CreateUniqueConstraintContext,0);
	};

	oC_DropUniqueConstraint() {
	    return this.getTypedRuleContext(OC_DropUniqueConstraintContext,0);
	};

	oC_CreateNodePropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_CreateNodePropertyExistenceConstraintContext,0);
	};

	oC_DropNodePropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_DropNodePropertyExistenceConstraintContext,0);
	};

	oC_CreateRelationshipPropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_CreateRelationshipPropertyExistenceConstraintContext,0);
	};

	oC_DropRelationshipPropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_DropRelationshipPropertyExistenceConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Command(this);
		}
	}


}



class OC_CreateUniqueConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CreateUniqueConstraint;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_UniqueConstraint() {
	    return this.getTypedRuleContext(OC_UniqueConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CreateUniqueConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CreateUniqueConstraint(this);
		}
	}


}



class OC_CreateNodePropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CreateNodePropertyExistenceConstraint;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_NodePropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_NodePropertyExistenceConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CreateNodePropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CreateNodePropertyExistenceConstraint(this);
		}
	}


}



class OC_CreateRelationshipPropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CreateRelationshipPropertyExistenceConstraint;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_RelationshipPropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_RelationshipPropertyExistenceConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CreateRelationshipPropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CreateRelationshipPropertyExistenceConstraint(this);
		}
	}


}



class OC_CreateIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CreateIndex;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_Index() {
	    return this.getTypedRuleContext(OC_IndexContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CreateIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CreateIndex(this);
		}
	}


}



class OC_DropUniqueConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_DropUniqueConstraint;
    }

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_UniqueConstraint() {
	    return this.getTypedRuleContext(OC_UniqueConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_DropUniqueConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_DropUniqueConstraint(this);
		}
	}


}



class OC_DropNodePropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_DropNodePropertyExistenceConstraint;
    }

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_NodePropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_NodePropertyExistenceConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_DropNodePropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_DropNodePropertyExistenceConstraint(this);
		}
	}


}



class OC_DropRelationshipPropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_DropRelationshipPropertyExistenceConstraint;
    }

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_RelationshipPropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_RelationshipPropertyExistenceConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_DropRelationshipPropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_DropRelationshipPropertyExistenceConstraint(this);
		}
	}


}



class OC_DropIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_DropIndex;
    }

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_Index() {
	    return this.getTypedRuleContext(OC_IndexContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_DropIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_DropIndex(this);
		}
	}


}



class OC_IndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Index;
    }

	INDEX() {
	    return this.getToken(CypherParser.INDEX, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	oC_NodeLabel() {
	    return this.getTypedRuleContext(OC_NodeLabelContext,0);
	};

	oC_PropertyKeyName() {
	    return this.getTypedRuleContext(OC_PropertyKeyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Index(this);
		}
	}


}



class OC_UniqueConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_UniqueConstraint;
    }

	CONSTRAINT() {
	    return this.getToken(CypherParser.CONSTRAINT, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_NodeLabel() {
	    return this.getTypedRuleContext(OC_NodeLabelContext,0);
	};

	ASSERT() {
	    return this.getToken(CypherParser.ASSERT, 0);
	};

	oC_PropertyExpression() {
	    return this.getTypedRuleContext(OC_PropertyExpressionContext,0);
	};

	IS() {
	    return this.getToken(CypherParser.IS, 0);
	};

	UNIQUE() {
	    return this.getToken(CypherParser.UNIQUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_UniqueConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_UniqueConstraint(this);
		}
	}


}



class OC_NodePropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodePropertyExistenceConstraint;
    }

	CONSTRAINT() {
	    return this.getToken(CypherParser.CONSTRAINT, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_NodeLabel() {
	    return this.getTypedRuleContext(OC_NodeLabelContext,0);
	};

	ASSERT() {
	    return this.getToken(CypherParser.ASSERT, 0);
	};

	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	oC_PropertyExpression() {
	    return this.getTypedRuleContext(OC_PropertyExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodePropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodePropertyExistenceConstraint(this);
		}
	}


}



class OC_RelationshipPropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipPropertyExistenceConstraint;
    }

	CONSTRAINT() {
	    return this.getToken(CypherParser.CONSTRAINT, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	oC_RelationshipPatternSyntax() {
	    return this.getTypedRuleContext(OC_RelationshipPatternSyntaxContext,0);
	};

	ASSERT() {
	    return this.getToken(CypherParser.ASSERT, 0);
	};

	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	oC_PropertyExpression() {
	    return this.getTypedRuleContext(OC_PropertyExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipPropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipPropertyExistenceConstraint(this);
		}
	}


}



class OC_RelationshipPatternSyntaxContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipPatternSyntax;
    }

	oC_Dash = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_DashContext);
	    } else {
	        return this.getTypedRuleContext(OC_DashContext,i);
	    }
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_RelType() {
	    return this.getTypedRuleContext(OC_RelTypeContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_RightArrowHead() {
	    return this.getTypedRuleContext(OC_RightArrowHeadContext,0);
	};

	oC_LeftArrowHead() {
	    return this.getTypedRuleContext(OC_LeftArrowHeadContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipPatternSyntax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipPatternSyntax(this);
		}
	}


}



class OC_LoadCSVContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_LoadCSV;
    }

	LOAD() {
	    return this.getToken(CypherParser.LOAD, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	CSV() {
	    return this.getToken(CypherParser.CSV, 0);
	};

	FROM() {
	    return this.getToken(CypherParser.FROM, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	WITH() {
	    return this.getToken(CypherParser.WITH, 0);
	};

	HEADERS() {
	    return this.getToken(CypherParser.HEADERS, 0);
	};

	FIELDTERMINATOR() {
	    return this.getToken(CypherParser.FIELDTERMINATOR, 0);
	};

	StringLiteral() {
	    return this.getToken(CypherParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_LoadCSV(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_LoadCSV(this);
		}
	}


}



class OC_MatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Match;
    }

	MATCH() {
	    return this.getToken(CypherParser.MATCH, 0);
	};

	oC_Pattern() {
	    return this.getTypedRuleContext(OC_PatternContext,0);
	};

	OPTIONAL() {
	    return this.getToken(CypherParser.OPTIONAL, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Hint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_HintContext);
	    } else {
	        return this.getTypedRuleContext(OC_HintContext,i);
	    }
	};

	oC_Where() {
	    return this.getTypedRuleContext(OC_WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Match(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Match(this);
		}
	}


}



class OC_UnwindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Unwind;
    }

	UNWIND() {
	    return this.getToken(CypherParser.UNWIND, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Unwind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Unwind(this);
		}
	}


}



class OC_MergeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Merge;
    }

	MERGE() {
	    return this.getToken(CypherParser.MERGE, 0);
	};

	oC_PatternPart() {
	    return this.getTypedRuleContext(OC_PatternPartContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_MergeAction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_MergeActionContext);
	    } else {
	        return this.getTypedRuleContext(OC_MergeActionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Merge(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Merge(this);
		}
	}


}



class OC_MergeActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_MergeAction;
    }

	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	MATCH() {
	    return this.getToken(CypherParser.MATCH, 0);
	};

	oC_Set() {
	    return this.getTypedRuleContext(OC_SetContext,0);
	};

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_MergeAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_MergeAction(this);
		}
	}


}



class OC_CreateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Create;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	oC_Pattern() {
	    return this.getTypedRuleContext(OC_PatternContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Create(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Create(this);
		}
	}


}



class OC_CreateUniqueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CreateUnique;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	UNIQUE() {
	    return this.getToken(CypherParser.UNIQUE, 0);
	};

	oC_Pattern() {
	    return this.getTypedRuleContext(OC_PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CreateUnique(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CreateUnique(this);
		}
	}


}



class OC_SetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Set;
    }

	SET() {
	    return this.getToken(CypherParser.SET, 0);
	};

	oC_SetItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_SetItemContext);
	    } else {
	        return this.getTypedRuleContext(OC_SetItemContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Set(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Set(this);
		}
	}


}



class OC_SetItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SetItem;
    }

	oC_PropertyExpression() {
	    return this.getTypedRuleContext(OC_PropertyExpressionContext,0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_NodeLabels() {
	    return this.getTypedRuleContext(OC_NodeLabelsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SetItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SetItem(this);
		}
	}


}



class OC_DeleteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Delete;
    }

	DELETE() {
	    return this.getToken(CypherParser.DELETE, 0);
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	DETACH() {
	    return this.getToken(CypherParser.DETACH, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Delete(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Delete(this);
		}
	}


}



class OC_RemoveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Remove;
    }

	REMOVE() {
	    return this.getToken(CypherParser.REMOVE, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_RemoveItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_RemoveItemContext);
	    } else {
	        return this.getTypedRuleContext(OC_RemoveItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Remove(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Remove(this);
		}
	}


}



class OC_RemoveItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RemoveItem;
    }

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_NodeLabels() {
	    return this.getTypedRuleContext(OC_NodeLabelsContext,0);
	};

	oC_PropertyExpression() {
	    return this.getTypedRuleContext(OC_PropertyExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RemoveItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RemoveItem(this);
		}
	}


}



class OC_ForeachContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Foreach;
    }

	FOREACH() {
	    return this.getToken(CypherParser.FOREACH, 0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	IN() {
	    return this.getToken(CypherParser.IN, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	oC_UpdatingClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_UpdatingClauseContext);
	    } else {
	        return this.getTypedRuleContext(OC_UpdatingClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Foreach(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Foreach(this);
		}
	}


}



class OC_InQueryCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_InQueryCall;
    }

	CALL() {
	    return this.getToken(CypherParser.CALL, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_ExplicitProcedureInvocation() {
	    return this.getTypedRuleContext(OC_ExplicitProcedureInvocationContext,0);
	};

	YIELD() {
	    return this.getToken(CypherParser.YIELD, 0);
	};

	oC_YieldItems() {
	    return this.getTypedRuleContext(OC_YieldItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_InQueryCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_InQueryCall(this);
		}
	}


}



class OC_SubQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SubQuery;
    }

	CALL() {
	    return this.getToken(CypherParser.CALL, 0);
	};

	oC_Query() {
	    return this.getTypedRuleContext(OC_QueryContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Return() {
	    return this.getTypedRuleContext(OC_ReturnContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SubQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SubQuery(this);
		}
	}


}



class OC_StandaloneCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_StandaloneCall;
    }

	CALL() {
	    return this.getToken(CypherParser.CALL, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_ExplicitProcedureInvocation() {
	    return this.getTypedRuleContext(OC_ExplicitProcedureInvocationContext,0);
	};

	oC_ImplicitProcedureInvocation() {
	    return this.getTypedRuleContext(OC_ImplicitProcedureInvocationContext,0);
	};

	YIELD() {
	    return this.getToken(CypherParser.YIELD, 0);
	};

	oC_YieldItems() {
	    return this.getTypedRuleContext(OC_YieldItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_StandaloneCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_StandaloneCall(this);
		}
	}


}



class OC_YieldItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_YieldItems;
    }

	oC_YieldItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_YieldItemContext);
	    } else {
	        return this.getTypedRuleContext(OC_YieldItemContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_YieldItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_YieldItems(this);
		}
	}


}



class OC_YieldItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_YieldItem;
    }

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_ProcedureResultField() {
	    return this.getTypedRuleContext(OC_ProcedureResultFieldContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_YieldItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_YieldItem(this);
		}
	}


}



class OC_WithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_With;
    }

	WITH() {
	    return this.getToken(CypherParser.WITH, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_ReturnBody() {
	    return this.getTypedRuleContext(OC_ReturnBodyContext,0);
	};

	DISTINCT() {
	    return this.getToken(CypherParser.DISTINCT, 0);
	};

	oC_Where() {
	    return this.getTypedRuleContext(OC_WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_With(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_With(this);
		}
	}


}



class OC_ReturnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Return;
    }

	RETURN() {
	    return this.getToken(CypherParser.RETURN, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_ReturnBody() {
	    return this.getTypedRuleContext(OC_ReturnBodyContext,0);
	};

	DISTINCT() {
	    return this.getToken(CypherParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Return(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Return(this);
		}
	}


}



class OC_ReturnBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ReturnBody;
    }

	oC_ReturnItems() {
	    return this.getTypedRuleContext(OC_ReturnItemsContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Order() {
	    return this.getTypedRuleContext(OC_OrderContext,0);
	};

	oC_Skip() {
	    return this.getTypedRuleContext(OC_SkipContext,0);
	};

	oC_Limit() {
	    return this.getTypedRuleContext(OC_LimitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ReturnBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ReturnBody(this);
		}
	}


}



class OC_ReturnItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ReturnItems;
    }

	oC_ReturnItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ReturnItemContext);
	    } else {
	        return this.getTypedRuleContext(OC_ReturnItemContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ReturnItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ReturnItems(this);
		}
	}


}



class OC_ReturnItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ReturnItem;
    }

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ReturnItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ReturnItem(this);
		}
	}


}



class OC_OrderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Order;
    }

	ORDER() {
	    return this.getToken(CypherParser.ORDER, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	BY() {
	    return this.getToken(CypherParser.BY, 0);
	};

	oC_SortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_SortItemContext);
	    } else {
	        return this.getTypedRuleContext(OC_SortItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Order(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Order(this);
		}
	}


}



class OC_SkipContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Skip;
    }

	L_SKIP() {
	    return this.getToken(CypherParser.L_SKIP, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Skip(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Skip(this);
		}
	}


}



class OC_LimitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Limit;
    }

	LIMIT() {
	    return this.getToken(CypherParser.LIMIT, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Limit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Limit(this);
		}
	}


}



class OC_SortItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SortItem;
    }

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	ASCENDING() {
	    return this.getToken(CypherParser.ASCENDING, 0);
	};

	ASC() {
	    return this.getToken(CypherParser.ASC, 0);
	};

	DESCENDING() {
	    return this.getToken(CypherParser.DESCENDING, 0);
	};

	DESC() {
	    return this.getToken(CypherParser.DESC, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SortItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SortItem(this);
		}
	}


}



class OC_HintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Hint;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	USING() {
	    return this.getToken(CypherParser.USING, 0);
	};

	INDEX() {
	    return this.getToken(CypherParser.INDEX, 0);
	};

	oC_Variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_VariableContext);
	    } else {
	        return this.getTypedRuleContext(OC_VariableContext,i);
	    }
	};

	oC_NodeLabel() {
	    return this.getTypedRuleContext(OC_NodeLabelContext,0);
	};

	oC_PropertyKeyName() {
	    return this.getTypedRuleContext(OC_PropertyKeyNameContext,0);
	};

	JOIN() {
	    return this.getToken(CypherParser.JOIN, 0);
	};

	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	SCAN() {
	    return this.getToken(CypherParser.SCAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Hint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Hint(this);
		}
	}


}



class OC_IdentifiedIndexLookupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_IdentifiedIndexLookup;
    }

	oC_SymbolicName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_SymbolicNameContext);
	    } else {
	        return this.getTypedRuleContext(OC_SymbolicNameContext,i);
	    }
	};

	StringLiteral() {
	    return this.getToken(CypherParser.StringLiteral, 0);
	};

	oC_LegacyParameter() {
	    return this.getTypedRuleContext(OC_LegacyParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_IdentifiedIndexLookup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_IdentifiedIndexLookup(this);
		}
	}


}



class OC_IndexQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_IndexQuery;
    }

	oC_SymbolicName() {
	    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
	};

	StringLiteral() {
	    return this.getToken(CypherParser.StringLiteral, 0);
	};

	oC_LegacyParameter() {
	    return this.getTypedRuleContext(OC_LegacyParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_IndexQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_IndexQuery(this);
		}
	}


}



class OC_IdLookupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_IdLookup;
    }

	oC_LiteralIds() {
	    return this.getTypedRuleContext(OC_LiteralIdsContext,0);
	};

	oC_LegacyParameter() {
	    return this.getTypedRuleContext(OC_LegacyParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_IdLookup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_IdLookup(this);
		}
	}


}



class OC_LiteralIdsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_LiteralIds;
    }

	oC_IntegerLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_IntegerLiteralContext);
	    } else {
	        return this.getTypedRuleContext(OC_IntegerLiteralContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_LiteralIds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_LiteralIds(this);
		}
	}


}



class OC_WhereContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Where;
    }

	WHERE() {
	    return this.getToken(CypherParser.WHERE, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Where(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Where(this);
		}
	}


}



class OC_PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Pattern;
    }

	oC_PatternPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PatternPartContext);
	    } else {
	        return this.getTypedRuleContext(OC_PatternPartContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Pattern(this);
		}
	}


}



class OC_PatternPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PatternPart;
    }

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_AnonymousPatternPart() {
	    return this.getTypedRuleContext(OC_AnonymousPatternPartContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PatternPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PatternPart(this);
		}
	}


}



class OC_AnonymousPatternPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_AnonymousPatternPart;
    }

	oC_ShortestPathPattern() {
	    return this.getTypedRuleContext(OC_ShortestPathPatternContext,0);
	};

	oC_PatternElement() {
	    return this.getTypedRuleContext(OC_PatternElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_AnonymousPatternPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_AnonymousPatternPart(this);
		}
	}


}



class OC_ShortestPathPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ShortestPathPattern;
    }

	SHORTESTPATH() {
	    return this.getToken(CypherParser.SHORTESTPATH, 0);
	};

	oC_PatternElement() {
	    return this.getTypedRuleContext(OC_PatternElementContext,0);
	};

	ALLSHORTESTPATHS() {
	    return this.getToken(CypherParser.ALLSHORTESTPATHS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ShortestPathPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ShortestPathPattern(this);
		}
	}


}



class OC_PatternElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PatternElement;
    }

	oC_NodePattern() {
	    return this.getTypedRuleContext(OC_NodePatternContext,0);
	};

	oC_PatternElementChain = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PatternElementChainContext);
	    } else {
	        return this.getTypedRuleContext(OC_PatternElementChainContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_PatternElement() {
	    return this.getTypedRuleContext(OC_PatternElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PatternElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PatternElement(this);
		}
	}


}



class OC_NodePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodePattern;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_NodeLabels() {
	    return this.getTypedRuleContext(OC_NodeLabelsContext,0);
	};

	oC_Properties() {
	    return this.getTypedRuleContext(OC_PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodePattern(this);
		}
	}


}



class OC_PatternElementChainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PatternElementChain;
    }

	oC_RelationshipPattern() {
	    return this.getTypedRuleContext(OC_RelationshipPatternContext,0);
	};

	oC_NodePattern() {
	    return this.getTypedRuleContext(OC_NodePatternContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PatternElementChain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PatternElementChain(this);
		}
	}


}



class OC_RelationshipPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipPattern;
    }

	oC_LeftArrowHead() {
	    return this.getTypedRuleContext(OC_LeftArrowHeadContext,0);
	};

	oC_Dash = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_DashContext);
	    } else {
	        return this.getTypedRuleContext(OC_DashContext,i);
	    }
	};

	oC_RightArrowHead() {
	    return this.getTypedRuleContext(OC_RightArrowHeadContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_RelationshipDetail() {
	    return this.getTypedRuleContext(OC_RelationshipDetailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipPattern(this);
		}
	}


}



class OC_RelationshipDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipDetail;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_RelationshipTypes() {
	    return this.getTypedRuleContext(OC_RelationshipTypesContext,0);
	};

	oC_RangeLiteral() {
	    return this.getTypedRuleContext(OC_RangeLiteralContext,0);
	};

	oC_Properties() {
	    return this.getTypedRuleContext(OC_PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipDetail(this);
		}
	}


}



class OC_PropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Properties;
    }

	oC_MapLiteral() {
	    return this.getTypedRuleContext(OC_MapLiteralContext,0);
	};

	oC_Parameter() {
	    return this.getTypedRuleContext(OC_ParameterContext,0);
	};

	oC_LegacyParameter() {
	    return this.getTypedRuleContext(OC_LegacyParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Properties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Properties(this);
		}
	}


}



class OC_RelTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelType;
    }

	oC_RelTypeName() {
	    return this.getTypedRuleContext(OC_RelTypeNameContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelType(this);
		}
	}


}



class OC_RelationshipTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipTypes;
    }

	oC_RelTypeName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_RelTypeNameContext);
	    } else {
	        return this.getTypedRuleContext(OC_RelTypeNameContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipTypes(this);
		}
	}


}



class OC_NodeLabelsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodeLabels;
    }

	oC_NodeLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_NodeLabelContext);
	    } else {
	        return this.getTypedRuleContext(OC_NodeLabelContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodeLabels(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodeLabels(this);
		}
	}


}



class OC_NodeLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodeLabel;
    }

	oC_LabelName() {
	    return this.getTypedRuleContext(OC_LabelNameContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodeLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodeLabel(this);
		}
	}


}



class OC_RangeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RangeLiteral;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_IntegerLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_IntegerLiteralContext);
	    } else {
	        return this.getTypedRuleContext(OC_IntegerLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RangeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RangeLiteral(this);
		}
	}


}



class OC_LabelNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_LabelName;
    }

	oC_SchemaName() {
	    return this.getTypedRuleContext(OC_SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_LabelName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_LabelName(this);
		}
	}


}



class OC_RelTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelTypeName;
    }

	oC_SchemaName() {
	    return this.getTypedRuleContext(OC_SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelTypeName(this);
		}
	}


}



class OC_ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Expression;
    }

	oC_OrExpression() {
	    return this.getTypedRuleContext(OC_OrExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Expression(this);
		}
	}


}



class OC_OrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_OrExpression;
    }

	oC_XorExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_XorExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_XorExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.OR);
	    } else {
	        return this.getToken(CypherParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_OrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_OrExpression(this);
		}
	}


}



class OC_XorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_XorExpression;
    }

	oC_AndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_AndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_AndExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	XOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.XOR);
	    } else {
	        return this.getToken(CypherParser.XOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_XorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_XorExpression(this);
		}
	}


}



class OC_AndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_AndExpression;
    }

	oC_NotExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_NotExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_NotExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.AND);
	    } else {
	        return this.getToken(CypherParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_AndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_AndExpression(this);
		}
	}


}



class OC_NotExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NotExpression;
    }

	oC_ComparisonExpression() {
	    return this.getTypedRuleContext(OC_ComparisonExpressionContext,0);
	};

	NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.NOT);
	    } else {
	        return this.getToken(CypherParser.NOT, i);
	    }
	};


	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NotExpression(this);
		}
	}


}



class OC_ComparisonExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ComparisonExpression;
    }

	oC_AddOrSubtractExpression() {
	    return this.getTypedRuleContext(OC_AddOrSubtractExpressionContext,0);
	};

	oC_PartialComparisonExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PartialComparisonExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_PartialComparisonExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ComparisonExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ComparisonExpression(this);
		}
	}


}



class OC_AddOrSubtractExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_AddOrSubtractExpression;
    }

	oC_MultiplyDivideModuloExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_MultiplyDivideModuloExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_MultiplyDivideModuloExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_AddOrSubtractExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_AddOrSubtractExpression(this);
		}
	}


}



class OC_MultiplyDivideModuloExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_MultiplyDivideModuloExpression;
    }

	oC_PowerOfExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PowerOfExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_PowerOfExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_MultiplyDivideModuloExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_MultiplyDivideModuloExpression(this);
		}
	}


}



class OC_PowerOfExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PowerOfExpression;
    }

	oC_UnaryAddOrSubtractExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_UnaryAddOrSubtractExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_UnaryAddOrSubtractExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PowerOfExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PowerOfExpression(this);
		}
	}


}



class OC_UnaryAddOrSubtractExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_UnaryAddOrSubtractExpression;
    }

	oC_StringListNullOperatorExpression() {
	    return this.getTypedRuleContext(OC_StringListNullOperatorExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_UnaryAddOrSubtractExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_UnaryAddOrSubtractExpression(this);
		}
	}


}



class OC_StringListNullOperatorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_StringListNullOperatorExpression;
    }

	oC_PropertyOrLabelsExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PropertyOrLabelsExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_PropertyOrLabelsExpressionContext,i);
	    }
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	IS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.IS);
	    } else {
	        return this.getToken(CypherParser.IS, i);
	    }
	};


	NULL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.NULL);
	    } else {
	        return this.getToken(CypherParser.NULL, i);
	    }
	};


	NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.NOT);
	    } else {
	        return this.getToken(CypherParser.NOT, i);
	    }
	};


	oC_RegularExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_RegularExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_RegularExpressionContext,i);
	    }
	};

	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.IN);
	    } else {
	        return this.getToken(CypherParser.IN, i);
	    }
	};


	STARTS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.STARTS);
	    } else {
	        return this.getToken(CypherParser.STARTS, i);
	    }
	};


	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.WITH);
	    } else {
	        return this.getToken(CypherParser.WITH, i);
	    }
	};


	ENDS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.ENDS);
	    } else {
	        return this.getToken(CypherParser.ENDS, i);
	    }
	};


	CONTAINS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.CONTAINS);
	    } else {
	        return this.getToken(CypherParser.CONTAINS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_StringListNullOperatorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_StringListNullOperatorExpression(this);
		}
	}


}



class OC_RegularExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RegularExpression;
    }

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RegularExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RegularExpression(this);
		}
	}


}



class OC_PropertyOrLabelsExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PropertyOrLabelsExpression;
    }

	oC_Atom() {
	    return this.getTypedRuleContext(OC_AtomContext,0);
	};

	oC_PropertyLookup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PropertyLookupContext);
	    } else {
	        return this.getTypedRuleContext(OC_PropertyLookupContext,i);
	    }
	};

	oC_NodeLabels() {
	    return this.getTypedRuleContext(OC_NodeLabelsContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PropertyOrLabelsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PropertyOrLabelsExpression(this);
		}
	}


}



class OC_AtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Atom;
    }

	oC_Literal() {
	    return this.getTypedRuleContext(OC_LiteralContext,0);
	};

	oC_Parameter() {
	    return this.getTypedRuleContext(OC_ParameterContext,0);
	};

	oC_LegacyParameter() {
	    return this.getTypedRuleContext(OC_LegacyParameterContext,0);
	};

	oC_CaseExpression() {
	    return this.getTypedRuleContext(OC_CaseExpressionContext,0);
	};

	COUNT() {
	    return this.getToken(CypherParser.COUNT, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_ListComprehension() {
	    return this.getTypedRuleContext(OC_ListComprehensionContext,0);
	};

	oC_PatternComprehension() {
	    return this.getTypedRuleContext(OC_PatternComprehensionContext,0);
	};

	FILTER() {
	    return this.getToken(CypherParser.FILTER, 0);
	};

	oC_FilterExpression() {
	    return this.getTypedRuleContext(OC_FilterExpressionContext,0);
	};

	EXTRACT() {
	    return this.getToken(CypherParser.EXTRACT, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	oC_Reduce() {
	    return this.getTypedRuleContext(OC_ReduceContext,0);
	};

	ALL() {
	    return this.getToken(CypherParser.ALL, 0);
	};

	ANY() {
	    return this.getToken(CypherParser.ANY, 0);
	};

	NONE() {
	    return this.getToken(CypherParser.NONE, 0);
	};

	SINGLE() {
	    return this.getToken(CypherParser.SINGLE, 0);
	};

	oC_ShortestPathPattern() {
	    return this.getTypedRuleContext(OC_ShortestPathPatternContext,0);
	};

	oC_RelationshipsPattern() {
	    return this.getTypedRuleContext(OC_RelationshipsPatternContext,0);
	};

	oC_ParenthesizedExpression() {
	    return this.getTypedRuleContext(OC_ParenthesizedExpressionContext,0);
	};

	oC_FunctionInvocation() {
	    return this.getTypedRuleContext(OC_FunctionInvocationContext,0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_ExplicitProcedureInvocation() {
	    return this.getTypedRuleContext(OC_ExplicitProcedureInvocationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Atom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Atom(this);
		}
	}


}



class OC_LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Literal;
    }

	oC_NumberLiteral() {
	    return this.getTypedRuleContext(OC_NumberLiteralContext,0);
	};

	StringLiteral() {
	    return this.getToken(CypherParser.StringLiteral, 0);
	};

	oC_BooleanLiteral() {
	    return this.getTypedRuleContext(OC_BooleanLiteralContext,0);
	};

	NULL() {
	    return this.getToken(CypherParser.NULL, 0);
	};

	oC_MapLiteral() {
	    return this.getTypedRuleContext(OC_MapLiteralContext,0);
	};

	oC_ListLiteral() {
	    return this.getTypedRuleContext(OC_ListLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Literal(this);
		}
	}


}



class OC_BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_BooleanLiteral;
    }

	TRUE() {
	    return this.getToken(CypherParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(CypherParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_BooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_BooleanLiteral(this);
		}
	}


}



class OC_ListLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ListLiteral;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ListLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ListLiteral(this);
		}
	}


}



class OC_ReduceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Reduce;
    }

	REDUCE() {
	    return this.getToken(CypherParser.REDUCE, 0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	oC_IdInColl() {
	    return this.getTypedRuleContext(OC_IdInCollContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Reduce(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Reduce(this);
		}
	}


}



class OC_PartialComparisonExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PartialComparisonExpression;
    }

	oC_AddOrSubtractExpression() {
	    return this.getTypedRuleContext(OC_AddOrSubtractExpressionContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PartialComparisonExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PartialComparisonExpression(this);
		}
	}


}



class OC_ParenthesizedExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ParenthesizedExpression;
    }

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ParenthesizedExpression(this);
		}
	}


}



class OC_RelationshipsPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipsPattern;
    }

	oC_NodePattern() {
	    return this.getTypedRuleContext(OC_NodePatternContext,0);
	};

	oC_PatternElementChain = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PatternElementChainContext);
	    } else {
	        return this.getTypedRuleContext(OC_PatternElementChainContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipsPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipsPattern(this);
		}
	}


}



class OC_FilterExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_FilterExpression;
    }

	oC_IdInColl() {
	    return this.getTypedRuleContext(OC_IdInCollContext,0);
	};

	oC_Where() {
	    return this.getTypedRuleContext(OC_WhereContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_FilterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_FilterExpression(this);
		}
	}


}



class OC_IdInCollContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_IdInColl;
    }

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	IN() {
	    return this.getToken(CypherParser.IN, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_IdInColl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_IdInColl(this);
		}
	}


}



class OC_FunctionInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_FunctionInvocation;
    }

	oC_FunctionName() {
	    return this.getTypedRuleContext(OC_FunctionNameContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	DISTINCT() {
	    return this.getToken(CypherParser.DISTINCT, 0);
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_FunctionInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_FunctionInvocation(this);
		}
	}


}



class OC_FunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_FunctionName;
    }

	oC_ProcedureName() {
	    return this.getTypedRuleContext(OC_ProcedureNameContext,0);
	};

	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_FunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_FunctionName(this);
		}
	}


}



class OC_ExplicitProcedureInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ExplicitProcedureInvocation;
    }

	oC_ProcedureName() {
	    return this.getTypedRuleContext(OC_ProcedureNameContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ExplicitProcedureInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ExplicitProcedureInvocation(this);
		}
	}


}



class OC_ImplicitProcedureInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ImplicitProcedureInvocation;
    }

	oC_ProcedureName() {
	    return this.getTypedRuleContext(OC_ProcedureNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ImplicitProcedureInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ImplicitProcedureInvocation(this);
		}
	}


}



class OC_ProcedureResultFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ProcedureResultField;
    }

	oC_SymbolicName() {
	    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ProcedureResultField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ProcedureResultField(this);
		}
	}


}



class OC_ProcedureNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ProcedureName;
    }

	oC_Namespace() {
	    return this.getTypedRuleContext(OC_NamespaceContext,0);
	};

	oC_SymbolicName() {
	    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ProcedureName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ProcedureName(this);
		}
	}


}



class OC_NamespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Namespace;
    }

	oC_SymbolicName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_SymbolicNameContext);
	    } else {
	        return this.getTypedRuleContext(OC_SymbolicNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Namespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Namespace(this);
		}
	}


}



class OC_ListComprehensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ListComprehension;
    }

	oC_FilterExpression() {
	    return this.getTypedRuleContext(OC_FilterExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ListComprehension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ListComprehension(this);
		}
	}


}



class OC_PatternComprehensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PatternComprehension;
    }

	oC_RelationshipsPattern() {
	    return this.getTypedRuleContext(OC_RelationshipsPatternContext,0);
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	WHERE() {
	    return this.getToken(CypherParser.WHERE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PatternComprehension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PatternComprehension(this);
		}
	}


}



class OC_PropertyLookupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PropertyLookup;
    }

	oC_PropertyKeyName() {
	    return this.getTypedRuleContext(OC_PropertyKeyNameContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PropertyLookup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PropertyLookup(this);
		}
	}


}



class OC_CaseExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CaseExpression;
    }

	END() {
	    return this.getToken(CypherParser.END, 0);
	};

	ELSE() {
	    return this.getToken(CypherParser.ELSE, 0);
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	CASE() {
	    return this.getToken(CypherParser.CASE, 0);
	};

	oC_CaseAlternatives = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_CaseAlternativesContext);
	    } else {
	        return this.getTypedRuleContext(OC_CaseAlternativesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CaseExpression(this);
		}
	}


}



class OC_CaseAlternativesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CaseAlternatives;
    }

	WHEN() {
	    return this.getToken(CypherParser.WHEN, 0);
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	THEN() {
	    return this.getToken(CypherParser.THEN, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CaseAlternatives(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CaseAlternatives(this);
		}
	}


}



class OC_VariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Variable;
    }

	oC_SymbolicName() {
	    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Variable(this);
		}
	}


}



class OC_NumberLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NumberLiteral;
    }

	oC_DoubleLiteral() {
	    return this.getTypedRuleContext(OC_DoubleLiteralContext,0);
	};

	oC_IntegerLiteral() {
	    return this.getTypedRuleContext(OC_IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NumberLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NumberLiteral(this);
		}
	}


}



class OC_MapLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_MapLiteral;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_PropertyKeyName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PropertyKeyNameContext);
	    } else {
	        return this.getTypedRuleContext(OC_PropertyKeyNameContext,i);
	    }
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_MapLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_MapLiteral(this);
		}
	}


}



class OC_LegacyParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_LegacyParameter;
    }

	oC_SymbolicName() {
	    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
	};

	DecimalInteger() {
	    return this.getToken(CypherParser.DecimalInteger, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_LegacyParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_LegacyParameter(this);
		}
	}


}



class OC_ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Parameter;
    }

	oC_SymbolicName() {
	    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
	};

	DecimalInteger() {
	    return this.getToken(CypherParser.DecimalInteger, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Parameter(this);
		}
	}


}



class OC_PropertyExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PropertyExpression;
    }

	oC_Atom() {
	    return this.getTypedRuleContext(OC_AtomContext,0);
	};

	oC_PropertyLookup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PropertyLookupContext);
	    } else {
	        return this.getTypedRuleContext(OC_PropertyLookupContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PropertyExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PropertyExpression(this);
		}
	}


}



class OC_PropertyKeyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PropertyKeyName;
    }

	oC_SchemaName() {
	    return this.getTypedRuleContext(OC_SchemaNameContext,0);
	};

	DecimalInteger() {
	    return this.getToken(CypherParser.DecimalInteger, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PropertyKeyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PropertyKeyName(this);
		}
	}


}



class OC_IntegerLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_IntegerLiteral;
    }

	HexInteger() {
	    return this.getToken(CypherParser.HexInteger, 0);
	};

	OctalInteger() {
	    return this.getToken(CypherParser.OctalInteger, 0);
	};

	DecimalInteger() {
	    return this.getToken(CypherParser.DecimalInteger, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_IntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_IntegerLiteral(this);
		}
	}


}



class OC_DoubleLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_DoubleLiteral;
    }

	ExponentDecimalReal() {
	    return this.getToken(CypherParser.ExponentDecimalReal, 0);
	};

	RegularDecimalReal() {
	    return this.getToken(CypherParser.RegularDecimalReal, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_DoubleLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_DoubleLiteral(this);
		}
	}


}



class OC_SchemaNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SchemaName;
    }

	oC_SymbolicName() {
	    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
	};

	oC_ReservedWord() {
	    return this.getTypedRuleContext(OC_ReservedWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SchemaName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SchemaName(this);
		}
	}


}



class OC_ReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ReservedWord;
    }

	ALL() {
	    return this.getToken(CypherParser.ALL, 0);
	};

	ASC() {
	    return this.getToken(CypherParser.ASC, 0);
	};

	ASCENDING() {
	    return this.getToken(CypherParser.ASCENDING, 0);
	};

	BY() {
	    return this.getToken(CypherParser.BY, 0);
	};

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	DELETE() {
	    return this.getToken(CypherParser.DELETE, 0);
	};

	DESC() {
	    return this.getToken(CypherParser.DESC, 0);
	};

	DESCENDING() {
	    return this.getToken(CypherParser.DESCENDING, 0);
	};

	DETACH() {
	    return this.getToken(CypherParser.DETACH, 0);
	};

	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	LIMIT() {
	    return this.getToken(CypherParser.LIMIT, 0);
	};

	MATCH() {
	    return this.getToken(CypherParser.MATCH, 0);
	};

	MERGE() {
	    return this.getToken(CypherParser.MERGE, 0);
	};

	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	OPTIONAL() {
	    return this.getToken(CypherParser.OPTIONAL, 0);
	};

	ORDER() {
	    return this.getToken(CypherParser.ORDER, 0);
	};

	REMOVE() {
	    return this.getToken(CypherParser.REMOVE, 0);
	};

	RETURN() {
	    return this.getToken(CypherParser.RETURN, 0);
	};

	SET() {
	    return this.getToken(CypherParser.SET, 0);
	};

	L_SKIP() {
	    return this.getToken(CypherParser.L_SKIP, 0);
	};

	WHERE() {
	    return this.getToken(CypherParser.WHERE, 0);
	};

	WITH() {
	    return this.getToken(CypherParser.WITH, 0);
	};

	UNION() {
	    return this.getToken(CypherParser.UNION, 0);
	};

	UNWIND() {
	    return this.getToken(CypherParser.UNWIND, 0);
	};

	AND() {
	    return this.getToken(CypherParser.AND, 0);
	};

	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	CONTAINS() {
	    return this.getToken(CypherParser.CONTAINS, 0);
	};

	DISTINCT() {
	    return this.getToken(CypherParser.DISTINCT, 0);
	};

	ENDS() {
	    return this.getToken(CypherParser.ENDS, 0);
	};

	IN() {
	    return this.getToken(CypherParser.IN, 0);
	};

	IS() {
	    return this.getToken(CypherParser.IS, 0);
	};

	NOT() {
	    return this.getToken(CypherParser.NOT, 0);
	};

	OR() {
	    return this.getToken(CypherParser.OR, 0);
	};

	STARTS() {
	    return this.getToken(CypherParser.STARTS, 0);
	};

	XOR() {
	    return this.getToken(CypherParser.XOR, 0);
	};

	FALSE() {
	    return this.getToken(CypherParser.FALSE, 0);
	};

	TRUE() {
	    return this.getToken(CypherParser.TRUE, 0);
	};

	NULL() {
	    return this.getToken(CypherParser.NULL, 0);
	};

	CONSTRAINT() {
	    return this.getToken(CypherParser.CONSTRAINT, 0);
	};

	FOR() {
	    return this.getToken(CypherParser.FOR, 0);
	};

	REQUIRE() {
	    return this.getToken(CypherParser.REQUIRE, 0);
	};

	UNIQUE() {
	    return this.getToken(CypherParser.UNIQUE, 0);
	};

	CASE() {
	    return this.getToken(CypherParser.CASE, 0);
	};

	WHEN() {
	    return this.getToken(CypherParser.WHEN, 0);
	};

	THEN() {
	    return this.getToken(CypherParser.THEN, 0);
	};

	ELSE() {
	    return this.getToken(CypherParser.ELSE, 0);
	};

	END() {
	    return this.getToken(CypherParser.END, 0);
	};

	MANDATORY() {
	    return this.getToken(CypherParser.MANDATORY, 0);
	};

	SCALAR() {
	    return this.getToken(CypherParser.SCALAR, 0);
	};

	OF() {
	    return this.getToken(CypherParser.OF, 0);
	};

	ADD() {
	    return this.getToken(CypherParser.ADD, 0);
	};

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ReservedWord(this);
		}
	}


}



class OC_SymbolicNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SymbolicName;
    }

	UnescapedSymbolicName() {
	    return this.getToken(CypherParser.UnescapedSymbolicName, 0);
	};

	EscapedSymbolicName() {
	    return this.getToken(CypherParser.EscapedSymbolicName, 0);
	};

	HexLetter() {
	    return this.getToken(CypherParser.HexLetter, 0);
	};

	COUNT() {
	    return this.getToken(CypherParser.COUNT, 0);
	};

	FILTER() {
	    return this.getToken(CypherParser.FILTER, 0);
	};

	EXTRACT() {
	    return this.getToken(CypherParser.EXTRACT, 0);
	};

	ANY() {
	    return this.getToken(CypherParser.ANY, 0);
	};

	NONE() {
	    return this.getToken(CypherParser.NONE, 0);
	};

	SINGLE() {
	    return this.getToken(CypherParser.SINGLE, 0);
	};

	LOAD() {
	    return this.getToken(CypherParser.LOAD, 0);
	};

	END() {
	    return this.getToken(CypherParser.END, 0);
	};

	FROM() {
	    return this.getToken(CypherParser.FROM, 0);
	};

	START() {
	    return this.getToken(CypherParser.START, 0);
	};

	CYPHER() {
	    return this.getToken(CypherParser.CYPHER, 0);
	};

	oC_KeywordsThatArePartOfFunctionNames() {
	    return this.getTypedRuleContext(OC_KeywordsThatArePartOfFunctionNamesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SymbolicName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SymbolicName(this);
		}
	}


}



class OC_KeywordsThatArePartOfFunctionNamesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_KeywordsThatArePartOfFunctionNames;
    }

	ASSERT() {
	    return this.getToken(CypherParser.ASSERT, 0);
	};

	CALL() {
	    return this.getToken(CypherParser.CALL, 0);
	};

	CASE() {
	    return this.getToken(CypherParser.CASE, 0);
	};

	COMMIT() {
	    return this.getToken(CypherParser.COMMIT, 0);
	};

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	CSV() {
	    return this.getToken(CypherParser.CSV, 0);
	};

	DELETE() {
	    return this.getToken(CypherParser.DELETE, 0);
	};

	EXPLAIN() {
	    return this.getToken(CypherParser.EXPLAIN, 0);
	};

	FIELDTERMINATOR() {
	    return this.getToken(CypherParser.FIELDTERMINATOR, 0);
	};

	FOREACH() {
	    return this.getToken(CypherParser.FOREACH, 0);
	};

	HEADERS() {
	    return this.getToken(CypherParser.HEADERS, 0);
	};

	INDEX() {
	    return this.getToken(CypherParser.INDEX, 0);
	};

	JOIN() {
	    return this.getToken(CypherParser.JOIN, 0);
	};

	NODE() {
	    return this.getToken(CypherParser.NODE, 0);
	};

	PERIODIC() {
	    return this.getToken(CypherParser.PERIODIC, 0);
	};

	PROFILE() {
	    return this.getToken(CypherParser.PROFILE, 0);
	};

	REDUCE() {
	    return this.getToken(CypherParser.REDUCE, 0);
	};

	SCAN() {
	    return this.getToken(CypherParser.SCAN, 0);
	};

	SHORTESTPATH() {
	    return this.getToken(CypherParser.SHORTESTPATH, 0);
	};

	USE() {
	    return this.getToken(CypherParser.USE, 0);
	};

	USING() {
	    return this.getToken(CypherParser.USING, 0);
	};

	WHEN() {
	    return this.getToken(CypherParser.WHEN, 0);
	};

	YIELD() {
	    return this.getToken(CypherParser.YIELD, 0);
	};

	oC_ReservedWord() {
	    return this.getTypedRuleContext(OC_ReservedWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_KeywordsThatArePartOfFunctionNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_KeywordsThatArePartOfFunctionNames(this);
		}
	}


}



class OC_LeftArrowHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_LeftArrowHead;
    }


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_LeftArrowHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_LeftArrowHead(this);
		}
	}


}



class OC_RightArrowHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RightArrowHead;
    }


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RightArrowHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RightArrowHead(this);
		}
	}


}



class OC_DashContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Dash;
    }


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Dash(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Dash(this);
		}
	}


}




CypherParser.OC_CypherContext = OC_CypherContext; 
CypherParser.OC_QueryOptionsContext = OC_QueryOptionsContext; 
CypherParser.OC_AnyCypherOptionContext = OC_AnyCypherOptionContext; 
CypherParser.OC_CypherOptionContext = OC_CypherOptionContext; 
CypherParser.OC_VersionNumberContext = OC_VersionNumberContext; 
CypherParser.OC_ExplainContext = OC_ExplainContext; 
CypherParser.OC_ProfileContext = OC_ProfileContext; 
CypherParser.OC_ConfigurationOptionContext = OC_ConfigurationOptionContext; 
CypherParser.OC_StatementContext = OC_StatementContext; 
CypherParser.OC_QueryContext = OC_QueryContext; 
CypherParser.OC_UseContext = OC_UseContext; 
CypherParser.OC_RegularQueryContext = OC_RegularQueryContext; 
CypherParser.OC_BulkImportQueryContext = OC_BulkImportQueryContext; 
CypherParser.OC_PeriodicCommitHintContext = OC_PeriodicCommitHintContext; 
CypherParser.OC_LoadCSVQueryContext = OC_LoadCSVQueryContext; 
CypherParser.OC_UnionContext = OC_UnionContext; 
CypherParser.OC_SingleQueryContext = OC_SingleQueryContext; 
CypherParser.OC_SinglePartQueryContext = OC_SinglePartQueryContext; 
CypherParser.OC_MultiPartQueryContext = OC_MultiPartQueryContext; 
CypherParser.OC_UpdatingClauseContext = OC_UpdatingClauseContext; 
CypherParser.OC_ReadingClauseContext = OC_ReadingClauseContext; 
CypherParser.OC_CommandContext = OC_CommandContext; 
CypherParser.OC_CreateUniqueConstraintContext = OC_CreateUniqueConstraintContext; 
CypherParser.OC_CreateNodePropertyExistenceConstraintContext = OC_CreateNodePropertyExistenceConstraintContext; 
CypherParser.OC_CreateRelationshipPropertyExistenceConstraintContext = OC_CreateRelationshipPropertyExistenceConstraintContext; 
CypherParser.OC_CreateIndexContext = OC_CreateIndexContext; 
CypherParser.OC_DropUniqueConstraintContext = OC_DropUniqueConstraintContext; 
CypherParser.OC_DropNodePropertyExistenceConstraintContext = OC_DropNodePropertyExistenceConstraintContext; 
CypherParser.OC_DropRelationshipPropertyExistenceConstraintContext = OC_DropRelationshipPropertyExistenceConstraintContext; 
CypherParser.OC_DropIndexContext = OC_DropIndexContext; 
CypherParser.OC_IndexContext = OC_IndexContext; 
CypherParser.OC_UniqueConstraintContext = OC_UniqueConstraintContext; 
CypherParser.OC_NodePropertyExistenceConstraintContext = OC_NodePropertyExistenceConstraintContext; 
CypherParser.OC_RelationshipPropertyExistenceConstraintContext = OC_RelationshipPropertyExistenceConstraintContext; 
CypherParser.OC_RelationshipPatternSyntaxContext = OC_RelationshipPatternSyntaxContext; 
CypherParser.OC_LoadCSVContext = OC_LoadCSVContext; 
CypherParser.OC_MatchContext = OC_MatchContext; 
CypherParser.OC_UnwindContext = OC_UnwindContext; 
CypherParser.OC_MergeContext = OC_MergeContext; 
CypherParser.OC_MergeActionContext = OC_MergeActionContext; 
CypherParser.OC_CreateContext = OC_CreateContext; 
CypherParser.OC_CreateUniqueContext = OC_CreateUniqueContext; 
CypherParser.OC_SetContext = OC_SetContext; 
CypherParser.OC_SetItemContext = OC_SetItemContext; 
CypherParser.OC_DeleteContext = OC_DeleteContext; 
CypherParser.OC_RemoveContext = OC_RemoveContext; 
CypherParser.OC_RemoveItemContext = OC_RemoveItemContext; 
CypherParser.OC_ForeachContext = OC_ForeachContext; 
CypherParser.OC_InQueryCallContext = OC_InQueryCallContext; 
CypherParser.OC_SubQueryContext = OC_SubQueryContext; 
CypherParser.OC_StandaloneCallContext = OC_StandaloneCallContext; 
CypherParser.OC_YieldItemsContext = OC_YieldItemsContext; 
CypherParser.OC_YieldItemContext = OC_YieldItemContext; 
CypherParser.OC_WithContext = OC_WithContext; 
CypherParser.OC_ReturnContext = OC_ReturnContext; 
CypherParser.OC_ReturnBodyContext = OC_ReturnBodyContext; 
CypherParser.OC_ReturnItemsContext = OC_ReturnItemsContext; 
CypherParser.OC_ReturnItemContext = OC_ReturnItemContext; 
CypherParser.OC_OrderContext = OC_OrderContext; 
CypherParser.OC_SkipContext = OC_SkipContext; 
CypherParser.OC_LimitContext = OC_LimitContext; 
CypherParser.OC_SortItemContext = OC_SortItemContext; 
CypherParser.OC_HintContext = OC_HintContext; 
CypherParser.OC_IdentifiedIndexLookupContext = OC_IdentifiedIndexLookupContext; 
CypherParser.OC_IndexQueryContext = OC_IndexQueryContext; 
CypherParser.OC_IdLookupContext = OC_IdLookupContext; 
CypherParser.OC_LiteralIdsContext = OC_LiteralIdsContext; 
CypherParser.OC_WhereContext = OC_WhereContext; 
CypherParser.OC_PatternContext = OC_PatternContext; 
CypherParser.OC_PatternPartContext = OC_PatternPartContext; 
CypherParser.OC_AnonymousPatternPartContext = OC_AnonymousPatternPartContext; 
CypherParser.OC_ShortestPathPatternContext = OC_ShortestPathPatternContext; 
CypherParser.OC_PatternElementContext = OC_PatternElementContext; 
CypherParser.OC_NodePatternContext = OC_NodePatternContext; 
CypherParser.OC_PatternElementChainContext = OC_PatternElementChainContext; 
CypherParser.OC_RelationshipPatternContext = OC_RelationshipPatternContext; 
CypherParser.OC_RelationshipDetailContext = OC_RelationshipDetailContext; 
CypherParser.OC_PropertiesContext = OC_PropertiesContext; 
CypherParser.OC_RelTypeContext = OC_RelTypeContext; 
CypherParser.OC_RelationshipTypesContext = OC_RelationshipTypesContext; 
CypherParser.OC_NodeLabelsContext = OC_NodeLabelsContext; 
CypherParser.OC_NodeLabelContext = OC_NodeLabelContext; 
CypherParser.OC_RangeLiteralContext = OC_RangeLiteralContext; 
CypherParser.OC_LabelNameContext = OC_LabelNameContext; 
CypherParser.OC_RelTypeNameContext = OC_RelTypeNameContext; 
CypherParser.OC_ExpressionContext = OC_ExpressionContext; 
CypherParser.OC_OrExpressionContext = OC_OrExpressionContext; 
CypherParser.OC_XorExpressionContext = OC_XorExpressionContext; 
CypherParser.OC_AndExpressionContext = OC_AndExpressionContext; 
CypherParser.OC_NotExpressionContext = OC_NotExpressionContext; 
CypherParser.OC_ComparisonExpressionContext = OC_ComparisonExpressionContext; 
CypherParser.OC_AddOrSubtractExpressionContext = OC_AddOrSubtractExpressionContext; 
CypherParser.OC_MultiplyDivideModuloExpressionContext = OC_MultiplyDivideModuloExpressionContext; 
CypherParser.OC_PowerOfExpressionContext = OC_PowerOfExpressionContext; 
CypherParser.OC_UnaryAddOrSubtractExpressionContext = OC_UnaryAddOrSubtractExpressionContext; 
CypherParser.OC_StringListNullOperatorExpressionContext = OC_StringListNullOperatorExpressionContext; 
CypherParser.OC_RegularExpressionContext = OC_RegularExpressionContext; 
CypherParser.OC_PropertyOrLabelsExpressionContext = OC_PropertyOrLabelsExpressionContext; 
CypherParser.OC_AtomContext = OC_AtomContext; 
CypherParser.OC_LiteralContext = OC_LiteralContext; 
CypherParser.OC_BooleanLiteralContext = OC_BooleanLiteralContext; 
CypherParser.OC_ListLiteralContext = OC_ListLiteralContext; 
CypherParser.OC_ReduceContext = OC_ReduceContext; 
CypherParser.OC_PartialComparisonExpressionContext = OC_PartialComparisonExpressionContext; 
CypherParser.OC_ParenthesizedExpressionContext = OC_ParenthesizedExpressionContext; 
CypherParser.OC_RelationshipsPatternContext = OC_RelationshipsPatternContext; 
CypherParser.OC_FilterExpressionContext = OC_FilterExpressionContext; 
CypherParser.OC_IdInCollContext = OC_IdInCollContext; 
CypherParser.OC_FunctionInvocationContext = OC_FunctionInvocationContext; 
CypherParser.OC_FunctionNameContext = OC_FunctionNameContext; 
CypherParser.OC_ExplicitProcedureInvocationContext = OC_ExplicitProcedureInvocationContext; 
CypherParser.OC_ImplicitProcedureInvocationContext = OC_ImplicitProcedureInvocationContext; 
CypherParser.OC_ProcedureResultFieldContext = OC_ProcedureResultFieldContext; 
CypherParser.OC_ProcedureNameContext = OC_ProcedureNameContext; 
CypherParser.OC_NamespaceContext = OC_NamespaceContext; 
CypherParser.OC_ListComprehensionContext = OC_ListComprehensionContext; 
CypherParser.OC_PatternComprehensionContext = OC_PatternComprehensionContext; 
CypherParser.OC_PropertyLookupContext = OC_PropertyLookupContext; 
CypherParser.OC_CaseExpressionContext = OC_CaseExpressionContext; 
CypherParser.OC_CaseAlternativesContext = OC_CaseAlternativesContext; 
CypherParser.OC_VariableContext = OC_VariableContext; 
CypherParser.OC_NumberLiteralContext = OC_NumberLiteralContext; 
CypherParser.OC_MapLiteralContext = OC_MapLiteralContext; 
CypherParser.OC_LegacyParameterContext = OC_LegacyParameterContext; 
CypherParser.OC_ParameterContext = OC_ParameterContext; 
CypherParser.OC_PropertyExpressionContext = OC_PropertyExpressionContext; 
CypherParser.OC_PropertyKeyNameContext = OC_PropertyKeyNameContext; 
CypherParser.OC_IntegerLiteralContext = OC_IntegerLiteralContext; 
CypherParser.OC_DoubleLiteralContext = OC_DoubleLiteralContext; 
CypherParser.OC_SchemaNameContext = OC_SchemaNameContext; 
CypherParser.OC_ReservedWordContext = OC_ReservedWordContext; 
CypherParser.OC_SymbolicNameContext = OC_SymbolicNameContext; 
CypherParser.OC_KeywordsThatArePartOfFunctionNamesContext = OC_KeywordsThatArePartOfFunctionNamesContext; 
CypherParser.OC_LeftArrowHeadContext = OC_LeftArrowHeadContext; 
CypherParser.OC_RightArrowHeadContext = OC_RightArrowHeadContext; 
CypherParser.OC_DashContext = OC_DashContext; 
