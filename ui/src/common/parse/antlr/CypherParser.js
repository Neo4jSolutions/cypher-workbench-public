// Generated from src/common/parse/antlr/Cypher.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import CypherListener from './CypherListener.js';
const serializedATN = [4,1,157,2910,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,1,0,3,0,320,
8,0,1,0,1,0,1,0,3,0,325,8,0,1,0,3,0,328,8,0,1,0,3,0,331,8,0,1,0,1,0,1,1,
1,1,3,1,337,8,1,5,1,339,8,1,10,1,12,1,342,9,1,1,2,1,2,1,2,3,2,347,8,2,1,
3,1,3,1,3,3,3,352,8,3,1,3,1,3,5,3,356,8,3,10,3,12,3,359,9,3,1,4,1,4,1,5,
1,5,1,6,1,6,1,7,1,7,3,7,369,8,7,1,7,1,7,3,7,373,8,7,1,7,1,7,1,8,1,8,3,8,
379,8,8,1,9,1,9,1,9,1,9,3,9,385,8,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,3,
11,394,8,11,1,11,5,11,397,8,11,10,11,12,11,400,9,11,1,12,1,12,3,12,404,8,
12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,415,8,13,1,14,1,14,
1,14,1,15,1,15,1,15,1,15,3,15,424,8,15,1,15,1,15,1,15,3,15,429,8,15,1,15,
3,15,432,8,15,1,16,3,16,435,8,16,1,16,1,16,3,16,439,8,16,1,16,3,16,442,8,
16,1,17,1,17,3,17,446,8,17,5,17,448,8,17,10,17,12,17,451,9,17,1,17,1,17,
1,17,3,17,456,8,17,5,17,458,8,17,10,17,12,17,461,9,17,1,17,1,17,3,17,465,
8,17,1,17,5,17,468,8,17,10,17,12,17,471,9,17,1,17,3,17,474,8,17,1,17,3,17,
477,8,17,3,17,479,8,17,1,18,1,18,3,18,483,8,18,5,18,485,8,18,10,18,12,18,
488,9,18,1,18,1,18,3,18,492,8,18,5,18,494,8,18,10,18,12,18,497,9,18,1,18,
1,18,3,18,501,8,18,4,18,503,8,18,11,18,12,18,504,1,18,1,18,1,19,1,19,1,19,
1,19,1,19,1,19,1,19,3,19,516,8,19,1,20,1,20,1,20,1,20,1,20,3,20,523,8,20,
1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,533,8,21,1,22,1,22,1,22,1,22,
1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,
26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,
1,30,1,30,1,30,3,30,571,8,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,
3,31,582,8,31,1,31,1,31,1,31,1,31,1,31,3,31,589,8,31,1,31,1,31,1,31,1,31,
1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,603,8,32,1,32,1,32,1,32,1,32,
1,32,3,32,610,8,32,1,32,1,32,1,32,1,32,3,32,616,8,32,1,32,1,32,1,32,1,32,
1,33,1,33,1,33,1,33,3,33,626,8,33,1,33,1,33,3,33,630,8,33,1,33,1,33,1,33,
1,33,3,33,636,8,33,1,33,1,33,1,33,1,33,1,34,1,34,3,34,644,8,34,1,34,1,34,
1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,655,8,34,1,34,1,34,1,34,1,34,3,34,
661,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,673,8,34,
1,34,1,34,1,34,1,34,3,34,679,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
1,34,1,34,3,34,691,8,34,1,34,1,34,3,34,695,8,34,1,35,1,35,1,35,1,35,1,35,
1,35,1,35,1,35,3,35,705,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,
1,35,1,35,3,35,718,8,35,1,35,3,35,721,8,35,1,36,1,36,3,36,725,8,36,1,36,
1,36,3,36,729,8,36,1,36,1,36,5,36,733,8,36,10,36,12,36,736,9,36,1,36,3,36,
739,8,36,1,36,3,36,742,8,36,1,36,1,36,3,36,746,8,36,1,36,1,36,3,36,750,8,
36,1,36,1,36,3,36,754,8,36,1,37,1,37,3,37,758,8,37,1,37,1,37,1,37,1,37,1,
37,1,37,1,38,1,38,3,38,768,8,38,1,38,1,38,1,38,5,38,773,8,38,10,38,12,38,
776,9,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,788,8,39,
1,40,1,40,3,40,792,8,40,1,40,1,40,1,41,1,41,1,41,1,41,3,41,800,8,41,1,41,
1,41,1,42,1,42,3,42,806,8,42,1,42,1,42,3,42,810,8,42,1,42,1,42,3,42,814,
8,42,1,42,5,42,817,8,42,10,42,12,42,820,9,42,1,43,1,43,3,43,824,8,43,1,43,
1,43,3,43,828,8,43,1,43,1,43,1,43,1,43,3,43,834,8,43,1,43,1,43,3,43,838,
8,43,1,43,1,43,1,43,1,43,3,43,844,8,43,1,43,1,43,3,43,848,8,43,1,43,1,43,
1,43,1,43,3,43,854,8,43,1,43,1,43,3,43,858,8,43,1,44,1,44,3,44,862,8,44,
1,44,1,44,3,44,866,8,44,1,44,1,44,3,44,870,8,44,1,44,1,44,3,44,874,8,44,
1,44,5,44,877,8,44,10,44,12,44,880,9,44,1,45,1,45,1,45,1,45,3,45,886,8,45,
1,45,1,45,3,45,890,8,45,1,45,5,45,893,8,45,10,45,12,45,896,9,45,1,46,1,46,
1,46,1,46,3,46,902,8,46,1,47,1,47,3,47,906,8,47,1,47,1,47,3,47,910,8,47,
1,47,1,47,1,47,1,47,1,47,1,47,3,47,918,8,47,1,47,1,47,1,47,4,47,923,8,47,
11,47,12,47,924,1,47,3,47,928,8,47,1,47,1,47,1,48,1,48,3,48,934,8,48,1,48,
1,48,1,48,1,48,3,48,940,8,48,1,48,1,48,1,48,3,48,945,8,48,1,49,1,49,3,49,
949,8,49,1,49,1,49,3,49,953,8,49,1,49,3,49,956,8,49,1,49,3,49,959,8,49,1,
49,1,49,3,49,963,8,49,1,49,1,49,3,49,967,8,49,1,49,1,49,3,49,971,8,49,1,
49,3,49,974,8,49,1,49,3,49,977,8,49,1,49,3,49,980,8,49,1,50,1,50,3,50,984,
8,50,1,50,3,50,987,8,50,1,50,3,50,990,8,50,1,50,1,50,3,50,994,8,50,1,50,
5,50,997,8,50,10,50,12,50,1000,9,50,1,50,3,50,1003,8,50,1,50,1,50,1,50,3,
50,1008,8,50,1,50,1,50,3,50,1012,8,50,1,50,3,50,1015,8,50,1,51,3,51,1018,
8,51,1,51,1,51,1,51,3,51,1023,8,51,1,51,1,51,3,51,1027,8,51,1,51,1,51,1,
51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1038,8,51,1,52,1,52,1,52,1,52,3,52,
1044,8,52,1,52,1,52,1,52,1,52,3,52,1050,8,52,1,53,1,53,3,53,1054,8,53,1,
53,1,53,3,53,1058,8,53,1,53,5,53,1061,8,53,10,53,12,53,1064,9,53,1,53,3,
53,1067,8,53,1,54,1,54,1,54,1,54,1,54,3,54,1074,8,54,1,54,1,54,1,55,1,55,
3,55,1080,8,55,1,55,3,55,1083,8,55,1,55,1,55,1,55,3,55,1088,8,55,1,55,3,
55,1091,8,55,1,55,1,55,3,55,1095,8,55,1,55,1,55,3,55,1099,8,55,1,55,1,55,
3,55,1103,8,55,1,56,1,56,3,56,1107,8,56,1,56,3,56,1110,8,56,1,56,1,56,1,
56,1,57,1,57,1,57,3,57,1118,8,57,1,57,1,57,3,57,1122,8,57,1,57,1,57,3,57,
1126,8,57,1,58,1,58,3,58,1130,8,58,1,58,1,58,3,58,1134,8,58,1,58,5,58,1137,
8,58,10,58,12,58,1140,9,58,1,58,1,58,3,58,1144,8,58,1,58,1,58,3,58,1148,
8,58,1,58,5,58,1151,8,58,10,58,12,58,1154,9,58,3,58,1156,8,58,1,59,1,59,
1,59,1,59,1,59,1,59,1,59,3,59,1165,8,59,1,60,1,60,1,60,1,60,1,60,1,60,1,
60,3,60,1174,8,60,1,60,5,60,1177,8,60,10,60,12,60,1180,9,60,1,61,1,61,1,
61,1,61,1,62,1,62,1,62,1,62,1,63,1,63,3,63,1192,8,63,1,63,3,63,1195,8,63,
1,64,3,64,1198,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1218,8,64,1,64,1,64,3,64,1222,
8,64,1,64,5,64,1225,8,64,10,64,12,64,1228,9,64,1,64,1,64,1,64,1,64,1,64,
1,64,1,64,3,64,1237,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,1246,8,
65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,3,66,1255,8,66,1,66,1,66,1,67,1,67,
1,67,1,67,3,67,1263,8,67,1,67,1,67,1,68,1,68,3,68,1269,8,68,1,68,1,68,3,
68,1273,8,68,1,68,5,68,1276,8,68,10,68,12,68,1279,9,68,1,69,1,69,1,69,3,
69,1284,8,69,1,69,3,69,1287,8,69,1,69,1,69,3,69,1291,8,69,1,69,1,69,3,69,
1295,8,69,1,69,1,69,3,69,1299,8,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1307,
8,69,1,69,1,69,3,69,1311,8,69,1,69,1,69,3,69,1315,8,69,1,69,1,69,1,69,1,
69,1,69,3,69,1322,8,69,1,70,1,70,3,70,1326,8,70,1,70,1,70,3,70,1330,8,70,
1,70,5,70,1333,8,70,10,70,12,70,1336,9,70,1,71,1,71,3,71,1340,8,71,1,71,
1,71,3,71,1344,8,71,1,71,1,71,1,71,3,71,1349,8,71,1,72,1,72,5,72,1353,8,
72,10,72,12,72,1356,9,72,3,72,1358,8,72,1,73,1,73,3,73,1362,8,73,1,73,1,
73,3,73,1366,8,73,1,73,1,73,3,73,1370,8,73,1,73,1,73,1,73,1,73,3,73,1376,
8,73,1,73,1,73,3,73,1380,8,73,1,73,1,73,3,73,1384,8,73,1,73,1,73,1,73,1,
73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1398,8,73,1,73,1,73,1,73,
1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1411,8,73,1,74,1,74,3,74,1415,
8,74,1,74,5,74,1418,8,74,10,74,12,74,1421,9,74,1,74,1,74,1,74,3,74,1426,
8,74,1,74,1,74,3,74,1430,8,74,1,75,1,75,1,76,1,76,1,77,1,77,3,77,1438,8,
77,1,77,1,77,3,77,1442,8,77,3,77,1444,8,77,1,77,1,77,3,77,1448,8,77,3,77,
1450,8,77,1,77,1,77,3,77,1454,8,77,3,77,1456,8,77,1,77,3,77,1459,8,77,1,
77,1,77,3,77,1463,8,77,3,77,1465,8,77,1,77,1,77,1,78,1,78,3,78,1471,8,78,
1,78,3,78,1474,8,78,1,79,1,79,3,79,1478,8,79,1,79,1,79,3,79,1482,8,79,1,
79,3,79,1485,8,79,1,79,3,79,1488,8,79,1,79,1,79,3,79,1492,8,79,1,79,1,79,
1,79,3,79,1497,8,79,1,79,1,79,3,79,1501,8,79,3,79,1503,8,79,1,79,1,79,3,
79,1507,8,79,1,79,1,79,3,79,1511,8,79,1,79,3,79,1514,8,79,1,79,3,79,1517,
8,79,1,79,1,79,1,79,3,79,1522,8,79,1,79,1,79,3,79,1526,8,79,3,79,1528,8,
79,1,79,1,79,3,79,1532,8,79,1,79,3,79,1535,8,79,1,79,3,79,1538,8,79,1,79,
1,79,3,79,1542,8,79,1,79,1,79,1,79,3,79,1547,8,79,1,79,1,79,3,79,1551,8,
79,3,79,1553,8,79,1,79,1,79,3,79,1557,8,79,1,79,3,79,1560,8,79,1,79,3,79,
1563,8,79,1,79,1,79,1,79,3,79,1568,8,79,1,79,1,79,3,79,1572,8,79,3,79,1574,
8,79,1,79,3,79,1577,8,79,1,80,1,80,3,80,1581,8,80,1,80,1,80,3,80,1585,8,
80,3,80,1587,8,80,1,80,1,80,3,80,1591,8,80,3,80,1593,8,80,1,80,3,80,1596,
8,80,1,80,1,80,3,80,1600,8,80,3,80,1602,8,80,1,80,3,80,1605,8,80,1,80,1,
80,3,80,1609,8,80,3,80,1611,8,80,1,80,1,80,1,81,3,81,1616,8,81,1,81,1,81,
3,81,1620,8,81,1,81,1,81,3,81,1624,8,81,1,81,3,81,1627,8,81,1,81,1,81,3,
81,1631,8,81,3,81,1633,8,81,1,81,1,81,3,81,1637,8,81,1,81,1,81,3,81,1641,
8,81,3,81,1643,8,81,1,82,1,82,3,82,1647,8,82,1,82,3,82,1650,8,82,1,82,3,
82,1653,8,82,1,82,1,82,3,82,1657,8,82,1,82,3,82,1660,8,82,1,82,3,82,1663,
8,82,1,82,1,82,1,82,3,82,1668,8,82,1,82,3,82,1671,8,82,1,82,3,82,1674,8,
82,1,82,3,82,1677,8,82,1,82,3,82,1680,8,82,1,82,1,82,1,82,3,82,1685,8,82,
1,82,3,82,1688,8,82,1,82,3,82,1691,8,82,1,82,1,82,1,82,3,82,1696,8,82,1,
82,3,82,1699,8,82,1,82,3,82,1702,8,82,1,82,3,82,1705,8,82,1,82,3,82,1708,
8,82,1,82,1,82,1,82,3,82,1713,8,82,1,82,3,82,1716,8,82,1,82,3,82,1719,8,
82,1,82,1,82,1,82,3,82,1724,8,82,1,83,1,83,1,83,3,83,1729,8,83,1,84,1,84,
3,84,1733,8,84,1,84,1,84,1,85,1,85,3,85,1739,8,85,1,85,1,85,3,85,1743,8,
85,1,85,1,85,3,85,1747,8,85,1,85,3,85,1750,8,85,1,85,5,85,1753,8,85,10,85,
12,85,1756,9,85,1,85,1,85,3,85,1760,8,85,1,85,3,85,1763,8,85,1,86,1,86,1,
87,1,87,3,87,1769,8,87,1,87,1,87,3,87,1773,8,87,1,87,5,87,1776,8,87,10,87,
12,87,1779,9,87,1,88,1,88,3,88,1783,8,88,1,88,1,88,3,88,1787,8,88,1,88,5,
88,1790,8,88,10,88,12,88,1793,9,88,1,89,3,89,1796,8,89,1,89,1,89,3,89,1800,
8,89,3,89,1802,8,89,1,89,1,89,3,89,1806,8,89,1,90,1,90,3,90,1810,8,90,1,
90,5,90,1813,8,90,10,90,12,90,1816,9,90,1,90,1,90,1,90,3,90,1821,8,90,1,
91,3,91,1824,8,91,1,91,1,91,3,91,1828,8,91,1,91,1,91,3,91,1832,8,91,1,91,
1,91,3,91,1836,8,91,1,92,3,92,1839,8,92,1,92,1,92,3,92,1843,8,92,1,92,1,
92,3,92,1847,8,92,1,93,3,93,1850,8,93,1,93,1,93,3,93,1854,8,93,1,93,5,93,
1857,8,93,10,93,12,93,1860,9,93,1,94,1,94,3,94,1864,8,94,1,94,5,94,1867,
8,94,10,94,12,94,1870,9,94,1,94,1,94,3,94,1874,8,94,1,94,3,94,1877,8,94,
1,95,1,95,1,96,1,96,3,96,1883,8,96,1,96,1,96,3,96,1887,8,96,1,96,5,96,1890,
8,96,10,96,12,96,1893,9,96,1,97,1,97,3,97,1897,8,97,1,97,1,97,3,97,1901,
8,97,1,97,5,97,1904,8,97,10,97,12,97,1907,9,97,1,98,3,98,1910,8,98,1,98,
1,98,3,98,1914,8,98,3,98,1916,8,98,1,98,1,98,3,98,1920,8,98,1,99,1,99,3,
99,1924,8,99,1,99,5,99,1927,8,99,10,99,12,99,1930,9,99,1,99,1,99,1,99,3,
99,1935,8,99,1,100,3,100,1938,8,100,1,100,1,100,3,100,1942,8,100,1,100,1,
100,3,100,1946,8,100,1,100,1,100,3,100,1950,8,100,1,101,3,101,1953,8,101,
1,101,1,101,3,101,1957,8,101,1,101,1,101,3,101,1961,8,101,1,102,3,102,1964,
8,102,1,102,1,102,3,102,1968,8,102,1,102,5,102,1971,8,102,10,102,12,102,
1974,9,102,1,103,1,103,3,103,1978,8,103,1,103,1,103,1,104,1,104,3,104,1984,
8,104,1,104,1,104,3,104,1988,8,104,3,104,1990,8,104,1,104,1,104,3,104,1994,
8,104,1,104,1,104,3,104,1998,8,104,3,104,2000,8,104,3,104,2002,8,104,1,105,
1,105,1,106,1,106,1,107,1,107,1,108,1,108,1,108,1,108,1,108,5,108,2015,8,
108,10,108,12,108,2018,9,108,1,109,1,109,1,109,1,109,1,109,5,109,2025,8,
109,10,109,12,109,2028,9,109,1,110,1,110,1,110,1,110,1,110,5,110,2035,8,
110,10,110,12,110,2038,9,110,1,111,1,111,3,111,2042,8,111,5,111,2044,8,111,
10,111,12,111,2047,9,111,1,111,1,111,1,112,1,112,3,112,2053,8,112,1,112,
5,112,2056,8,112,10,112,12,112,2059,9,112,1,113,1,113,3,113,2063,8,113,1,
113,1,113,3,113,2067,8,113,1,113,1,113,3,113,2071,8,113,1,113,1,113,3,113,
2075,8,113,1,113,5,113,2078,8,113,10,113,12,113,2081,9,113,1,114,1,114,3,
114,2085,8,114,1,114,1,114,3,114,2089,8,114,1,114,1,114,3,114,2093,8,114,
1,114,1,114,3,114,2097,8,114,1,114,1,114,3,114,2101,8,114,1,114,1,114,3,
114,2105,8,114,1,114,5,114,2108,8,114,10,114,12,114,2111,9,114,1,115,1,115,
3,115,2115,8,115,1,115,1,115,3,115,2119,8,115,1,115,5,115,2122,8,115,10,
115,12,115,2125,9,115,1,116,1,116,3,116,2129,8,116,5,116,2131,8,116,10,116,
12,116,2134,9,116,1,116,1,116,1,117,1,117,3,117,2140,8,117,1,117,1,117,1,
117,1,117,1,117,3,117,2147,8,117,1,117,1,117,1,117,1,117,1,117,3,117,2154,
8,117,1,117,5,117,2157,8,117,10,117,12,117,2160,9,117,4,117,2162,8,117,11,
117,12,117,2163,1,117,3,117,2167,8,117,1,117,1,117,3,117,2171,8,117,1,117,
1,117,3,117,2175,8,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,
117,1,117,1,117,1,117,1,117,1,117,3,117,2191,8,117,1,117,3,117,2194,8,117,
1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,5,117,
2207,8,117,10,117,12,117,2210,9,117,1,117,3,117,2213,8,117,1,118,3,118,2216,
8,118,1,118,1,118,1,119,1,119,3,119,2222,8,119,1,119,5,119,2225,8,119,10,
119,12,119,2228,9,119,1,119,3,119,2231,8,119,1,119,3,119,2234,8,119,1,120,
1,120,3,120,2238,8,120,1,120,1,120,3,120,2242,8,120,1,120,1,120,3,120,2246,
8,120,1,120,3,120,2249,8,120,1,120,1,120,3,120,2253,8,120,1,120,1,120,3,
120,2257,8,120,5,120,2259,8,120,10,120,12,120,2262,9,120,1,120,1,120,1,121,
1,121,1,121,1,121,1,121,1,121,1,121,3,121,2273,8,121,1,121,1,121,3,121,2277,
8,121,1,121,1,121,3,121,2281,8,121,1,121,1,121,1,121,1,121,1,121,3,121,2288,
8,121,1,121,1,121,3,121,2292,8,121,1,121,1,121,3,121,2296,8,121,1,121,1,
121,1,121,1,121,3,121,2302,8,121,1,121,1,121,3,121,2306,8,121,1,121,1,121,
3,121,2310,8,121,1,121,3,121,2313,8,121,1,121,1,121,3,121,2317,8,121,1,121,
3,121,2320,8,121,1,121,3,121,2323,8,121,1,121,1,121,1,121,1,121,1,121,3,
121,2330,8,121,1,121,1,121,3,121,2334,8,121,1,121,1,121,3,121,2338,8,121,
1,121,1,121,1,121,1,121,3,121,2344,8,121,1,121,1,121,3,121,2348,8,121,1,
121,1,121,3,121,2352,8,121,1,121,1,121,1,121,1,121,3,121,2358,8,121,1,121,
1,121,3,121,2362,8,121,1,121,1,121,3,121,2366,8,121,1,121,1,121,1,121,1,
121,3,121,2372,8,121,1,121,1,121,3,121,2376,8,121,1,121,1,121,3,121,2380,
8,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,1,121,3,121,
2392,8,121,1,121,1,121,3,121,2396,8,121,1,121,1,121,3,121,2400,8,121,1,121,
1,121,1,121,1,121,3,121,2406,8,121,1,121,1,121,3,121,2410,8,121,1,121,1,
121,5,121,2414,8,121,10,121,12,121,2417,9,121,1,121,3,121,2420,8,121,1,121,
3,121,2423,8,121,1,121,3,121,2426,8,121,1,121,1,121,3,121,2430,8,121,1,122,
1,122,1,122,1,122,1,122,1,122,3,122,2438,8,122,1,123,1,123,1,124,1,124,3,
124,2444,8,124,1,124,1,124,3,124,2448,8,124,1,124,1,124,3,124,2452,8,124,
1,124,1,124,3,124,2456,8,124,5,124,2458,8,124,10,124,12,124,2461,9,124,3,
124,2463,8,124,1,124,1,124,1,125,1,125,3,125,2469,8,125,1,125,1,125,3,125,
2473,8,125,1,125,1,125,3,125,2477,8,125,1,125,1,125,3,125,2481,8,125,1,125,
1,125,3,125,2485,8,125,1,125,1,125,3,125,2489,8,125,1,125,1,125,3,125,2493,
8,125,1,125,1,125,3,125,2497,8,125,1,125,1,125,3,125,2501,8,125,1,125,1,
125,1,126,1,126,3,126,2507,8,126,1,126,1,126,1,126,3,126,2512,8,126,1,126,
1,126,1,126,3,126,2517,8,126,1,126,1,126,1,126,3,126,2522,8,126,1,126,1,
126,1,126,3,126,2527,8,126,1,126,1,126,1,126,3,126,2532,8,126,1,126,3,126,
2535,8,126,1,127,1,127,3,127,2539,8,127,1,127,1,127,3,127,2543,8,127,1,127,
1,127,1,128,1,128,3,128,2549,8,128,1,128,4,128,2552,8,128,11,128,12,128,
2553,1,129,1,129,3,129,2558,8,129,1,129,3,129,2561,8,129,1,130,1,130,1,130,
1,130,1,130,1,130,1,131,1,131,3,131,2571,8,131,1,131,1,131,3,131,2575,8,
131,1,131,1,131,3,131,2579,8,131,3,131,2581,8,131,1,131,1,131,3,131,2585,
8,131,1,131,1,131,3,131,2589,8,131,1,131,1,131,3,131,2593,8,131,5,131,2595,
8,131,10,131,12,131,2598,9,131,3,131,2600,8,131,1,131,1,131,1,132,1,132,
3,132,2606,8,132,1,133,1,133,3,133,2610,8,133,1,133,1,133,3,133,2614,8,133,
1,133,1,133,3,133,2618,8,133,1,133,1,133,3,133,2622,8,133,1,133,1,133,3,
133,2626,8,133,5,133,2628,8,133,10,133,12,133,2631,9,133,3,133,2633,8,133,
1,133,1,133,1,134,1,134,1,135,1,135,1,136,1,136,1,136,1,137,1,137,1,137,
5,137,2647,8,137,10,137,12,137,2650,9,137,1,138,1,138,3,138,2654,8,138,1,
138,1,138,3,138,2658,8,138,1,138,1,138,3,138,2662,8,138,1,138,3,138,2665,
8,138,1,138,3,138,2668,8,138,1,138,1,138,1,139,1,139,3,139,2674,8,139,1,
139,1,139,3,139,2678,8,139,1,139,1,139,3,139,2682,8,139,3,139,2684,8,139,
1,139,1,139,3,139,2688,8,139,1,139,1,139,3,139,2692,8,139,1,139,1,139,3,
139,2696,8,139,3,139,2698,8,139,1,139,1,139,3,139,2702,8,139,1,139,1,139,
3,139,2706,8,139,1,139,1,139,1,140,1,140,3,140,2712,8,140,1,140,1,140,1,
141,1,141,3,141,2718,8,141,1,141,4,141,2721,8,141,11,141,12,141,2722,1,141,
1,141,3,141,2727,8,141,1,141,1,141,3,141,2731,8,141,1,141,4,141,2734,8,141,
11,141,12,141,2735,3,141,2738,8,141,1,141,3,141,2741,8,141,1,141,1,141,3,
141,2745,8,141,1,141,3,141,2748,8,141,1,141,3,141,2751,8,141,1,141,1,141,
1,142,1,142,3,142,2757,8,142,1,142,1,142,3,142,2761,8,142,1,142,1,142,3,
142,2765,8,142,1,142,1,142,1,143,1,143,1,144,1,144,3,144,2773,8,144,1,145,
1,145,3,145,2777,8,145,1,145,1,145,3,145,2781,8,145,1,145,1,145,3,145,2785,
8,145,1,145,1,145,3,145,2789,8,145,1,145,1,145,3,145,2793,8,145,1,145,1,
145,3,145,2797,8,145,1,145,1,145,3,145,2801,8,145,1,145,1,145,3,145,2805,
8,145,5,145,2807,8,145,10,145,12,145,2810,9,145,3,145,2812,8,145,1,145,1,
145,1,146,1,146,3,146,2818,8,146,1,146,1,146,3,146,2822,8,146,1,146,3,146,
2825,8,146,1,146,1,146,1,147,1,147,1,147,3,147,2832,8,147,1,148,1,148,3,
148,2836,8,148,1,148,4,148,2839,8,148,11,148,12,148,2840,1,149,1,149,1,149,
1,149,1,149,1,149,3,149,2849,8,149,1,150,1,150,1,151,1,151,1,152,1,152,3,
152,2857,8,152,1,153,1,153,1,154,1,154,1,154,1,154,1,154,1,154,1,154,1,154,
1,154,1,154,1,154,1,154,1,154,1,154,1,154,3,154,2876,8,154,1,155,1,155,1,
155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,
155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,3,155,2902,8,155,
1,156,1,156,1,157,1,157,1,158,1,158,1,158,0,0,159,0,2,4,6,8,10,12,14,16,
18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
292,294,296,298,300,302,304,306,308,310,312,314,316,0,11,1,0,93,94,1,0,96,
99,2,0,13,13,15,15,2,0,66,66,117,117,1,0,123,124,1,0,133,135,1,0,143,144,
14,0,56,59,61,62,64,66,69,69,72,72,74,81,83,83,89,93,95,99,104,104,109,116,
123,124,126,130,145,150,2,0,24,24,30,33,2,0,25,25,34,37,2,0,13,13,38,48,
3394,0,319,1,0,0,0,2,340,1,0,0,0,4,346,1,0,0,0,6,348,1,0,0,0,8,360,1,0,0,
0,10,362,1,0,0,0,12,364,1,0,0,0,14,366,1,0,0,0,16,378,1,0,0,0,18,384,1,0,
0,0,20,386,1,0,0,0,22,391,1,0,0,0,24,401,1,0,0,0,26,407,1,0,0,0,28,416,1,
0,0,0,30,431,1,0,0,0,32,441,1,0,0,0,34,478,1,0,0,0,36,502,1,0,0,0,38,515,
1,0,0,0,40,522,1,0,0,0,42,532,1,0,0,0,44,534,1,0,0,0,46,538,1,0,0,0,48,542,
1,0,0,0,50,546,1,0,0,0,52,550,1,0,0,0,54,554,1,0,0,0,56,558,1,0,0,0,58,562,
1,0,0,0,60,566,1,0,0,0,62,577,1,0,0,0,64,598,1,0,0,0,66,621,1,0,0,0,68,694,
1,0,0,0,70,696,1,0,0,0,72,724,1,0,0,0,74,755,1,0,0,0,76,765,1,0,0,0,78,787,
1,0,0,0,80,789,1,0,0,0,82,795,1,0,0,0,84,803,1,0,0,0,86,857,1,0,0,0,88,861,
1,0,0,0,90,881,1,0,0,0,92,901,1,0,0,0,94,903,1,0,0,0,96,933,1,0,0,0,98,948,
1,0,0,0,100,1014,1,0,0,0,102,1017,1,0,0,0,104,1039,1,0,0,0,106,1066,1,0,
0,0,108,1073,1,0,0,0,110,1077,1,0,0,0,112,1104,1,0,0,0,114,1114,1,0,0,0,
116,1155,1,0,0,0,118,1164,1,0,0,0,120,1166,1,0,0,0,122,1181,1,0,0,0,124,
1185,1,0,0,0,126,1189,1,0,0,0,128,1197,1,0,0,0,130,1238,1,0,0,0,132,1249,
1,0,0,0,134,1258,1,0,0,0,136,1266,1,0,0,0,138,1321,1,0,0,0,140,1323,1,0,
0,0,142,1348,1,0,0,0,144,1357,1,0,0,0,146,1410,1,0,0,0,148,1429,1,0,0,0,
150,1431,1,0,0,0,152,1433,1,0,0,0,154,1435,1,0,0,0,156,1468,1,0,0,0,158,
1576,1,0,0,0,160,1578,1,0,0,0,162,1615,1,0,0,0,164,1723,1,0,0,0,166,1728,
1,0,0,0,168,1730,1,0,0,0,170,1762,1,0,0,0,172,1764,1,0,0,0,174,1766,1,0,
0,0,176,1780,1,0,0,0,178,1801,1,0,0,0,180,1820,1,0,0,0,182,1823,1,0,0,0,
184,1838,1,0,0,0,186,1849,1,0,0,0,188,1876,1,0,0,0,190,1878,1,0,0,0,192,
1880,1,0,0,0,194,1894,1,0,0,0,196,1915,1,0,0,0,198,1934,1,0,0,0,200,1937,
1,0,0,0,202,1952,1,0,0,0,204,1963,1,0,0,0,206,1975,1,0,0,0,208,1981,1,0,
0,0,210,2003,1,0,0,0,212,2005,1,0,0,0,214,2007,1,0,0,0,216,2009,1,0,0,0,
218,2019,1,0,0,0,220,2029,1,0,0,0,222,2045,1,0,0,0,224,2050,1,0,0,0,226,
2060,1,0,0,0,228,2082,1,0,0,0,230,2112,1,0,0,0,232,2132,1,0,0,0,234,2212,
1,0,0,0,236,2215,1,0,0,0,238,2219,1,0,0,0,240,2235,1,0,0,0,242,2429,1,0,
0,0,244,2437,1,0,0,0,246,2439,1,0,0,0,248,2441,1,0,0,0,250,2466,1,0,0,0,
252,2534,1,0,0,0,254,2536,1,0,0,0,256,2546,1,0,0,0,258,2555,1,0,0,0,260,
2562,1,0,0,0,262,2568,1,0,0,0,264,2605,1,0,0,0,266,2607,1,0,0,0,268,2636,
1,0,0,0,270,2638,1,0,0,0,272,2640,1,0,0,0,274,2648,1,0,0,0,276,2651,1,0,
0,0,278,2671,1,0,0,0,280,2709,1,0,0,0,282,2737,1,0,0,0,284,2754,1,0,0,0,
286,2768,1,0,0,0,288,2772,1,0,0,0,290,2774,1,0,0,0,292,2815,1,0,0,0,294,
2828,1,0,0,0,296,2833,1,0,0,0,298,2848,1,0,0,0,300,2850,1,0,0,0,302,2852,
1,0,0,0,304,2856,1,0,0,0,306,2858,1,0,0,0,308,2875,1,0,0,0,310,2901,1,0,
0,0,312,2903,1,0,0,0,314,2905,1,0,0,0,316,2907,1,0,0,0,318,320,5,155,0,0,
319,318,1,0,0,0,319,320,1,0,0,0,320,321,1,0,0,0,321,322,3,2,1,0,322,327,
3,16,8,0,323,325,5,155,0,0,324,323,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,
0,326,328,5,1,0,0,327,324,1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,331,
5,155,0,0,330,329,1,0,0,0,330,331,1,0,0,0,331,332,1,0,0,0,332,333,5,0,0,
1,333,1,1,0,0,0,334,336,3,4,2,0,335,337,5,155,0,0,336,335,1,0,0,0,336,337,
1,0,0,0,337,339,1,0,0,0,338,334,1,0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,
340,341,1,0,0,0,341,3,1,0,0,0,342,340,1,0,0,0,343,347,3,6,3,0,344,347,3,
10,5,0,345,347,3,12,6,0,346,343,1,0,0,0,346,344,1,0,0,0,346,345,1,0,0,0,
347,5,1,0,0,0,348,351,5,49,0,0,349,350,5,155,0,0,350,352,3,8,4,0,351,349,
1,0,0,0,351,352,1,0,0,0,352,357,1,0,0,0,353,354,5,155,0,0,354,356,3,14,7,
0,355,353,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,7,
1,0,0,0,359,357,1,0,0,0,360,361,5,144,0,0,361,9,1,0,0,0,362,363,5,50,0,0,
363,11,1,0,0,0,364,365,5,51,0,0,365,13,1,0,0,0,366,368,3,308,154,0,367,369,
5,155,0,0,368,367,1,0,0,0,368,369,1,0,0,0,369,370,1,0,0,0,370,372,5,2,0,
0,371,373,5,155,0,0,372,371,1,0,0,0,372,373,1,0,0,0,373,374,1,0,0,0,374,
375,3,308,154,0,375,15,1,0,0,0,376,379,3,42,21,0,377,379,3,18,9,0,378,376,
1,0,0,0,378,377,1,0,0,0,379,17,1,0,0,0,380,385,3,22,11,0,381,385,3,104,52,
0,382,385,3,24,12,0,383,385,3,98,49,0,384,380,1,0,0,0,384,381,1,0,0,0,384,
382,1,0,0,0,384,383,1,0,0,0,385,19,1,0,0,0,386,387,5,52,0,0,387,388,5,155,
0,0,388,389,3,214,107,0,389,390,5,155,0,0,390,21,1,0,0,0,391,398,3,32,16,
0,392,394,5,155,0,0,393,392,1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,
397,3,30,15,0,396,393,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,
0,0,0,399,23,1,0,0,0,400,398,1,0,0,0,401,403,3,26,13,0,402,404,5,155,0,0,
403,402,1,0,0,0,403,404,1,0,0,0,404,405,1,0,0,0,405,406,3,28,14,0,406,25,
1,0,0,0,407,408,5,53,0,0,408,409,5,155,0,0,409,410,5,54,0,0,410,411,5,155,
0,0,411,414,5,55,0,0,412,413,5,155,0,0,413,415,3,300,150,0,414,412,1,0,0,
0,414,415,1,0,0,0,415,27,1,0,0,0,416,417,3,70,35,0,417,418,3,32,16,0,418,
29,1,0,0,0,419,420,5,56,0,0,420,421,5,155,0,0,421,423,5,57,0,0,422,424,5,
155,0,0,423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,432,3,32,16,
0,426,428,5,56,0,0,427,429,5,155,0,0,428,427,1,0,0,0,428,429,1,0,0,0,429,
430,1,0,0,0,430,432,3,32,16,0,431,419,1,0,0,0,431,426,1,0,0,0,432,31,1,0,
0,0,433,435,3,20,10,0,434,433,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,
442,3,34,17,0,437,439,3,20,10,0,438,437,1,0,0,0,438,439,1,0,0,0,439,440,
1,0,0,0,440,442,3,36,18,0,441,434,1,0,0,0,441,438,1,0,0,0,442,33,1,0,0,0,
443,445,3,40,20,0,444,446,5,155,0,0,445,444,1,0,0,0,445,446,1,0,0,0,446,
448,1,0,0,0,447,443,1,0,0,0,448,451,1,0,0,0,449,447,1,0,0,0,449,450,1,0,
0,0,450,452,1,0,0,0,451,449,1,0,0,0,452,479,3,112,56,0,453,455,3,40,20,0,
454,456,5,155,0,0,455,454,1,0,0,0,455,456,1,0,0,0,456,458,1,0,0,0,457,453,
1,0,0,0,458,461,1,0,0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,462,1,0,0,0,
461,459,1,0,0,0,462,469,3,38,19,0,463,465,5,155,0,0,464,463,1,0,0,0,464,
465,1,0,0,0,465,466,1,0,0,0,466,468,3,38,19,0,467,464,1,0,0,0,468,471,1,
0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,476,1,0,0,0,471,469,1,0,0,0,472,
474,5,155,0,0,473,472,1,0,0,0,473,474,1,0,0,0,474,475,1,0,0,0,475,477,3,
112,56,0,476,473,1,0,0,0,476,477,1,0,0,0,477,479,1,0,0,0,478,449,1,0,0,0,
478,459,1,0,0,0,479,35,1,0,0,0,480,482,3,40,20,0,481,483,5,155,0,0,482,481,
1,0,0,0,482,483,1,0,0,0,483,485,1,0,0,0,484,480,1,0,0,0,485,488,1,0,0,0,
486,484,1,0,0,0,486,487,1,0,0,0,487,495,1,0,0,0,488,486,1,0,0,0,489,491,
3,38,19,0,490,492,5,155,0,0,491,490,1,0,0,0,491,492,1,0,0,0,492,494,1,0,
0,0,493,489,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,1,0,0,0,496,
498,1,0,0,0,497,495,1,0,0,0,498,500,3,110,55,0,499,501,5,155,0,0,500,499,
1,0,0,0,500,501,1,0,0,0,501,503,1,0,0,0,502,486,1,0,0,0,503,504,1,0,0,0,
504,502,1,0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,507,3,34,17,0,507,37,
1,0,0,0,508,516,3,80,40,0,509,516,3,76,38,0,510,516,3,82,41,0,511,516,3,
94,47,0,512,516,3,88,44,0,513,516,3,84,42,0,514,516,3,90,45,0,515,508,1,
0,0,0,515,509,1,0,0,0,515,510,1,0,0,0,515,511,1,0,0,0,515,512,1,0,0,0,515,
513,1,0,0,0,515,514,1,0,0,0,516,39,1,0,0,0,517,523,3,70,35,0,518,523,3,72,
36,0,519,523,3,74,37,0,520,523,3,96,48,0,521,523,3,98,49,0,522,517,1,0,0,
0,522,518,1,0,0,0,522,519,1,0,0,0,522,520,1,0,0,0,522,521,1,0,0,0,523,41,
1,0,0,0,524,533,3,50,25,0,525,533,3,58,29,0,526,533,3,44,22,0,527,533,3,
52,26,0,528,533,3,46,23,0,529,533,3,54,27,0,530,533,3,48,24,0,531,533,3,
56,28,0,532,524,1,0,0,0,532,525,1,0,0,0,532,526,1,0,0,0,532,527,1,0,0,0,
532,528,1,0,0,0,532,529,1,0,0,0,532,530,1,0,0,0,532,531,1,0,0,0,533,43,1,
0,0,0,534,535,5,58,0,0,535,536,5,155,0,0,536,537,3,62,31,0,537,45,1,0,0,
0,538,539,5,58,0,0,539,540,5,155,0,0,540,541,3,64,32,0,541,47,1,0,0,0,542,
543,5,58,0,0,543,544,5,155,0,0,544,545,3,66,33,0,545,49,1,0,0,0,546,547,
5,58,0,0,547,548,5,155,0,0,548,549,3,60,30,0,549,51,1,0,0,0,550,551,5,59,
0,0,551,552,5,155,0,0,552,553,3,62,31,0,553,53,1,0,0,0,554,555,5,59,0,0,
555,556,5,155,0,0,556,557,3,64,32,0,557,55,1,0,0,0,558,559,5,59,0,0,559,
560,5,155,0,0,560,561,3,66,33,0,561,57,1,0,0,0,562,563,5,59,0,0,563,564,
5,155,0,0,564,565,3,60,30,0,565,59,1,0,0,0,566,567,5,60,0,0,567,568,5,155,
0,0,568,570,5,61,0,0,569,571,5,155,0,0,570,569,1,0,0,0,570,571,1,0,0,0,571,
572,1,0,0,0,572,573,3,206,103,0,573,574,5,3,0,0,574,575,3,298,149,0,575,
576,5,4,0,0,576,61,1,0,0,0,577,578,5,62,0,0,578,579,5,155,0,0,579,581,5,
61,0,0,580,582,5,155,0,0,581,580,1,0,0,0,581,582,1,0,0,0,582,583,1,0,0,0,
583,584,5,3,0,0,584,585,3,286,143,0,585,586,3,206,103,0,586,588,5,4,0,0,
587,589,5,155,0,0,588,587,1,0,0,0,588,589,1,0,0,0,589,590,1,0,0,0,590,591,
5,63,0,0,591,592,5,155,0,0,592,593,3,296,148,0,593,594,5,155,0,0,594,595,
5,64,0,0,595,596,5,155,0,0,596,597,5,65,0,0,597,63,1,0,0,0,598,599,5,62,
0,0,599,600,5,155,0,0,600,602,5,61,0,0,601,603,5,155,0,0,602,601,1,0,0,0,
602,603,1,0,0,0,603,604,1,0,0,0,604,605,5,3,0,0,605,606,3,286,143,0,606,
607,3,206,103,0,607,609,5,4,0,0,608,610,5,155,0,0,609,608,1,0,0,0,609,610,
1,0,0,0,610,611,1,0,0,0,611,612,5,63,0,0,612,613,5,155,0,0,613,615,5,66,
0,0,614,616,5,155,0,0,615,614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,
618,5,3,0,0,618,619,3,296,148,0,619,620,5,4,0,0,620,65,1,0,0,0,621,622,5,
62,0,0,622,623,5,155,0,0,623,625,5,61,0,0,624,626,5,155,0,0,625,624,1,0,
0,0,625,626,1,0,0,0,626,627,1,0,0,0,627,629,3,68,34,0,628,630,5,155,0,0,
629,628,1,0,0,0,629,630,1,0,0,0,630,631,1,0,0,0,631,632,5,63,0,0,632,633,
5,155,0,0,633,635,5,66,0,0,634,636,5,155,0,0,635,634,1,0,0,0,635,636,1,0,
0,0,636,637,1,0,0,0,637,638,5,3,0,0,638,639,3,296,148,0,639,640,5,4,0,0,
640,67,1,0,0,0,641,643,5,3,0,0,642,644,5,155,0,0,643,642,1,0,0,0,643,644,
1,0,0,0,644,645,1,0,0,0,645,646,5,4,0,0,646,647,3,316,158,0,647,648,5,5,
0,0,648,649,3,286,143,0,649,650,3,168,84,0,650,651,5,6,0,0,651,652,3,316,
158,0,652,654,5,3,0,0,653,655,5,155,0,0,654,653,1,0,0,0,654,655,1,0,0,0,
655,656,1,0,0,0,656,657,5,4,0,0,657,695,1,0,0,0,658,660,5,3,0,0,659,661,
5,155,0,0,660,659,1,0,0,0,660,661,1,0,0,0,661,662,1,0,0,0,662,663,5,4,0,
0,663,664,3,316,158,0,664,665,5,5,0,0,665,666,3,286,143,0,666,667,3,168,
84,0,667,668,5,6,0,0,668,669,3,316,158,0,669,670,3,314,157,0,670,672,5,3,
0,0,671,673,5,155,0,0,672,671,1,0,0,0,672,673,1,0,0,0,673,674,1,0,0,0,674,
675,5,4,0,0,675,695,1,0,0,0,676,678,5,3,0,0,677,679,5,155,0,0,678,677,1,
0,0,0,678,679,1,0,0,0,679,680,1,0,0,0,680,681,5,4,0,0,681,682,3,312,156,
0,682,683,3,316,158,0,683,684,5,5,0,0,684,685,3,286,143,0,685,686,3,168,
84,0,686,687,5,6,0,0,687,688,3,316,158,0,688,690,5,3,0,0,689,691,5,155,0,
0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,692,693,5,4,0,0,693,695,
1,0,0,0,694,641,1,0,0,0,694,658,1,0,0,0,694,676,1,0,0,0,695,69,1,0,0,0,696,
697,5,67,0,0,697,698,5,155,0,0,698,699,5,68,0,0,699,704,5,155,0,0,700,701,
5,69,0,0,701,702,5,155,0,0,702,703,5,70,0,0,703,705,5,155,0,0,704,700,1,
0,0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,707,5,71,0,0,707,708,5,155,0,0,
708,709,3,214,107,0,709,710,5,155,0,0,710,711,5,72,0,0,711,712,5,155,0,0,
712,713,3,286,143,0,713,717,5,155,0,0,714,715,5,73,0,0,715,716,5,155,0,0,
716,718,5,131,0,0,717,714,1,0,0,0,717,718,1,0,0,0,718,720,1,0,0,0,719,721,
5,155,0,0,720,719,1,0,0,0,720,721,1,0,0,0,721,71,1,0,0,0,722,723,5,74,0,
0,723,725,5,155,0,0,724,722,1,0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,
728,5,75,0,0,727,729,5,155,0,0,728,727,1,0,0,0,728,729,1,0,0,0,729,730,1,
0,0,0,730,734,3,140,70,0,731,733,3,128,64,0,732,731,1,0,0,0,733,736,1,0,
0,0,734,732,1,0,0,0,734,735,1,0,0,0,735,741,1,0,0,0,736,734,1,0,0,0,737,
739,5,155,0,0,738,737,1,0,0,0,738,739,1,0,0,0,739,740,1,0,0,0,740,742,3,
138,69,0,741,738,1,0,0,0,741,742,1,0,0,0,742,745,1,0,0,0,743,744,5,155,0,
0,744,746,3,120,60,0,745,743,1,0,0,0,745,746,1,0,0,0,746,749,1,0,0,0,747,
748,5,155,0,0,748,750,3,122,61,0,749,747,1,0,0,0,749,750,1,0,0,0,750,753,
1,0,0,0,751,752,5,155,0,0,752,754,3,124,62,0,753,751,1,0,0,0,753,754,1,0,
0,0,754,73,1,0,0,0,755,757,5,76,0,0,756,758,5,155,0,0,757,756,1,0,0,0,757,
758,1,0,0,0,758,759,1,0,0,0,759,760,3,214,107,0,760,761,5,155,0,0,761,762,
5,72,0,0,762,763,5,155,0,0,763,764,3,286,143,0,764,75,1,0,0,0,765,767,5,
77,0,0,766,768,5,155,0,0,767,766,1,0,0,0,767,768,1,0,0,0,768,769,1,0,0,0,
769,774,3,142,71,0,770,771,5,155,0,0,771,773,3,78,39,0,772,770,1,0,0,0,773,
776,1,0,0,0,774,772,1,0,0,0,774,775,1,0,0,0,775,77,1,0,0,0,776,774,1,0,0,
0,777,778,5,61,0,0,778,779,5,155,0,0,779,780,5,75,0,0,780,781,5,155,0,0,
781,788,3,84,42,0,782,783,5,61,0,0,783,784,5,155,0,0,784,785,5,58,0,0,785,
786,5,155,0,0,786,788,3,84,42,0,787,777,1,0,0,0,787,782,1,0,0,0,788,79,1,
0,0,0,789,791,5,58,0,0,790,792,5,155,0,0,791,790,1,0,0,0,791,792,1,0,0,0,
792,793,1,0,0,0,793,794,3,140,70,0,794,81,1,0,0,0,795,796,5,58,0,0,796,797,
5,155,0,0,797,799,5,65,0,0,798,800,5,155,0,0,799,798,1,0,0,0,799,800,1,0,
0,0,800,801,1,0,0,0,801,802,3,140,70,0,802,83,1,0,0,0,803,805,5,78,0,0,804,
806,5,155,0,0,805,804,1,0,0,0,805,806,1,0,0,0,806,807,1,0,0,0,807,818,3,
86,43,0,808,810,5,155,0,0,809,808,1,0,0,0,809,810,1,0,0,0,810,811,1,0,0,
0,811,813,5,7,0,0,812,814,5,155,0,0,813,812,1,0,0,0,813,814,1,0,0,0,814,
815,1,0,0,0,815,817,3,86,43,0,816,809,1,0,0,0,817,820,1,0,0,0,818,816,1,
0,0,0,818,819,1,0,0,0,819,85,1,0,0,0,820,818,1,0,0,0,821,823,3,296,148,0,
822,824,5,155,0,0,823,822,1,0,0,0,823,824,1,0,0,0,824,825,1,0,0,0,825,827,
5,2,0,0,826,828,5,155,0,0,827,826,1,0,0,0,827,828,1,0,0,0,828,829,1,0,0,
0,829,830,3,214,107,0,830,858,1,0,0,0,831,833,3,286,143,0,832,834,5,155,
0,0,833,832,1,0,0,0,833,834,1,0,0,0,834,835,1,0,0,0,835,837,5,2,0,0,836,
838,5,155,0,0,837,836,1,0,0,0,837,838,1,0,0,0,838,839,1,0,0,0,839,840,3,
214,107,0,840,858,1,0,0,0,841,843,3,286,143,0,842,844,5,155,0,0,843,842,
1,0,0,0,843,844,1,0,0,0,844,845,1,0,0,0,845,847,5,8,0,0,846,848,5,155,0,
0,847,846,1,0,0,0,847,848,1,0,0,0,848,849,1,0,0,0,849,850,3,214,107,0,850,
858,1,0,0,0,851,853,3,286,143,0,852,854,5,155,0,0,853,852,1,0,0,0,853,854,
1,0,0,0,854,855,1,0,0,0,855,856,3,188,94,0,856,858,1,0,0,0,857,821,1,0,0,
0,857,831,1,0,0,0,857,841,1,0,0,0,857,851,1,0,0,0,858,87,1,0,0,0,859,860,
5,79,0,0,860,862,5,155,0,0,861,859,1,0,0,0,861,862,1,0,0,0,862,863,1,0,0,
0,863,865,5,80,0,0,864,866,5,155,0,0,865,864,1,0,0,0,865,866,1,0,0,0,866,
867,1,0,0,0,867,878,3,214,107,0,868,870,5,155,0,0,869,868,1,0,0,0,869,870,
1,0,0,0,870,871,1,0,0,0,871,873,5,7,0,0,872,874,5,155,0,0,873,872,1,0,0,
0,873,874,1,0,0,0,874,875,1,0,0,0,875,877,3,214,107,0,876,869,1,0,0,0,877,
880,1,0,0,0,878,876,1,0,0,0,878,879,1,0,0,0,879,89,1,0,0,0,880,878,1,0,0,
0,881,882,5,81,0,0,882,883,5,155,0,0,883,894,3,92,46,0,884,886,5,155,0,0,
885,884,1,0,0,0,885,886,1,0,0,0,886,887,1,0,0,0,887,889,5,7,0,0,888,890,
5,155,0,0,889,888,1,0,0,0,889,890,1,0,0,0,890,891,1,0,0,0,891,893,3,92,46,
0,892,885,1,0,0,0,893,896,1,0,0,0,894,892,1,0,0,0,894,895,1,0,0,0,895,91,
1,0,0,0,896,894,1,0,0,0,897,898,3,286,143,0,898,899,3,188,94,0,899,902,1,
0,0,0,900,902,3,296,148,0,901,897,1,0,0,0,901,900,1,0,0,0,902,93,1,0,0,0,
903,905,5,82,0,0,904,906,5,155,0,0,905,904,1,0,0,0,905,906,1,0,0,0,906,907,
1,0,0,0,907,909,5,3,0,0,908,910,5,155,0,0,909,908,1,0,0,0,909,910,1,0,0,
0,910,911,1,0,0,0,911,912,3,286,143,0,912,913,5,155,0,0,913,914,5,83,0,0,
914,915,5,155,0,0,915,917,3,214,107,0,916,918,5,155,0,0,917,916,1,0,0,0,
917,918,1,0,0,0,918,919,1,0,0,0,919,922,5,9,0,0,920,921,5,155,0,0,921,923,
3,38,19,0,922,920,1,0,0,0,923,924,1,0,0,0,924,922,1,0,0,0,924,925,1,0,0,
0,925,927,1,0,0,0,926,928,5,155,0,0,927,926,1,0,0,0,927,928,1,0,0,0,928,
929,1,0,0,0,929,930,5,4,0,0,930,95,1,0,0,0,931,932,5,74,0,0,932,934,5,155,
0,0,933,931,1,0,0,0,933,934,1,0,0,0,934,935,1,0,0,0,935,936,5,87,0,0,936,
937,5,155,0,0,937,944,3,266,133,0,938,940,5,155,0,0,939,938,1,0,0,0,939,
940,1,0,0,0,940,941,1,0,0,0,941,942,5,88,0,0,942,943,5,155,0,0,943,945,3,
106,53,0,944,939,1,0,0,0,944,945,1,0,0,0,945,97,1,0,0,0,946,947,5,74,0,0,
947,949,5,155,0,0,948,946,1,0,0,0,948,949,1,0,0,0,949,950,1,0,0,0,950,952,
5,87,0,0,951,953,5,155,0,0,952,951,1,0,0,0,952,953,1,0,0,0,953,955,1,0,0,
0,954,956,3,100,50,0,955,954,1,0,0,0,955,956,1,0,0,0,956,958,1,0,0,0,957,
959,5,155,0,0,958,957,1,0,0,0,958,959,1,0,0,0,959,960,1,0,0,0,960,962,5,
10,0,0,961,963,5,155,0,0,962,961,1,0,0,0,962,963,1,0,0,0,963,964,1,0,0,0,
964,966,3,18,9,0,965,967,5,155,0,0,966,965,1,0,0,0,966,967,1,0,0,0,967,968,
1,0,0,0,968,970,5,11,0,0,969,971,5,155,0,0,970,969,1,0,0,0,970,971,1,0,0,
0,971,973,1,0,0,0,972,974,3,102,51,0,973,972,1,0,0,0,973,974,1,0,0,0,974,
976,1,0,0,0,975,977,5,155,0,0,976,975,1,0,0,0,976,977,1,0,0,0,977,979,1,
0,0,0,978,980,3,112,56,0,979,978,1,0,0,0,979,980,1,0,0,0,980,99,1,0,0,0,
981,983,5,3,0,0,982,984,5,155,0,0,983,982,1,0,0,0,983,984,1,0,0,0,984,986,
1,0,0,0,985,987,3,286,143,0,986,985,1,0,0,0,986,987,1,0,0,0,987,998,1,0,
0,0,988,990,5,155,0,0,989,988,1,0,0,0,989,990,1,0,0,0,990,991,1,0,0,0,991,
993,5,7,0,0,992,994,5,155,0,0,993,992,1,0,0,0,993,994,1,0,0,0,994,995,1,
0,0,0,995,997,3,286,143,0,996,989,1,0,0,0,997,1000,1,0,0,0,998,996,1,0,0,
0,998,999,1,0,0,0,999,1002,1,0,0,0,1000,998,1,0,0,0,1001,1003,5,155,0,0,
1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,0,0,1004,1015,5,4,0,0,
1005,1007,5,3,0,0,1006,1008,5,155,0,0,1007,1006,1,0,0,0,1007,1008,1,0,0,
0,1008,1009,1,0,0,0,1009,1011,5,12,0,0,1010,1012,5,155,0,0,1011,1010,1,0,
0,0,1011,1012,1,0,0,0,1012,1013,1,0,0,0,1013,1015,5,4,0,0,1014,981,1,0,0,
0,1014,1005,1,0,0,0,1015,101,1,0,0,0,1016,1018,5,155,0,0,1017,1016,1,0,0,
0,1017,1018,1,0,0,0,1018,1019,1,0,0,0,1019,1026,5,83,0,0,1020,1022,5,155,
0,0,1021,1023,3,300,150,0,1022,1021,1,0,0,0,1022,1023,1,0,0,0,1023,1024,
1,0,0,0,1024,1025,5,155,0,0,1025,1027,5,85,0,0,1026,1020,1,0,0,0,1026,1027,
1,0,0,0,1027,1028,1,0,0,0,1028,1029,5,155,0,0,1029,1037,5,84,0,0,1030,1031,
5,155,0,0,1031,1032,5,149,0,0,1032,1033,5,155,0,0,1033,1034,3,300,150,0,
1034,1035,5,155,0,0,1035,1036,5,86,0,0,1036,1038,1,0,0,0,1037,1030,1,0,0,
0,1037,1038,1,0,0,0,1038,103,1,0,0,0,1039,1040,5,87,0,0,1040,1043,5,155,
0,0,1041,1044,3,266,133,0,1042,1044,3,268,134,0,1043,1041,1,0,0,0,1043,1042,
1,0,0,0,1044,1049,1,0,0,0,1045,1046,5,155,0,0,1046,1047,5,88,0,0,1047,1048,
5,155,0,0,1048,1050,3,106,53,0,1049,1045,1,0,0,0,1049,1050,1,0,0,0,1050,
105,1,0,0,0,1051,1062,3,108,54,0,1052,1054,5,155,0,0,1053,1052,1,0,0,0,1053,
1054,1,0,0,0,1054,1055,1,0,0,0,1055,1057,5,7,0,0,1056,1058,5,155,0,0,1057,
1056,1,0,0,0,1057,1058,1,0,0,0,1058,1059,1,0,0,0,1059,1061,3,108,54,0,1060,
1053,1,0,0,0,1061,1064,1,0,0,0,1062,1060,1,0,0,0,1062,1063,1,0,0,0,1063,
1067,1,0,0,0,1064,1062,1,0,0,0,1065,1067,5,13,0,0,1066,1051,1,0,0,0,1066,
1065,1,0,0,0,1067,107,1,0,0,0,1068,1069,3,270,135,0,1069,1070,5,155,0,0,
1070,1071,5,72,0,0,1071,1072,5,155,0,0,1072,1074,1,0,0,0,1073,1068,1,0,0,
0,1073,1074,1,0,0,0,1074,1075,1,0,0,0,1075,1076,3,286,143,0,1076,109,1,0,
0,0,1077,1082,5,69,0,0,1078,1080,5,155,0,0,1079,1078,1,0,0,0,1079,1080,1,
0,0,0,1080,1081,1,0,0,0,1081,1083,5,89,0,0,1082,1079,1,0,0,0,1082,1083,1,
0,0,0,1083,1084,1,0,0,0,1084,1085,5,155,0,0,1085,1090,3,114,57,0,1086,1088,
5,155,0,0,1087,1086,1,0,0,0,1087,1088,1,0,0,0,1088,1089,1,0,0,0,1089,1091,
3,138,69,0,1090,1087,1,0,0,0,1090,1091,1,0,0,0,1091,1094,1,0,0,0,1092,1093,
5,155,0,0,1093,1095,3,120,60,0,1094,1092,1,0,0,0,1094,1095,1,0,0,0,1095,
1098,1,0,0,0,1096,1097,5,155,0,0,1097,1099,3,122,61,0,1098,1096,1,0,0,0,
1098,1099,1,0,0,0,1099,1102,1,0,0,0,1100,1101,5,155,0,0,1101,1103,3,124,
62,0,1102,1100,1,0,0,0,1102,1103,1,0,0,0,1103,111,1,0,0,0,1104,1109,5,90,
0,0,1105,1107,5,155,0,0,1106,1105,1,0,0,0,1106,1107,1,0,0,0,1107,1108,1,
0,0,0,1108,1110,5,89,0,0,1109,1106,1,0,0,0,1109,1110,1,0,0,0,1110,1111,1,
0,0,0,1111,1112,5,155,0,0,1112,1113,3,114,57,0,1113,113,1,0,0,0,1114,1117,
3,116,58,0,1115,1116,5,155,0,0,1116,1118,3,120,60,0,1117,1115,1,0,0,0,1117,
1118,1,0,0,0,1118,1121,1,0,0,0,1119,1120,5,155,0,0,1120,1122,3,122,61,0,
1121,1119,1,0,0,0,1121,1122,1,0,0,0,1122,1125,1,0,0,0,1123,1124,5,155,0,
0,1124,1126,3,124,62,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,115,1,0,
0,0,1127,1138,5,12,0,0,1128,1130,5,155,0,0,1129,1128,1,0,0,0,1129,1130,1,
0,0,0,1130,1131,1,0,0,0,1131,1133,5,7,0,0,1132,1134,5,155,0,0,1133,1132,
1,0,0,0,1133,1134,1,0,0,0,1134,1135,1,0,0,0,1135,1137,3,118,59,0,1136,1129,
1,0,0,0,1137,1140,1,0,0,0,1138,1136,1,0,0,0,1138,1139,1,0,0,0,1139,1156,
1,0,0,0,1140,1138,1,0,0,0,1141,1152,3,118,59,0,1142,1144,5,155,0,0,1143,
1142,1,0,0,0,1143,1144,1,0,0,0,1144,1145,1,0,0,0,1145,1147,5,7,0,0,1146,
1148,5,155,0,0,1147,1146,1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,0,0,0,1149,
1151,3,118,59,0,1150,1143,1,0,0,0,1151,1154,1,0,0,0,1152,1150,1,0,0,0,1152,
1153,1,0,0,0,1153,1156,1,0,0,0,1154,1152,1,0,0,0,1155,1127,1,0,0,0,1155,
1141,1,0,0,0,1156,117,1,0,0,0,1157,1158,3,214,107,0,1158,1159,5,155,0,0,
1159,1160,5,72,0,0,1160,1161,5,155,0,0,1161,1162,3,286,143,0,1162,1165,1,
0,0,0,1163,1165,3,214,107,0,1164,1157,1,0,0,0,1164,1163,1,0,0,0,1165,119,
1,0,0,0,1166,1167,5,91,0,0,1167,1168,5,155,0,0,1168,1169,5,92,0,0,1169,1170,
5,155,0,0,1170,1178,3,126,63,0,1171,1173,5,7,0,0,1172,1174,5,155,0,0,1173,
1172,1,0,0,0,1173,1174,1,0,0,0,1174,1175,1,0,0,0,1175,1177,3,126,63,0,1176,
1171,1,0,0,0,1177,1180,1,0,0,0,1178,1176,1,0,0,0,1178,1179,1,0,0,0,1179,
121,1,0,0,0,1180,1178,1,0,0,0,1181,1182,7,0,0,0,1182,1183,5,155,0,0,1183,
1184,3,214,107,0,1184,123,1,0,0,0,1185,1186,5,95,0,0,1186,1187,5,155,0,0,
1187,1188,3,214,107,0,1188,125,1,0,0,0,1189,1194,3,214,107,0,1190,1192,5,
155,0,0,1191,1190,1,0,0,0,1191,1192,1,0,0,0,1192,1193,1,0,0,0,1193,1195,
7,1,0,0,1194,1191,1,0,0,0,1194,1195,1,0,0,0,1195,127,1,0,0,0,1196,1198,5,
155,0,0,1197,1196,1,0,0,0,1197,1198,1,0,0,0,1198,1236,1,0,0,0,1199,1200,
5,53,0,0,1200,1201,5,155,0,0,1201,1202,5,60,0,0,1202,1203,5,155,0,0,1203,
1204,3,286,143,0,1204,1205,3,206,103,0,1205,1206,5,3,0,0,1206,1207,3,298,
149,0,1207,1208,5,4,0,0,1208,1237,1,0,0,0,1209,1210,5,53,0,0,1210,1211,5,
155,0,0,1211,1212,5,100,0,0,1212,1213,5,155,0,0,1213,1214,5,61,0,0,1214,
1215,5,155,0,0,1215,1226,3,286,143,0,1216,1218,5,155,0,0,1217,1216,1,0,0,
0,1217,1218,1,0,0,0,1218,1219,1,0,0,0,1219,1221,5,7,0,0,1220,1222,5,155,
0,0,1221,1220,1,0,0,0,1221,1222,1,0,0,0,1222,1223,1,0,0,0,1223,1225,3,286,
143,0,1224,1217,1,0,0,0,1225,1228,1,0,0,0,1226,1224,1,0,0,0,1226,1227,1,
0,0,0,1227,1237,1,0,0,0,1228,1226,1,0,0,0,1229,1230,5,53,0,0,1230,1231,5,
155,0,0,1231,1232,5,101,0,0,1232,1233,5,155,0,0,1233,1234,3,286,143,0,1234,
1235,3,206,103,0,1235,1237,1,0,0,0,1236,1199,1,0,0,0,1236,1209,1,0,0,0,1236,
1229,1,0,0,0,1237,129,1,0,0,0,1238,1239,5,14,0,0,1239,1240,3,308,154,0,1240,
1241,5,3,0,0,1241,1242,3,308,154,0,1242,1245,5,2,0,0,1243,1246,5,131,0,0,
1244,1246,3,292,146,0,1245,1243,1,0,0,0,1245,1244,1,0,0,0,1246,1247,1,0,
0,0,1247,1248,5,4,0,0,1248,131,1,0,0,0,1249,1250,5,14,0,0,1250,1251,3,308,
154,0,1251,1254,5,3,0,0,1252,1255,5,131,0,0,1253,1255,3,292,146,0,1254,1252,
1,0,0,0,1254,1253,1,0,0,0,1255,1256,1,0,0,0,1256,1257,5,4,0,0,1257,133,1,
0,0,0,1258,1262,5,3,0,0,1259,1263,3,136,68,0,1260,1263,3,292,146,0,1261,
1263,5,12,0,0,1262,1259,1,0,0,0,1262,1260,1,0,0,0,1262,1261,1,0,0,0,1263,
1264,1,0,0,0,1264,1265,5,4,0,0,1265,135,1,0,0,0,1266,1277,3,300,150,0,1267,
1269,5,155,0,0,1268,1267,1,0,0,0,1268,1269,1,0,0,0,1269,1270,1,0,0,0,1270,
1272,5,7,0,0,1271,1273,5,155,0,0,1272,1271,1,0,0,0,1272,1273,1,0,0,0,1273,
1274,1,0,0,0,1274,1276,3,300,150,0,1275,1268,1,0,0,0,1276,1279,1,0,0,0,1277,
1275,1,0,0,0,1277,1278,1,0,0,0,1278,137,1,0,0,0,1279,1277,1,0,0,0,1280,1281,
5,104,0,0,1281,1283,5,155,0,0,1282,1284,5,112,0,0,1283,1282,1,0,0,0,1283,
1284,1,0,0,0,1284,1286,1,0,0,0,1285,1287,5,155,0,0,1286,1285,1,0,0,0,1286,
1287,1,0,0,0,1287,1288,1,0,0,0,1288,1290,5,66,0,0,1289,1291,5,155,0,0,1290,
1289,1,0,0,0,1290,1291,1,0,0,0,1291,1292,1,0,0,0,1292,1294,5,10,0,0,1293,
1295,5,155,0,0,1294,1293,1,0,0,0,1294,1295,1,0,0,0,1295,1296,1,0,0,0,1296,
1298,3,214,107,0,1297,1299,5,155,0,0,1298,1297,1,0,0,0,1298,1299,1,0,0,0,
1299,1300,1,0,0,0,1300,1301,5,11,0,0,1301,1322,1,0,0,0,1302,1303,5,104,0,
0,1303,1304,5,155,0,0,1304,1306,5,117,0,0,1305,1307,5,155,0,0,1306,1305,
1,0,0,0,1306,1307,1,0,0,0,1307,1308,1,0,0,0,1308,1310,5,10,0,0,1309,1311,
5,155,0,0,1310,1309,1,0,0,0,1310,1311,1,0,0,0,1311,1312,1,0,0,0,1312,1314,
3,214,107,0,1313,1315,5,155,0,0,1314,1313,1,0,0,0,1314,1315,1,0,0,0,1315,
1316,1,0,0,0,1316,1317,5,11,0,0,1317,1322,1,0,0,0,1318,1319,5,104,0,0,1319,
1320,5,155,0,0,1320,1322,3,214,107,0,1321,1280,1,0,0,0,1321,1302,1,0,0,0,
1321,1318,1,0,0,0,1322,139,1,0,0,0,1323,1334,3,142,71,0,1324,1326,5,155,
0,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,1327,1,0,0,0,1327,1329,5,7,
0,0,1328,1330,5,155,0,0,1329,1328,1,0,0,0,1329,1330,1,0,0,0,1330,1331,1,
0,0,0,1331,1333,3,142,71,0,1332,1325,1,0,0,0,1333,1336,1,0,0,0,1334,1332,
1,0,0,0,1334,1335,1,0,0,0,1335,141,1,0,0,0,1336,1334,1,0,0,0,1337,1339,3,
286,143,0,1338,1340,5,155,0,0,1339,1338,1,0,0,0,1339,1340,1,0,0,0,1340,1341,
1,0,0,0,1341,1343,5,2,0,0,1342,1344,5,155,0,0,1343,1342,1,0,0,0,1343,1344,
1,0,0,0,1344,1345,1,0,0,0,1345,1346,3,144,72,0,1346,1349,1,0,0,0,1347,1349,
3,144,72,0,1348,1337,1,0,0,0,1348,1347,1,0,0,0,1349,143,1,0,0,0,1350,1358,
3,146,73,0,1351,1353,3,148,74,0,1352,1351,1,0,0,0,1353,1356,1,0,0,0,1354,
1352,1,0,0,0,1354,1355,1,0,0,0,1355,1358,1,0,0,0,1356,1354,1,0,0,0,1357,
1350,1,0,0,0,1357,1354,1,0,0,0,1358,145,1,0,0,0,1359,1361,5,107,0,0,1360,
1362,5,155,0,0,1361,1360,1,0,0,0,1361,1362,1,0,0,0,1362,1363,1,0,0,0,1363,
1365,5,3,0,0,1364,1366,5,155,0,0,1365,1364,1,0,0,0,1365,1366,1,0,0,0,1366,
1367,1,0,0,0,1367,1369,3,148,74,0,1368,1370,5,155,0,0,1369,1368,1,0,0,0,
1369,1370,1,0,0,0,1370,1371,1,0,0,0,1371,1372,5,4,0,0,1372,1411,1,0,0,0,
1373,1375,5,108,0,0,1374,1376,5,155,0,0,1375,1374,1,0,0,0,1375,1376,1,0,
0,0,1376,1377,1,0,0,0,1377,1379,5,3,0,0,1378,1380,5,155,0,0,1379,1378,1,
0,0,0,1379,1380,1,0,0,0,1380,1381,1,0,0,0,1381,1383,3,148,74,0,1382,1384,
5,155,0,0,1383,1382,1,0,0,0,1383,1384,1,0,0,0,1384,1385,1,0,0,0,1385,1386,
5,4,0,0,1386,1411,1,0,0,0,1387,1388,5,57,0,0,1388,1389,5,155,0,0,1389,1390,
5,106,0,0,1390,1391,5,155,0,0,1391,1411,3,148,74,0,1392,1393,5,106,0,0,1393,
1394,5,155,0,0,1394,1397,3,300,150,0,1395,1396,5,155,0,0,1396,1398,5,105,
0,0,1397,1395,1,0,0,0,1397,1398,1,0,0,0,1398,1399,1,0,0,0,1399,1400,5,155,
0,0,1400,1401,3,148,74,0,1401,1411,1,0,0,0,1402,1403,5,120,0,0,1403,1404,
5,155,0,0,1404,1405,5,106,0,0,1405,1406,5,155,0,0,1406,1411,3,148,74,0,1407,
1408,5,120,0,0,1408,1409,5,155,0,0,1409,1411,3,148,74,0,1410,1359,1,0,0,
0,1410,1373,1,0,0,0,1410,1387,1,0,0,0,1410,1392,1,0,0,0,1410,1402,1,0,0,
0,1410,1407,1,0,0,0,1411,147,1,0,0,0,1412,1419,3,154,77,0,1413,1415,5,155,
0,0,1414,1413,1,0,0,0,1414,1415,1,0,0,0,1415,1416,1,0,0,0,1416,1418,3,156,
78,0,1417,1414,1,0,0,0,1418,1421,1,0,0,0,1419,1417,1,0,0,0,1419,1420,1,0,
0,0,1420,1430,1,0,0,0,1421,1419,1,0,0,0,1422,1430,3,162,81,0,1423,1425,3,
154,77,0,1424,1426,5,155,0,0,1425,1424,1,0,0,0,1425,1426,1,0,0,0,1426,1427,
1,0,0,0,1427,1428,3,162,81,0,1428,1430,1,0,0,0,1429,1412,1,0,0,0,1429,1422,
1,0,0,0,1429,1423,1,0,0,0,1430,149,1,0,0,0,1431,1432,5,3,0,0,1432,151,1,
0,0,0,1433,1434,5,4,0,0,1434,153,1,0,0,0,1435,1437,5,3,0,0,1436,1438,5,155,
0,0,1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,1443,1,0,0,0,1439,1441,3,286,
143,0,1440,1442,5,155,0,0,1441,1440,1,0,0,0,1441,1442,1,0,0,0,1442,1444,
1,0,0,0,1443,1439,1,0,0,0,1443,1444,1,0,0,0,1444,1449,1,0,0,0,1445,1447,
3,188,94,0,1446,1448,5,155,0,0,1447,1446,1,0,0,0,1447,1448,1,0,0,0,1448,
1450,1,0,0,0,1449,1445,1,0,0,0,1449,1450,1,0,0,0,1450,1455,1,0,0,0,1451,
1453,3,166,83,0,1452,1454,5,155,0,0,1453,1452,1,0,0,0,1453,1454,1,0,0,0,
1454,1456,1,0,0,0,1455,1451,1,0,0,0,1455,1456,1,0,0,0,1456,1464,1,0,0,0,
1457,1459,5,155,0,0,1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,1460,1,0,0,
0,1460,1462,3,138,69,0,1461,1463,5,155,0,0,1462,1461,1,0,0,0,1462,1463,1,
0,0,0,1463,1465,1,0,0,0,1464,1458,1,0,0,0,1464,1465,1,0,0,0,1465,1466,1,
0,0,0,1466,1467,5,4,0,0,1467,155,1,0,0,0,1468,1470,3,158,79,0,1469,1471,
5,155,0,0,1470,1469,1,0,0,0,1470,1471,1,0,0,0,1471,1473,1,0,0,0,1472,1474,
3,154,77,0,1473,1472,1,0,0,0,1473,1474,1,0,0,0,1474,157,1,0,0,0,1475,1477,
3,312,156,0,1476,1478,5,155,0,0,1477,1476,1,0,0,0,1477,1478,1,0,0,0,1478,
1479,1,0,0,0,1479,1481,3,316,158,0,1480,1482,5,155,0,0,1481,1480,1,0,0,0,
1481,1482,1,0,0,0,1482,1484,1,0,0,0,1483,1485,3,160,80,0,1484,1483,1,0,0,
0,1484,1485,1,0,0,0,1485,1487,1,0,0,0,1486,1488,5,155,0,0,1487,1486,1,0,
0,0,1487,1488,1,0,0,0,1488,1489,1,0,0,0,1489,1491,3,316,158,0,1490,1492,
5,155,0,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,1492,1493,1,0,0,0,1493,1494,
3,314,157,0,1494,1502,1,0,0,0,1495,1497,5,155,0,0,1496,1495,1,0,0,0,1496,
1497,1,0,0,0,1497,1498,1,0,0,0,1498,1500,3,164,82,0,1499,1501,5,155,0,0,
1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,1503,1,0,0,0,1502,1496,1,0,0,0,
1502,1503,1,0,0,0,1503,1577,1,0,0,0,1504,1506,3,312,156,0,1505,1507,5,155,
0,0,1506,1505,1,0,0,0,1506,1507,1,0,0,0,1507,1508,1,0,0,0,1508,1510,3,316,
158,0,1509,1511,5,155,0,0,1510,1509,1,0,0,0,1510,1511,1,0,0,0,1511,1513,
1,0,0,0,1512,1514,3,160,80,0,1513,1512,1,0,0,0,1513,1514,1,0,0,0,1514,1516,
1,0,0,0,1515,1517,5,155,0,0,1516,1515,1,0,0,0,1516,1517,1,0,0,0,1517,1518,
1,0,0,0,1518,1519,3,316,158,0,1519,1527,1,0,0,0,1520,1522,5,155,0,0,1521,
1520,1,0,0,0,1521,1522,1,0,0,0,1522,1523,1,0,0,0,1523,1525,3,164,82,0,1524,
1526,5,155,0,0,1525,1524,1,0,0,0,1525,1526,1,0,0,0,1526,1528,1,0,0,0,1527,
1521,1,0,0,0,1527,1528,1,0,0,0,1528,1577,1,0,0,0,1529,1531,3,316,158,0,1530,
1532,5,155,0,0,1531,1530,1,0,0,0,1531,1532,1,0,0,0,1532,1534,1,0,0,0,1533,
1535,3,160,80,0,1534,1533,1,0,0,0,1534,1535,1,0,0,0,1535,1537,1,0,0,0,1536,
1538,5,155,0,0,1537,1536,1,0,0,0,1537,1538,1,0,0,0,1538,1539,1,0,0,0,1539,
1541,3,316,158,0,1540,1542,5,155,0,0,1541,1540,1,0,0,0,1541,1542,1,0,0,0,
1542,1543,1,0,0,0,1543,1544,3,314,157,0,1544,1552,1,0,0,0,1545,1547,5,155,
0,0,1546,1545,1,0,0,0,1546,1547,1,0,0,0,1547,1548,1,0,0,0,1548,1550,3,164,
82,0,1549,1551,5,155,0,0,1550,1549,1,0,0,0,1550,1551,1,0,0,0,1551,1553,1,
0,0,0,1552,1546,1,0,0,0,1552,1553,1,0,0,0,1553,1577,1,0,0,0,1554,1556,3,
316,158,0,1555,1557,5,155,0,0,1556,1555,1,0,0,0,1556,1557,1,0,0,0,1557,1559,
1,0,0,0,1558,1560,3,160,80,0,1559,1558,1,0,0,0,1559,1560,1,0,0,0,1560,1562,
1,0,0,0,1561,1563,5,155,0,0,1562,1561,1,0,0,0,1562,1563,1,0,0,0,1563,1564,
1,0,0,0,1564,1565,3,316,158,0,1565,1573,1,0,0,0,1566,1568,5,155,0,0,1567,
1566,1,0,0,0,1567,1568,1,0,0,0,1568,1569,1,0,0,0,1569,1571,3,164,82,0,1570,
1572,5,155,0,0,1571,1570,1,0,0,0,1571,1572,1,0,0,0,1572,1574,1,0,0,0,1573,
1567,1,0,0,0,1573,1574,1,0,0,0,1574,1577,1,0,0,0,1575,1577,3,162,81,0,1576,
1475,1,0,0,0,1576,1504,1,0,0,0,1576,1529,1,0,0,0,1576,1554,1,0,0,0,1576,
1575,1,0,0,0,1577,159,1,0,0,0,1578,1580,5,5,0,0,1579,1581,5,155,0,0,1580,
1579,1,0,0,0,1580,1581,1,0,0,0,1581,1586,1,0,0,0,1582,1584,3,286,143,0,1583,
1585,5,155,0,0,1584,1583,1,0,0,0,1584,1585,1,0,0,0,1585,1587,1,0,0,0,1586,
1582,1,0,0,0,1586,1587,1,0,0,0,1587,1592,1,0,0,0,1588,1590,3,170,85,0,1589,
1591,5,155,0,0,1590,1589,1,0,0,0,1590,1591,1,0,0,0,1591,1593,1,0,0,0,1592,
1588,1,0,0,0,1592,1593,1,0,0,0,1593,1595,1,0,0,0,1594,1596,3,208,104,0,1595,
1594,1,0,0,0,1595,1596,1,0,0,0,1596,1601,1,0,0,0,1597,1599,3,166,83,0,1598,
1600,5,155,0,0,1599,1598,1,0,0,0,1599,1600,1,0,0,0,1600,1602,1,0,0,0,1601,
1597,1,0,0,0,1601,1602,1,0,0,0,1602,1610,1,0,0,0,1603,1605,5,155,0,0,1604,
1603,1,0,0,0,1604,1605,1,0,0,0,1605,1606,1,0,0,0,1606,1608,3,138,69,0,1607,
1609,5,155,0,0,1608,1607,1,0,0,0,1608,1609,1,0,0,0,1609,1611,1,0,0,0,1610,
1604,1,0,0,0,1610,1611,1,0,0,0,1611,1612,1,0,0,0,1612,1613,5,6,0,0,1613,
161,1,0,0,0,1614,1616,5,155,0,0,1615,1614,1,0,0,0,1615,1616,1,0,0,0,1616,
1617,1,0,0,0,1617,1619,3,150,75,0,1618,1620,5,155,0,0,1619,1618,1,0,0,0,
1619,1620,1,0,0,0,1620,1621,1,0,0,0,1621,1623,3,148,74,0,1622,1624,5,155,
0,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,1624,1632,1,0,0,0,1625,1627,5,155,
0,0,1626,1625,1,0,0,0,1626,1627,1,0,0,0,1627,1628,1,0,0,0,1628,1630,3,138,
69,0,1629,1631,5,155,0,0,1630,1629,1,0,0,0,1630,1631,1,0,0,0,1631,1633,1,
0,0,0,1632,1626,1,0,0,0,1632,1633,1,0,0,0,1633,1634,1,0,0,0,1634,1642,3,
152,76,0,1635,1637,5,155,0,0,1636,1635,1,0,0,0,1636,1637,1,0,0,0,1637,1638,
1,0,0,0,1638,1640,3,164,82,0,1639,1641,5,155,0,0,1640,1639,1,0,0,0,1640,
1641,1,0,0,0,1641,1643,1,0,0,0,1642,1636,1,0,0,0,1642,1643,1,0,0,0,1643,
163,1,0,0,0,1644,1646,5,10,0,0,1645,1647,5,155,0,0,1646,1645,1,0,0,0,1646,
1647,1,0,0,0,1647,1649,1,0,0,0,1648,1650,3,300,150,0,1649,1648,1,0,0,0,1649,
1650,1,0,0,0,1650,1652,1,0,0,0,1651,1653,5,155,0,0,1652,1651,1,0,0,0,1652,
1653,1,0,0,0,1653,1654,1,0,0,0,1654,1656,5,7,0,0,1655,1657,5,155,0,0,1656,
1655,1,0,0,0,1656,1657,1,0,0,0,1657,1659,1,0,0,0,1658,1660,3,300,150,0,1659,
1658,1,0,0,0,1659,1660,1,0,0,0,1660,1662,1,0,0,0,1661,1663,5,155,0,0,1662,
1661,1,0,0,0,1662,1663,1,0,0,0,1663,1664,1,0,0,0,1664,1724,5,11,0,0,1665,
1667,5,10,0,0,1666,1668,5,155,0,0,1667,1666,1,0,0,0,1667,1668,1,0,0,0,1668,
1670,1,0,0,0,1669,1671,3,300,150,0,1670,1669,1,0,0,0,1670,1671,1,0,0,0,1671,
1673,1,0,0,0,1672,1674,5,155,0,0,1673,1672,1,0,0,0,1673,1674,1,0,0,0,1674,
1676,1,0,0,0,1675,1677,5,7,0,0,1676,1675,1,0,0,0,1676,1677,1,0,0,0,1677,
1679,1,0,0,0,1678,1680,5,155,0,0,1679,1678,1,0,0,0,1679,1680,1,0,0,0,1680,
1681,1,0,0,0,1681,1724,5,11,0,0,1682,1684,5,10,0,0,1683,1685,5,155,0,0,1684,
1683,1,0,0,0,1684,1685,1,0,0,0,1685,1687,1,0,0,0,1686,1688,3,300,150,0,1687,
1686,1,0,0,0,1687,1688,1,0,0,0,1688,1690,1,0,0,0,1689,1691,5,155,0,0,1690,
1689,1,0,0,0,1690,1691,1,0,0,0,1691,1692,1,0,0,0,1692,1724,5,11,0,0,1693,
1695,5,10,0,0,1694,1696,5,155,0,0,1695,1694,1,0,0,0,1695,1696,1,0,0,0,1696,
1698,1,0,0,0,1697,1699,5,7,0,0,1698,1697,1,0,0,0,1698,1699,1,0,0,0,1699,
1701,1,0,0,0,1700,1702,5,155,0,0,1701,1700,1,0,0,0,1701,1702,1,0,0,0,1702,
1704,1,0,0,0,1703,1705,3,300,150,0,1704,1703,1,0,0,0,1704,1705,1,0,0,0,1705,
1707,1,0,0,0,1706,1708,5,155,0,0,1707,1706,1,0,0,0,1707,1708,1,0,0,0,1708,
1709,1,0,0,0,1709,1724,5,11,0,0,1710,1712,5,10,0,0,1711,1713,5,155,0,0,1712,
1711,1,0,0,0,1712,1713,1,0,0,0,1713,1715,1,0,0,0,1714,1716,5,7,0,0,1715,
1714,1,0,0,0,1715,1716,1,0,0,0,1716,1718,1,0,0,0,1717,1719,5,155,0,0,1718,
1717,1,0,0,0,1718,1719,1,0,0,0,1719,1720,1,0,0,0,1720,1724,5,11,0,0,1721,
1724,5,15,0,0,1722,1724,5,12,0,0,1723,1644,1,0,0,0,1723,1665,1,0,0,0,1723,
1682,1,0,0,0,1723,1693,1,0,0,0,1723,1710,1,0,0,0,1723,1721,1,0,0,0,1723,
1722,1,0,0,0,1724,165,1,0,0,0,1725,1729,3,290,145,0,1726,1729,3,294,147,
0,1727,1729,3,292,146,0,1728,1725,1,0,0,0,1728,1726,1,0,0,0,1728,1727,1,
0,0,0,1729,167,1,0,0,0,1730,1732,5,14,0,0,1731,1733,5,155,0,0,1732,1731,
1,0,0,0,1732,1733,1,0,0,0,1733,1734,1,0,0,0,1734,1735,3,212,106,0,1735,169,
1,0,0,0,1736,1738,5,14,0,0,1737,1739,5,155,0,0,1738,1737,1,0,0,0,1738,1739,
1,0,0,0,1739,1740,1,0,0,0,1740,1754,3,212,106,0,1741,1743,5,155,0,0,1742,
1741,1,0,0,0,1742,1743,1,0,0,0,1743,1744,1,0,0,0,1744,1746,5,9,0,0,1745,
1747,5,14,0,0,1746,1745,1,0,0,0,1746,1747,1,0,0,0,1747,1749,1,0,0,0,1748,
1750,5,155,0,0,1749,1748,1,0,0,0,1749,1750,1,0,0,0,1750,1751,1,0,0,0,1751,
1753,3,212,106,0,1752,1742,1,0,0,0,1753,1756,1,0,0,0,1754,1752,1,0,0,0,1754,
1755,1,0,0,0,1755,1763,1,0,0,0,1756,1754,1,0,0,0,1757,1759,5,14,0,0,1758,
1760,5,155,0,0,1759,1758,1,0,0,0,1759,1760,1,0,0,0,1760,1761,1,0,0,0,1761,
1763,3,172,86,0,1762,1736,1,0,0,0,1762,1757,1,0,0,0,1763,171,1,0,0,0,1764,
1765,3,174,87,0,1765,173,1,0,0,0,1766,1777,3,176,88,0,1767,1769,5,155,0,
0,1768,1767,1,0,0,0,1768,1769,1,0,0,0,1769,1770,1,0,0,0,1770,1772,5,9,0,
0,1771,1773,5,155,0,0,1772,1771,1,0,0,0,1772,1773,1,0,0,0,1773,1774,1,0,
0,0,1774,1776,3,176,88,0,1775,1768,1,0,0,0,1776,1779,1,0,0,0,1777,1775,1,
0,0,0,1777,1778,1,0,0,0,1778,175,1,0,0,0,1779,1777,1,0,0,0,1780,1791,3,178,
89,0,1781,1783,5,155,0,0,1782,1781,1,0,0,0,1782,1783,1,0,0,0,1783,1784,1,
0,0,0,1784,1786,5,16,0,0,1785,1787,5,155,0,0,1786,1785,1,0,0,0,1786,1787,
1,0,0,0,1787,1788,1,0,0,0,1788,1790,3,178,89,0,1789,1782,1,0,0,0,1790,1793,
1,0,0,0,1791,1789,1,0,0,0,1791,1792,1,0,0,0,1792,177,1,0,0,0,1793,1791,1,
0,0,0,1794,1796,5,155,0,0,1795,1794,1,0,0,0,1795,1796,1,0,0,0,1796,1797,
1,0,0,0,1797,1799,5,17,0,0,1798,1800,5,155,0,0,1799,1798,1,0,0,0,1799,1800,
1,0,0,0,1800,1802,1,0,0,0,1801,1795,1,0,0,0,1801,1802,1,0,0,0,1802,1803,
1,0,0,0,1803,1805,3,180,90,0,1804,1806,5,155,0,0,1805,1804,1,0,0,0,1805,
1806,1,0,0,0,1806,179,1,0,0,0,1807,1814,3,212,106,0,1808,1810,5,155,0,0,
1809,1808,1,0,0,0,1809,1810,1,0,0,0,1810,1811,1,0,0,0,1811,1813,3,172,86,
0,1812,1809,1,0,0,0,1813,1816,1,0,0,0,1814,1812,1,0,0,0,1814,1815,1,0,0,
0,1815,1821,1,0,0,0,1816,1814,1,0,0,0,1817,1821,3,182,91,0,1818,1821,3,184,
92,0,1819,1821,3,186,93,0,1820,1807,1,0,0,0,1820,1817,1,0,0,0,1820,1818,
1,0,0,0,1820,1819,1,0,0,0,1821,181,1,0,0,0,1822,1824,5,155,0,0,1823,1822,
1,0,0,0,1823,1824,1,0,0,0,1824,1825,1,0,0,0,1825,1827,5,3,0,0,1826,1828,
5,155,0,0,1827,1826,1,0,0,0,1827,1828,1,0,0,0,1828,1829,1,0,0,0,1829,1831,
3,172,86,0,1830,1832,5,155,0,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,
1833,1,0,0,0,1833,1835,5,4,0,0,1834,1836,5,155,0,0,1835,1834,1,0,0,0,1835,
1836,1,0,0,0,1836,183,1,0,0,0,1837,1839,5,155,0,0,1838,1837,1,0,0,0,1838,
1839,1,0,0,0,1839,1840,1,0,0,0,1840,1842,5,17,0,0,1841,1843,5,155,0,0,1842,
1841,1,0,0,0,1842,1843,1,0,0,0,1843,1844,1,0,0,0,1844,1846,3,172,86,0,1845,
1847,5,155,0,0,1846,1845,1,0,0,0,1846,1847,1,0,0,0,1847,185,1,0,0,0,1848,
1850,5,155,0,0,1849,1848,1,0,0,0,1849,1850,1,0,0,0,1850,1851,1,0,0,0,1851,
1853,5,18,0,0,1852,1854,5,155,0,0,1853,1852,1,0,0,0,1853,1854,1,0,0,0,1854,
1858,1,0,0,0,1855,1857,3,172,86,0,1856,1855,1,0,0,0,1857,1860,1,0,0,0,1858,
1856,1,0,0,0,1858,1859,1,0,0,0,1859,187,1,0,0,0,1860,1858,1,0,0,0,1861,1868,
3,206,103,0,1862,1864,5,155,0,0,1863,1862,1,0,0,0,1863,1864,1,0,0,0,1864,
1865,1,0,0,0,1865,1867,3,206,103,0,1866,1863,1,0,0,0,1867,1870,1,0,0,0,1868,
1866,1,0,0,0,1868,1869,1,0,0,0,1869,1877,1,0,0,0,1870,1868,1,0,0,0,1871,
1873,5,14,0,0,1872,1874,5,155,0,0,1873,1872,1,0,0,0,1873,1874,1,0,0,0,1874,
1875,1,0,0,0,1875,1877,3,190,95,0,1876,1861,1,0,0,0,1876,1871,1,0,0,0,1877,
189,1,0,0,0,1878,1879,3,192,96,0,1879,191,1,0,0,0,1880,1891,3,194,97,0,1881,
1883,5,155,0,0,1882,1881,1,0,0,0,1882,1883,1,0,0,0,1883,1884,1,0,0,0,1884,
1886,5,9,0,0,1885,1887,5,155,0,0,1886,1885,1,0,0,0,1886,1887,1,0,0,0,1887,
1888,1,0,0,0,1888,1890,3,194,97,0,1889,1882,1,0,0,0,1890,1893,1,0,0,0,1891,
1889,1,0,0,0,1891,1892,1,0,0,0,1892,193,1,0,0,0,1893,1891,1,0,0,0,1894,1905,
3,196,98,0,1895,1897,5,155,0,0,1896,1895,1,0,0,0,1896,1897,1,0,0,0,1897,
1898,1,0,0,0,1898,1900,5,16,0,0,1899,1901,5,155,0,0,1900,1899,1,0,0,0,1900,
1901,1,0,0,0,1901,1902,1,0,0,0,1902,1904,3,196,98,0,1903,1896,1,0,0,0,1904,
1907,1,0,0,0,1905,1903,1,0,0,0,1905,1906,1,0,0,0,1906,195,1,0,0,0,1907,1905,
1,0,0,0,1908,1910,5,155,0,0,1909,1908,1,0,0,0,1909,1910,1,0,0,0,1910,1911,
1,0,0,0,1911,1913,5,17,0,0,1912,1914,5,155,0,0,1913,1912,1,0,0,0,1913,1914,
1,0,0,0,1914,1916,1,0,0,0,1915,1909,1,0,0,0,1915,1916,1,0,0,0,1916,1917,
1,0,0,0,1917,1919,3,198,99,0,1918,1920,5,155,0,0,1919,1918,1,0,0,0,1919,
1920,1,0,0,0,1920,197,1,0,0,0,1921,1928,3,210,105,0,1922,1924,5,155,0,0,
1923,1922,1,0,0,0,1923,1924,1,0,0,0,1924,1925,1,0,0,0,1925,1927,3,190,95,
0,1926,1923,1,0,0,0,1927,1930,1,0,0,0,1928,1926,1,0,0,0,1928,1929,1,0,0,
0,1929,1935,1,0,0,0,1930,1928,1,0,0,0,1931,1935,3,200,100,0,1932,1935,3,
202,101,0,1933,1935,3,204,102,0,1934,1921,1,0,0,0,1934,1931,1,0,0,0,1934,
1932,1,0,0,0,1934,1933,1,0,0,0,1935,199,1,0,0,0,1936,1938,5,155,0,0,1937,
1936,1,0,0,0,1937,1938,1,0,0,0,1938,1939,1,0,0,0,1939,1941,5,3,0,0,1940,
1942,5,155,0,0,1941,1940,1,0,0,0,1941,1942,1,0,0,0,1942,1943,1,0,0,0,1943,
1945,3,190,95,0,1944,1946,5,155,0,0,1945,1944,1,0,0,0,1945,1946,1,0,0,0,
1946,1947,1,0,0,0,1947,1949,5,4,0,0,1948,1950,5,155,0,0,1949,1948,1,0,0,
0,1949,1950,1,0,0,0,1950,201,1,0,0,0,1951,1953,5,155,0,0,1952,1951,1,0,0,
0,1952,1953,1,0,0,0,1953,1954,1,0,0,0,1954,1956,5,17,0,0,1955,1957,5,155,
0,0,1956,1955,1,0,0,0,1956,1957,1,0,0,0,1957,1958,1,0,0,0,1958,1960,3,190,
95,0,1959,1961,5,155,0,0,1960,1959,1,0,0,0,1960,1961,1,0,0,0,1961,203,1,
0,0,0,1962,1964,5,155,0,0,1963,1962,1,0,0,0,1963,1964,1,0,0,0,1964,1965,
1,0,0,0,1965,1967,5,18,0,0,1966,1968,5,155,0,0,1967,1966,1,0,0,0,1967,1968,
1,0,0,0,1968,1972,1,0,0,0,1969,1971,3,190,95,0,1970,1969,1,0,0,0,1971,1974,
1,0,0,0,1972,1970,1,0,0,0,1972,1973,1,0,0,0,1973,205,1,0,0,0,1974,1972,1,
0,0,0,1975,1977,5,14,0,0,1976,1978,5,155,0,0,1977,1976,1,0,0,0,1977,1978,
1,0,0,0,1978,1979,1,0,0,0,1979,1980,3,210,105,0,1980,207,1,0,0,0,1981,1983,
5,12,0,0,1982,1984,5,155,0,0,1983,1982,1,0,0,0,1983,1984,1,0,0,0,1984,1989,
1,0,0,0,1985,1987,3,300,150,0,1986,1988,5,155,0,0,1987,1986,1,0,0,0,1987,
1988,1,0,0,0,1988,1990,1,0,0,0,1989,1985,1,0,0,0,1989,1990,1,0,0,0,1990,
2001,1,0,0,0,1991,1993,5,19,0,0,1992,1994,5,155,0,0,1993,1992,1,0,0,0,1993,
1994,1,0,0,0,1994,1999,1,0,0,0,1995,1997,3,300,150,0,1996,1998,5,155,0,0,
1997,1996,1,0,0,0,1997,1998,1,0,0,0,1998,2000,1,0,0,0,1999,1995,1,0,0,0,
1999,2000,1,0,0,0,2000,2002,1,0,0,0,2001,1991,1,0,0,0,2001,2002,1,0,0,0,
2002,209,1,0,0,0,2003,2004,3,304,152,0,2004,211,1,0,0,0,2005,2006,3,304,
152,0,2006,213,1,0,0,0,2007,2008,3,216,108,0,2008,215,1,0,0,0,2009,2016,
3,218,109,0,2010,2011,5,155,0,0,2011,2012,5,109,0,0,2012,2013,5,155,0,0,
2013,2015,3,218,109,0,2014,2010,1,0,0,0,2015,2018,1,0,0,0,2016,2014,1,0,
0,0,2016,2017,1,0,0,0,2017,217,1,0,0,0,2018,2016,1,0,0,0,2019,2026,3,220,
110,0,2020,2021,5,155,0,0,2021,2022,5,110,0,0,2022,2023,5,155,0,0,2023,2025,
3,220,110,0,2024,2020,1,0,0,0,2025,2028,1,0,0,0,2026,2024,1,0,0,0,2026,2027,
1,0,0,0,2027,219,1,0,0,0,2028,2026,1,0,0,0,2029,2036,3,222,111,0,2030,2031,
5,155,0,0,2031,2032,5,111,0,0,2032,2033,5,155,0,0,2033,2035,3,222,111,0,
2034,2030,1,0,0,0,2035,2038,1,0,0,0,2036,2034,1,0,0,0,2036,2037,1,0,0,0,
2037,221,1,0,0,0,2038,2036,1,0,0,0,2039,2041,5,112,0,0,2040,2042,5,155,0,
0,2041,2040,1,0,0,0,2041,2042,1,0,0,0,2042,2044,1,0,0,0,2043,2039,1,0,0,
0,2044,2047,1,0,0,0,2045,2043,1,0,0,0,2045,2046,1,0,0,0,2046,2048,1,0,0,
0,2047,2045,1,0,0,0,2048,2049,3,224,112,0,2049,223,1,0,0,0,2050,2057,3,226,
113,0,2051,2053,5,155,0,0,2052,2051,1,0,0,0,2052,2053,1,0,0,0,2053,2054,
1,0,0,0,2054,2056,3,252,126,0,2055,2052,1,0,0,0,2056,2059,1,0,0,0,2057,2055,
1,0,0,0,2057,2058,1,0,0,0,2058,225,1,0,0,0,2059,2057,1,0,0,0,2060,2079,3,
228,114,0,2061,2063,5,155,0,0,2062,2061,1,0,0,0,2062,2063,1,0,0,0,2063,2064,
1,0,0,0,2064,2066,5,15,0,0,2065,2067,5,155,0,0,2066,2065,1,0,0,0,2066,2067,
1,0,0,0,2067,2068,1,0,0,0,2068,2078,3,228,114,0,2069,2071,5,155,0,0,2070,
2069,1,0,0,0,2070,2071,1,0,0,0,2071,2072,1,0,0,0,2072,2074,5,13,0,0,2073,
2075,5,155,0,0,2074,2073,1,0,0,0,2074,2075,1,0,0,0,2075,2076,1,0,0,0,2076,
2078,3,228,114,0,2077,2062,1,0,0,0,2077,2070,1,0,0,0,2078,2081,1,0,0,0,2079,
2077,1,0,0,0,2079,2080,1,0,0,0,2080,227,1,0,0,0,2081,2079,1,0,0,0,2082,2109,
3,230,115,0,2083,2085,5,155,0,0,2084,2083,1,0,0,0,2084,2085,1,0,0,0,2085,
2086,1,0,0,0,2086,2088,5,12,0,0,2087,2089,5,155,0,0,2088,2087,1,0,0,0,2088,
2089,1,0,0,0,2089,2090,1,0,0,0,2090,2108,3,230,115,0,2091,2093,5,155,0,0,
2092,2091,1,0,0,0,2092,2093,1,0,0,0,2093,2094,1,0,0,0,2094,2096,5,20,0,0,
2095,2097,5,155,0,0,2096,2095,1,0,0,0,2096,2097,1,0,0,0,2097,2098,1,0,0,
0,2098,2108,3,230,115,0,2099,2101,5,155,0,0,2100,2099,1,0,0,0,2100,2101,
1,0,0,0,2101,2102,1,0,0,0,2102,2104,5,18,0,0,2103,2105,5,155,0,0,2104,2103,
1,0,0,0,2104,2105,1,0,0,0,2105,2106,1,0,0,0,2106,2108,3,230,115,0,2107,2084,
1,0,0,0,2107,2092,1,0,0,0,2107,2100,1,0,0,0,2108,2111,1,0,0,0,2109,2107,
1,0,0,0,2109,2110,1,0,0,0,2110,229,1,0,0,0,2111,2109,1,0,0,0,2112,2123,3,
232,116,0,2113,2115,5,155,0,0,2114,2113,1,0,0,0,2114,2115,1,0,0,0,2115,2116,
1,0,0,0,2116,2118,5,21,0,0,2117,2119,5,155,0,0,2118,2117,1,0,0,0,2118,2119,
1,0,0,0,2119,2120,1,0,0,0,2120,2122,3,232,116,0,2121,2114,1,0,0,0,2122,2125,
1,0,0,0,2123,2121,1,0,0,0,2123,2124,1,0,0,0,2124,231,1,0,0,0,2125,2123,1,
0,0,0,2126,2128,7,2,0,0,2127,2129,5,155,0,0,2128,2127,1,0,0,0,2128,2129,
1,0,0,0,2129,2131,1,0,0,0,2130,2126,1,0,0,0,2131,2134,1,0,0,0,2132,2130,
1,0,0,0,2132,2133,1,0,0,0,2133,2135,1,0,0,0,2134,2132,1,0,0,0,2135,2136,
3,234,117,0,2136,233,1,0,0,0,2137,2208,3,238,119,0,2138,2140,5,155,0,0,2139,
2138,1,0,0,0,2139,2140,1,0,0,0,2140,2141,1,0,0,0,2141,2142,5,5,0,0,2142,
2143,3,214,107,0,2143,2144,5,6,0,0,2144,2207,1,0,0,0,2145,2147,5,155,0,0,
2146,2145,1,0,0,0,2146,2147,1,0,0,0,2147,2148,1,0,0,0,2148,2149,5,5,0,0,
2149,2150,3,214,107,0,2150,2151,5,6,0,0,2151,2158,1,0,0,0,2152,2154,5,155,
0,0,2153,2152,1,0,0,0,2153,2154,1,0,0,0,2154,2155,1,0,0,0,2155,2157,3,280,
140,0,2156,2153,1,0,0,0,2157,2160,1,0,0,0,2158,2156,1,0,0,0,2158,2159,1,
0,0,0,2159,2162,1,0,0,0,2160,2158,1,0,0,0,2161,2146,1,0,0,0,2162,2163,1,
0,0,0,2163,2161,1,0,0,0,2163,2164,1,0,0,0,2164,2207,1,0,0,0,2165,2167,5,
155,0,0,2166,2165,1,0,0,0,2166,2167,1,0,0,0,2167,2168,1,0,0,0,2168,2170,
5,5,0,0,2169,2171,3,214,107,0,2170,2169,1,0,0,0,2170,2171,1,0,0,0,2171,2172,
1,0,0,0,2172,2174,5,19,0,0,2173,2175,3,214,107,0,2174,2173,1,0,0,0,2174,
2175,1,0,0,0,2175,2176,1,0,0,0,2176,2207,5,6,0,0,2177,2191,3,236,118,0,2178,
2179,5,155,0,0,2179,2191,5,83,0,0,2180,2181,5,155,0,0,2181,2182,5,113,0,
0,2182,2183,5,155,0,0,2183,2191,5,69,0,0,2184,2185,5,155,0,0,2185,2186,5,
114,0,0,2186,2187,5,155,0,0,2187,2191,5,69,0,0,2188,2189,5,155,0,0,2189,
2191,5,115,0,0,2190,2177,1,0,0,0,2190,2178,1,0,0,0,2190,2180,1,0,0,0,2190,
2184,1,0,0,0,2190,2188,1,0,0,0,2191,2193,1,0,0,0,2192,2194,5,155,0,0,2193,
2192,1,0,0,0,2193,2194,1,0,0,0,2194,2195,1,0,0,0,2195,2207,3,238,119,0,2196,
2197,5,155,0,0,2197,2198,5,64,0,0,2198,2199,5,155,0,0,2199,2207,5,116,0,
0,2200,2201,5,155,0,0,2201,2202,5,64,0,0,2202,2203,5,155,0,0,2203,2204,5,
112,0,0,2204,2205,5,155,0,0,2205,2207,5,116,0,0,2206,2139,1,0,0,0,2206,2161,
1,0,0,0,2206,2166,1,0,0,0,2206,2190,1,0,0,0,2206,2196,1,0,0,0,2206,2200,
1,0,0,0,2207,2210,1,0,0,0,2208,2206,1,0,0,0,2208,2209,1,0,0,0,2209,2213,
1,0,0,0,2210,2208,1,0,0,0,2211,2213,3,262,131,0,2212,2137,1,0,0,0,2212,2211,
1,0,0,0,2213,235,1,0,0,0,2214,2216,5,155,0,0,2215,2214,1,0,0,0,2215,2216,
1,0,0,0,2216,2217,1,0,0,0,2217,2218,5,22,0,0,2218,237,1,0,0,0,2219,2226,
3,242,121,0,2220,2222,5,155,0,0,2221,2220,1,0,0,0,2221,2222,1,0,0,0,2222,
2223,1,0,0,0,2223,2225,3,280,140,0,2224,2221,1,0,0,0,2225,2228,1,0,0,0,2226,
2224,1,0,0,0,2226,2227,1,0,0,0,2227,2233,1,0,0,0,2228,2226,1,0,0,0,2229,
2231,5,155,0,0,2230,2229,1,0,0,0,2230,2231,1,0,0,0,2231,2232,1,0,0,0,2232,
2234,3,188,94,0,2233,2230,1,0,0,0,2233,2234,1,0,0,0,2234,239,1,0,0,0,2235,
2237,3,286,143,0,2236,2238,5,155,0,0,2237,2236,1,0,0,0,2237,2238,1,0,0,0,
2238,2239,1,0,0,0,2239,2241,5,10,0,0,2240,2242,5,155,0,0,2241,2240,1,0,0,
0,2241,2242,1,0,0,0,2242,2243,1,0,0,0,2243,2245,3,280,140,0,2244,2246,5,
155,0,0,2245,2244,1,0,0,0,2245,2246,1,0,0,0,2246,2260,1,0,0,0,2247,2249,
5,155,0,0,2248,2247,1,0,0,0,2248,2249,1,0,0,0,2249,2250,1,0,0,0,2250,2252,
5,7,0,0,2251,2253,5,155,0,0,2252,2251,1,0,0,0,2252,2253,1,0,0,0,2253,2254,
1,0,0,0,2254,2256,3,280,140,0,2255,2257,5,155,0,0,2256,2255,1,0,0,0,2256,
2257,1,0,0,0,2257,2259,1,0,0,0,2258,2248,1,0,0,0,2259,2262,1,0,0,0,2260,
2258,1,0,0,0,2260,2261,1,0,0,0,2261,2263,1,0,0,0,2262,2260,1,0,0,0,2263,
2264,5,11,0,0,2264,241,1,0,0,0,2265,2430,3,244,122,0,2266,2430,3,240,120,
0,2267,2430,3,294,147,0,2268,2430,3,292,146,0,2269,2430,3,282,141,0,2270,
2272,5,117,0,0,2271,2273,5,155,0,0,2272,2271,1,0,0,0,2272,2273,1,0,0,0,2273,
2274,1,0,0,0,2274,2276,5,3,0,0,2275,2277,5,155,0,0,2276,2275,1,0,0,0,2276,
2277,1,0,0,0,2277,2278,1,0,0,0,2278,2280,5,12,0,0,2279,2281,5,155,0,0,2280,
2279,1,0,0,0,2280,2281,1,0,0,0,2281,2282,1,0,0,0,2282,2430,5,4,0,0,2283,
2430,3,276,138,0,2284,2430,3,278,139,0,2285,2287,5,118,0,0,2286,2288,5,155,
0,0,2287,2286,1,0,0,0,2287,2288,1,0,0,0,2288,2289,1,0,0,0,2289,2291,5,3,
0,0,2290,2292,5,155,0,0,2291,2290,1,0,0,0,2291,2292,1,0,0,0,2292,2293,1,
0,0,0,2293,2295,3,258,129,0,2294,2296,5,155,0,0,2295,2294,1,0,0,0,2295,2296,
1,0,0,0,2296,2297,1,0,0,0,2297,2298,5,4,0,0,2298,2430,1,0,0,0,2299,2301,
5,119,0,0,2300,2302,5,155,0,0,2301,2300,1,0,0,0,2301,2302,1,0,0,0,2302,2303,
1,0,0,0,2303,2305,5,3,0,0,2304,2306,5,155,0,0,2305,2304,1,0,0,0,2305,2306,
1,0,0,0,2306,2307,1,0,0,0,2307,2309,3,258,129,0,2308,2310,5,155,0,0,2309,
2308,1,0,0,0,2309,2310,1,0,0,0,2310,2319,1,0,0,0,2311,2313,5,155,0,0,2312,
2311,1,0,0,0,2312,2313,1,0,0,0,2313,2314,1,0,0,0,2314,2316,5,9,0,0,2315,
2317,5,155,0,0,2316,2315,1,0,0,0,2316,2317,1,0,0,0,2317,2318,1,0,0,0,2318,
2320,3,214,107,0,2319,2312,1,0,0,0,2319,2320,1,0,0,0,2320,2322,1,0,0,0,2321,
2323,5,155,0,0,2322,2321,1,0,0,0,2322,2323,1,0,0,0,2323,2324,1,0,0,0,2324,
2325,5,4,0,0,2325,2430,1,0,0,0,2326,2430,3,250,125,0,2327,2329,5,57,0,0,
2328,2330,5,155,0,0,2329,2328,1,0,0,0,2329,2330,1,0,0,0,2330,2331,1,0,0,
0,2331,2333,5,3,0,0,2332,2334,5,155,0,0,2333,2332,1,0,0,0,2333,2334,1,0,
0,0,2334,2335,1,0,0,0,2335,2337,3,258,129,0,2336,2338,5,155,0,0,2337,2336,
1,0,0,0,2337,2338,1,0,0,0,2338,2339,1,0,0,0,2339,2340,5,4,0,0,2340,2430,
1,0,0,0,2341,2343,5,120,0,0,2342,2344,5,155,0,0,2343,2342,1,0,0,0,2343,2344,
1,0,0,0,2344,2345,1,0,0,0,2345,2347,5,3,0,0,2346,2348,5,155,0,0,2347,2346,
1,0,0,0,2347,2348,1,0,0,0,2348,2349,1,0,0,0,2349,2351,3,258,129,0,2350,2352,
5,155,0,0,2351,2350,1,0,0,0,2351,2352,1,0,0,0,2352,2353,1,0,0,0,2353,2354,
5,4,0,0,2354,2430,1,0,0,0,2355,2357,5,121,0,0,2356,2358,5,155,0,0,2357,2356,
1,0,0,0,2357,2358,1,0,0,0,2358,2359,1,0,0,0,2359,2361,5,3,0,0,2360,2362,
5,155,0,0,2361,2360,1,0,0,0,2361,2362,1,0,0,0,2362,2363,1,0,0,0,2363,2365,
3,258,129,0,2364,2366,5,155,0,0,2365,2364,1,0,0,0,2365,2366,1,0,0,0,2366,
2367,1,0,0,0,2367,2368,5,4,0,0,2368,2430,1,0,0,0,2369,2371,5,122,0,0,2370,
2372,5,155,0,0,2371,2370,1,0,0,0,2371,2372,1,0,0,0,2372,2373,1,0,0,0,2373,
2375,5,3,0,0,2374,2376,5,155,0,0,2375,2374,1,0,0,0,2375,2376,1,0,0,0,2376,
2377,1,0,0,0,2377,2379,3,258,129,0,2378,2380,5,155,0,0,2379,2378,1,0,0,0,
2379,2380,1,0,0,0,2380,2381,1,0,0,0,2381,2382,5,4,0,0,2382,2430,1,0,0,0,
2383,2430,3,146,73,0,2384,2430,3,256,128,0,2385,2430,3,254,127,0,2386,2430,
3,262,131,0,2387,2430,3,286,143,0,2388,2430,3,266,133,0,2389,2391,7,3,0,
0,2390,2392,5,155,0,0,2391,2390,1,0,0,0,2391,2392,1,0,0,0,2392,2393,1,0,
0,0,2393,2395,5,10,0,0,2394,2396,5,155,0,0,2395,2394,1,0,0,0,2395,2396,1,
0,0,0,2396,2397,1,0,0,0,2397,2399,3,22,11,0,2398,2400,5,155,0,0,2399,2398,
1,0,0,0,2399,2400,1,0,0,0,2400,2401,1,0,0,0,2401,2402,5,11,0,0,2402,2430,
1,0,0,0,2403,2405,7,3,0,0,2404,2406,5,155,0,0,2405,2404,1,0,0,0,2405,2406,
1,0,0,0,2406,2407,1,0,0,0,2407,2409,5,10,0,0,2408,2410,5,155,0,0,2409,2408,
1,0,0,0,2409,2410,1,0,0,0,2410,2411,1,0,0,0,2411,2415,3,140,70,0,2412,2414,
3,128,64,0,2413,2412,1,0,0,0,2414,2417,1,0,0,0,2415,2413,1,0,0,0,2415,2416,
1,0,0,0,2416,2422,1,0,0,0,2417,2415,1,0,0,0,2418,2420,5,155,0,0,2419,2418,
1,0,0,0,2419,2420,1,0,0,0,2420,2421,1,0,0,0,2421,2423,3,138,69,0,2422,2419,
1,0,0,0,2422,2423,1,0,0,0,2423,2425,1,0,0,0,2424,2426,5,155,0,0,2425,2424,
1,0,0,0,2425,2426,1,0,0,0,2426,2427,1,0,0,0,2427,2428,5,11,0,0,2428,2430,
1,0,0,0,2429,2265,1,0,0,0,2429,2266,1,0,0,0,2429,2267,1,0,0,0,2429,2268,
1,0,0,0,2429,2269,1,0,0,0,2429,2270,1,0,0,0,2429,2283,1,0,0,0,2429,2284,
1,0,0,0,2429,2285,1,0,0,0,2429,2299,1,0,0,0,2429,2326,1,0,0,0,2429,2327,
1,0,0,0,2429,2341,1,0,0,0,2429,2355,1,0,0,0,2429,2369,1,0,0,0,2429,2383,
1,0,0,0,2429,2384,1,0,0,0,2429,2385,1,0,0,0,2429,2386,1,0,0,0,2429,2387,
1,0,0,0,2429,2388,1,0,0,0,2429,2389,1,0,0,0,2429,2403,1,0,0,0,2430,243,1,
0,0,0,2431,2438,3,288,144,0,2432,2438,5,131,0,0,2433,2438,3,246,123,0,2434,
2438,5,116,0,0,2435,2438,3,290,145,0,2436,2438,3,248,124,0,2437,2431,1,0,
0,0,2437,2432,1,0,0,0,2437,2433,1,0,0,0,2437,2434,1,0,0,0,2437,2435,1,0,
0,0,2437,2436,1,0,0,0,2438,245,1,0,0,0,2439,2440,7,4,0,0,2440,247,1,0,0,
0,2441,2443,5,5,0,0,2442,2444,5,155,0,0,2443,2442,1,0,0,0,2443,2444,1,0,
0,0,2444,2462,1,0,0,0,2445,2447,3,214,107,0,2446,2448,5,155,0,0,2447,2446,
1,0,0,0,2447,2448,1,0,0,0,2448,2459,1,0,0,0,2449,2451,5,7,0,0,2450,2452,
5,155,0,0,2451,2450,1,0,0,0,2451,2452,1,0,0,0,2452,2453,1,0,0,0,2453,2455,
3,214,107,0,2454,2456,5,155,0,0,2455,2454,1,0,0,0,2455,2456,1,0,0,0,2456,
2458,1,0,0,0,2457,2449,1,0,0,0,2458,2461,1,0,0,0,2459,2457,1,0,0,0,2459,
2460,1,0,0,0,2460,2463,1,0,0,0,2461,2459,1,0,0,0,2462,2445,1,0,0,0,2462,
2463,1,0,0,0,2463,2464,1,0,0,0,2464,2465,5,6,0,0,2465,249,1,0,0,0,2466,2468,
5,125,0,0,2467,2469,5,155,0,0,2468,2467,1,0,0,0,2468,2469,1,0,0,0,2469,2470,
1,0,0,0,2470,2472,5,3,0,0,2471,2473,5,155,0,0,2472,2471,1,0,0,0,2472,2473,
1,0,0,0,2473,2474,1,0,0,0,2474,2476,3,286,143,0,2475,2477,5,155,0,0,2476,
2475,1,0,0,0,2476,2477,1,0,0,0,2477,2478,1,0,0,0,2478,2480,5,2,0,0,2479,
2481,5,155,0,0,2480,2479,1,0,0,0,2480,2481,1,0,0,0,2481,2482,1,0,0,0,2482,
2484,3,214,107,0,2483,2485,5,155,0,0,2484,2483,1,0,0,0,2484,2485,1,0,0,0,
2485,2486,1,0,0,0,2486,2488,5,7,0,0,2487,2489,5,155,0,0,2488,2487,1,0,0,
0,2488,2489,1,0,0,0,2489,2490,1,0,0,0,2490,2492,3,260,130,0,2491,2493,5,
155,0,0,2492,2491,1,0,0,0,2492,2493,1,0,0,0,2493,2494,1,0,0,0,2494,2496,
5,9,0,0,2495,2497,5,155,0,0,2496,2495,1,0,0,0,2496,2497,1,0,0,0,2497,2498,
1,0,0,0,2498,2500,3,214,107,0,2499,2501,5,155,0,0,2500,2499,1,0,0,0,2500,
2501,1,0,0,0,2501,2502,1,0,0,0,2502,2503,5,4,0,0,2503,251,1,0,0,0,2504,2506,
5,2,0,0,2505,2507,5,155,0,0,2506,2505,1,0,0,0,2506,2507,1,0,0,0,2507,2508,
1,0,0,0,2508,2535,3,226,113,0,2509,2511,5,23,0,0,2510,2512,5,155,0,0,2511,
2510,1,0,0,0,2511,2512,1,0,0,0,2512,2513,1,0,0,0,2513,2535,3,226,113,0,2514,
2516,5,24,0,0,2515,2517,5,155,0,0,2516,2515,1,0,0,0,2516,2517,1,0,0,0,2517,
2518,1,0,0,0,2518,2535,3,226,113,0,2519,2521,5,25,0,0,2520,2522,5,155,0,
0,2521,2520,1,0,0,0,2521,2522,1,0,0,0,2522,2523,1,0,0,0,2523,2535,3,226,
113,0,2524,2526,5,26,0,0,2525,2527,5,155,0,0,2526,2525,1,0,0,0,2526,2527,
1,0,0,0,2527,2528,1,0,0,0,2528,2535,3,226,113,0,2529,2531,5,27,0,0,2530,
2532,5,155,0,0,2531,2530,1,0,0,0,2531,2532,1,0,0,0,2532,2533,1,0,0,0,2533,
2535,3,226,113,0,2534,2504,1,0,0,0,2534,2509,1,0,0,0,2534,2514,1,0,0,0,2534,
2519,1,0,0,0,2534,2524,1,0,0,0,2534,2529,1,0,0,0,2535,253,1,0,0,0,2536,2538,
5,3,0,0,2537,2539,5,155,0,0,2538,2537,1,0,0,0,2538,2539,1,0,0,0,2539,2540,
1,0,0,0,2540,2542,3,214,107,0,2541,2543,5,155,0,0,2542,2541,1,0,0,0,2542,
2543,1,0,0,0,2543,2544,1,0,0,0,2544,2545,5,4,0,0,2545,255,1,0,0,0,2546,2551,
3,154,77,0,2547,2549,5,155,0,0,2548,2547,1,0,0,0,2548,2549,1,0,0,0,2549,
2550,1,0,0,0,2550,2552,3,156,78,0,2551,2548,1,0,0,0,2552,2553,1,0,0,0,2553,
2551,1,0,0,0,2553,2554,1,0,0,0,2554,257,1,0,0,0,2555,2560,3,260,130,0,2556,
2558,5,155,0,0,2557,2556,1,0,0,0,2557,2558,1,0,0,0,2558,2559,1,0,0,0,2559,
2561,3,138,69,0,2560,2557,1,0,0,0,2560,2561,1,0,0,0,2561,259,1,0,0,0,2562,
2563,3,286,143,0,2563,2564,5,155,0,0,2564,2565,5,83,0,0,2565,2566,5,155,
0,0,2566,2567,3,214,107,0,2567,261,1,0,0,0,2568,2570,3,264,132,0,2569,2571,
5,155,0,0,2570,2569,1,0,0,0,2570,2571,1,0,0,0,2571,2572,1,0,0,0,2572,2574,
5,3,0,0,2573,2575,5,155,0,0,2574,2573,1,0,0,0,2574,2575,1,0,0,0,2575,2580,
1,0,0,0,2576,2578,5,89,0,0,2577,2579,5,155,0,0,2578,2577,1,0,0,0,2578,2579,
1,0,0,0,2579,2581,1,0,0,0,2580,2576,1,0,0,0,2580,2581,1,0,0,0,2581,2599,
1,0,0,0,2582,2584,3,214,107,0,2583,2585,5,155,0,0,2584,2583,1,0,0,0,2584,
2585,1,0,0,0,2585,2596,1,0,0,0,2586,2588,5,7,0,0,2587,2589,5,155,0,0,2588,
2587,1,0,0,0,2588,2589,1,0,0,0,2589,2590,1,0,0,0,2590,2592,3,214,107,0,2591,
2593,5,155,0,0,2592,2591,1,0,0,0,2592,2593,1,0,0,0,2593,2595,1,0,0,0,2594,
2586,1,0,0,0,2595,2598,1,0,0,0,2596,2594,1,0,0,0,2596,2597,1,0,0,0,2597,
2600,1,0,0,0,2598,2596,1,0,0,0,2599,2582,1,0,0,0,2599,2600,1,0,0,0,2600,
2601,1,0,0,0,2601,2602,5,4,0,0,2602,263,1,0,0,0,2603,2606,3,272,136,0,2604,
2606,5,66,0,0,2605,2603,1,0,0,0,2605,2604,1,0,0,0,2606,265,1,0,0,0,2607,
2609,3,272,136,0,2608,2610,5,155,0,0,2609,2608,1,0,0,0,2609,2610,1,0,0,0,
2610,2611,1,0,0,0,2611,2613,5,3,0,0,2612,2614,5,155,0,0,2613,2612,1,0,0,
0,2613,2614,1,0,0,0,2614,2632,1,0,0,0,2615,2617,3,214,107,0,2616,2618,5,
155,0,0,2617,2616,1,0,0,0,2617,2618,1,0,0,0,2618,2629,1,0,0,0,2619,2621,
5,7,0,0,2620,2622,5,155,0,0,2621,2620,1,0,0,0,2621,2622,1,0,0,0,2622,2623,
1,0,0,0,2623,2625,3,214,107,0,2624,2626,5,155,0,0,2625,2624,1,0,0,0,2625,
2626,1,0,0,0,2626,2628,1,0,0,0,2627,2619,1,0,0,0,2628,2631,1,0,0,0,2629,
2627,1,0,0,0,2629,2630,1,0,0,0,2630,2633,1,0,0,0,2631,2629,1,0,0,0,2632,
2615,1,0,0,0,2632,2633,1,0,0,0,2633,2634,1,0,0,0,2634,2635,5,4,0,0,2635,
267,1,0,0,0,2636,2637,3,272,136,0,2637,269,1,0,0,0,2638,2639,3,308,154,0,
2639,271,1,0,0,0,2640,2641,3,274,137,0,2641,2642,3,308,154,0,2642,273,1,
0,0,0,2643,2644,3,308,154,0,2644,2645,5,28,0,0,2645,2647,1,0,0,0,2646,2643,
1,0,0,0,2647,2650,1,0,0,0,2648,2646,1,0,0,0,2648,2649,1,0,0,0,2649,275,1,
0,0,0,2650,2648,1,0,0,0,2651,2653,5,5,0,0,2652,2654,5,155,0,0,2653,2652,
1,0,0,0,2653,2654,1,0,0,0,2654,2655,1,0,0,0,2655,2664,3,258,129,0,2656,2658,
5,155,0,0,2657,2656,1,0,0,0,2657,2658,1,0,0,0,2658,2659,1,0,0,0,2659,2661,
5,9,0,0,2660,2662,5,155,0,0,2661,2660,1,0,0,0,2661,2662,1,0,0,0,2662,2663,
1,0,0,0,2663,2665,3,214,107,0,2664,2657,1,0,0,0,2664,2665,1,0,0,0,2665,2667,
1,0,0,0,2666,2668,5,155,0,0,2667,2666,1,0,0,0,2667,2668,1,0,0,0,2668,2669,
1,0,0,0,2669,2670,5,6,0,0,2670,277,1,0,0,0,2671,2673,5,5,0,0,2672,2674,5,
155,0,0,2673,2672,1,0,0,0,2673,2674,1,0,0,0,2674,2683,1,0,0,0,2675,2677,
3,286,143,0,2676,2678,5,155,0,0,2677,2676,1,0,0,0,2677,2678,1,0,0,0,2678,
2679,1,0,0,0,2679,2681,5,2,0,0,2680,2682,5,155,0,0,2681,2680,1,0,0,0,2681,
2682,1,0,0,0,2682,2684,1,0,0,0,2683,2675,1,0,0,0,2683,2684,1,0,0,0,2684,
2685,1,0,0,0,2685,2687,3,256,128,0,2686,2688,5,155,0,0,2687,2686,1,0,0,0,
2687,2688,1,0,0,0,2688,2697,1,0,0,0,2689,2691,5,104,0,0,2690,2692,5,155,
0,0,2691,2690,1,0,0,0,2691,2692,1,0,0,0,2692,2693,1,0,0,0,2693,2695,3,214,
107,0,2694,2696,5,155,0,0,2695,2694,1,0,0,0,2695,2696,1,0,0,0,2696,2698,
1,0,0,0,2697,2689,1,0,0,0,2697,2698,1,0,0,0,2698,2699,1,0,0,0,2699,2701,
5,9,0,0,2700,2702,5,155,0,0,2701,2700,1,0,0,0,2701,2702,1,0,0,0,2702,2703,
1,0,0,0,2703,2705,3,214,107,0,2704,2706,5,155,0,0,2705,2704,1,0,0,0,2705,
2706,1,0,0,0,2706,2707,1,0,0,0,2707,2708,5,6,0,0,2708,279,1,0,0,0,2709,2711,
5,28,0,0,2710,2712,5,155,0,0,2711,2710,1,0,0,0,2711,2712,1,0,0,0,2712,2713,
1,0,0,0,2713,2714,3,298,149,0,2714,281,1,0,0,0,2715,2720,5,126,0,0,2716,
2718,5,155,0,0,2717,2716,1,0,0,0,2717,2718,1,0,0,0,2718,2719,1,0,0,0,2719,
2721,3,284,142,0,2720,2717,1,0,0,0,2721,2722,1,0,0,0,2722,2720,1,0,0,0,2722,
2723,1,0,0,0,2723,2738,1,0,0,0,2724,2726,5,126,0,0,2725,2727,5,155,0,0,2726,
2725,1,0,0,0,2726,2727,1,0,0,0,2727,2728,1,0,0,0,2728,2733,3,214,107,0,2729,
2731,5,155,0,0,2730,2729,1,0,0,0,2730,2731,1,0,0,0,2731,2732,1,0,0,0,2732,
2734,3,284,142,0,2733,2730,1,0,0,0,2734,2735,1,0,0,0,2735,2733,1,0,0,0,2735,
2736,1,0,0,0,2736,2738,1,0,0,0,2737,2715,1,0,0,0,2737,2724,1,0,0,0,2738,
2747,1,0,0,0,2739,2741,5,155,0,0,2740,2739,1,0,0,0,2740,2741,1,0,0,0,2741,
2742,1,0,0,0,2742,2744,5,127,0,0,2743,2745,5,155,0,0,2744,2743,1,0,0,0,2744,
2745,1,0,0,0,2745,2746,1,0,0,0,2746,2748,3,214,107,0,2747,2740,1,0,0,0,2747,
2748,1,0,0,0,2748,2750,1,0,0,0,2749,2751,5,155,0,0,2750,2749,1,0,0,0,2750,
2751,1,0,0,0,2751,2752,1,0,0,0,2752,2753,5,128,0,0,2753,283,1,0,0,0,2754,
2756,5,129,0,0,2755,2757,5,155,0,0,2756,2755,1,0,0,0,2756,2757,1,0,0,0,2757,
2758,1,0,0,0,2758,2760,3,214,107,0,2759,2761,5,155,0,0,2760,2759,1,0,0,0,
2760,2761,1,0,0,0,2761,2762,1,0,0,0,2762,2764,5,130,0,0,2763,2765,5,155,
0,0,2764,2763,1,0,0,0,2764,2765,1,0,0,0,2765,2766,1,0,0,0,2766,2767,3,214,
107,0,2767,285,1,0,0,0,2768,2769,3,308,154,0,2769,287,1,0,0,0,2770,2773,
3,302,151,0,2771,2773,3,300,150,0,2772,2770,1,0,0,0,2772,2771,1,0,0,0,2773,
289,1,0,0,0,2774,2776,5,10,0,0,2775,2777,5,155,0,0,2776,2775,1,0,0,0,2776,
2777,1,0,0,0,2777,2811,1,0,0,0,2778,2780,3,298,149,0,2779,2781,5,155,0,0,
2780,2779,1,0,0,0,2780,2781,1,0,0,0,2781,2782,1,0,0,0,2782,2784,5,14,0,0,
2783,2785,5,155,0,0,2784,2783,1,0,0,0,2784,2785,1,0,0,0,2785,2786,1,0,0,
0,2786,2788,3,214,107,0,2787,2789,5,155,0,0,2788,2787,1,0,0,0,2788,2789,
1,0,0,0,2789,2808,1,0,0,0,2790,2792,5,7,0,0,2791,2793,5,155,0,0,2792,2791,
1,0,0,0,2792,2793,1,0,0,0,2793,2794,1,0,0,0,2794,2796,3,298,149,0,2795,2797,
5,155,0,0,2796,2795,1,0,0,0,2796,2797,1,0,0,0,2797,2798,1,0,0,0,2798,2800,
5,14,0,0,2799,2801,5,155,0,0,2800,2799,1,0,0,0,2800,2801,1,0,0,0,2801,2802,
1,0,0,0,2802,2804,3,214,107,0,2803,2805,5,155,0,0,2804,2803,1,0,0,0,2804,
2805,1,0,0,0,2805,2807,1,0,0,0,2806,2790,1,0,0,0,2807,2810,1,0,0,0,2808,
2806,1,0,0,0,2808,2809,1,0,0,0,2809,2812,1,0,0,0,2810,2808,1,0,0,0,2811,
2778,1,0,0,0,2811,2812,1,0,0,0,2812,2813,1,0,0,0,2813,2814,5,11,0,0,2814,
291,1,0,0,0,2815,2817,5,10,0,0,2816,2818,5,155,0,0,2817,2816,1,0,0,0,2817,
2818,1,0,0,0,2818,2821,1,0,0,0,2819,2822,3,308,154,0,2820,2822,5,134,0,0,
2821,2819,1,0,0,0,2821,2820,1,0,0,0,2822,2824,1,0,0,0,2823,2825,5,155,0,
0,2824,2823,1,0,0,0,2824,2825,1,0,0,0,2825,2826,1,0,0,0,2826,2827,5,11,0,
0,2827,293,1,0,0,0,2828,2831,5,29,0,0,2829,2832,3,308,154,0,2830,2832,5,
134,0,0,2831,2829,1,0,0,0,2831,2830,1,0,0,0,2832,295,1,0,0,0,2833,2838,3,
242,121,0,2834,2836,5,155,0,0,2835,2834,1,0,0,0,2835,2836,1,0,0,0,2836,2837,
1,0,0,0,2837,2839,3,280,140,0,2838,2835,1,0,0,0,2839,2840,1,0,0,0,2840,2838,
1,0,0,0,2840,2841,1,0,0,0,2841,297,1,0,0,0,2842,2849,3,304,152,0,2843,2844,
3,304,152,0,2844,2845,5,5,0,0,2845,2846,5,134,0,0,2846,2847,5,6,0,0,2847,
2849,1,0,0,0,2848,2842,1,0,0,0,2848,2843,1,0,0,0,2849,299,1,0,0,0,2850,2851,
7,5,0,0,2851,301,1,0,0,0,2852,2853,7,6,0,0,2853,303,1,0,0,0,2854,2857,3,
308,154,0,2855,2857,3,306,153,0,2856,2854,1,0,0,0,2856,2855,1,0,0,0,2857,
305,1,0,0,0,2858,2859,7,7,0,0,2859,307,1,0,0,0,2860,2876,5,151,0,0,2861,
2876,5,154,0,0,2862,2876,5,136,0,0,2863,2876,5,117,0,0,2864,2876,5,118,0,
0,2865,2876,5,119,0,0,2866,2876,5,120,0,0,2867,2876,5,121,0,0,2868,2876,
5,122,0,0,2869,2876,5,67,0,0,2870,2876,5,128,0,0,2871,2876,5,71,0,0,2872,
2876,5,102,0,0,2873,2876,5,49,0,0,2874,2876,3,310,155,0,2875,2860,1,0,0,
0,2875,2861,1,0,0,0,2875,2862,1,0,0,0,2875,2863,1,0,0,0,2875,2864,1,0,0,
0,2875,2865,1,0,0,0,2875,2866,1,0,0,0,2875,2867,1,0,0,0,2875,2868,1,0,0,
0,2875,2869,1,0,0,0,2875,2870,1,0,0,0,2875,2871,1,0,0,0,2875,2872,1,0,0,
0,2875,2873,1,0,0,0,2875,2874,1,0,0,0,2876,309,1,0,0,0,2877,2902,5,63,0,
0,2878,2902,5,87,0,0,2879,2902,5,126,0,0,2880,2902,5,55,0,0,2881,2902,5,
58,0,0,2882,2902,5,68,0,0,2883,2902,5,80,0,0,2884,2902,5,50,0,0,2885,2902,
5,73,0,0,2886,2902,5,82,0,0,2887,2902,5,70,0,0,2888,2902,5,60,0,0,2889,2902,
5,100,0,0,2890,2902,5,103,0,0,2891,2902,5,54,0,0,2892,2902,5,51,0,0,2893,
2902,5,125,0,0,2894,2902,5,101,0,0,2895,2902,5,107,0,0,2896,2902,5,52,0,
0,2897,2902,5,53,0,0,2898,2902,5,129,0,0,2899,2902,5,88,0,0,2900,2902,3,
306,153,0,2901,2877,1,0,0,0,2901,2878,1,0,0,0,2901,2879,1,0,0,0,2901,2880,
1,0,0,0,2901,2881,1,0,0,0,2901,2882,1,0,0,0,2901,2883,1,0,0,0,2901,2884,
1,0,0,0,2901,2885,1,0,0,0,2901,2886,1,0,0,0,2901,2887,1,0,0,0,2901,2888,
1,0,0,0,2901,2889,1,0,0,0,2901,2890,1,0,0,0,2901,2891,1,0,0,0,2901,2892,
1,0,0,0,2901,2893,1,0,0,0,2901,2894,1,0,0,0,2901,2895,1,0,0,0,2901,2896,
1,0,0,0,2901,2897,1,0,0,0,2901,2898,1,0,0,0,2901,2899,1,0,0,0,2901,2900,
1,0,0,0,2902,311,1,0,0,0,2903,2904,7,8,0,0,2904,313,1,0,0,0,2905,2906,7,
9,0,0,2906,315,1,0,0,0,2907,2908,7,10,0,0,2908,317,1,0,0,0,531,319,324,327,
330,336,340,346,351,357,368,372,378,384,393,398,403,414,423,428,431,434,
438,441,445,449,455,459,464,469,473,476,478,482,486,491,495,500,504,515,
522,532,570,581,588,602,609,615,625,629,635,643,654,660,672,678,690,694,
704,717,720,724,728,734,738,741,745,749,753,757,767,774,787,791,799,805,
809,813,818,823,827,833,837,843,847,853,857,861,865,869,873,878,885,889,
894,901,905,909,917,924,927,933,939,944,948,952,955,958,962,966,970,973,
976,979,983,986,989,993,998,1002,1007,1011,1014,1017,1022,1026,1037,1043,
1049,1053,1057,1062,1066,1073,1079,1082,1087,1090,1094,1098,1102,1106,1109,
1117,1121,1125,1129,1133,1138,1143,1147,1152,1155,1164,1173,1178,1191,1194,
1197,1217,1221,1226,1236,1245,1254,1262,1268,1272,1277,1283,1286,1290,1294,
1298,1306,1310,1314,1321,1325,1329,1334,1339,1343,1348,1354,1357,1361,1365,
1369,1375,1379,1383,1397,1410,1414,1419,1425,1429,1437,1441,1443,1447,1449,
1453,1455,1458,1462,1464,1470,1473,1477,1481,1484,1487,1491,1496,1500,1502,
1506,1510,1513,1516,1521,1525,1527,1531,1534,1537,1541,1546,1550,1552,1556,
1559,1562,1567,1571,1573,1576,1580,1584,1586,1590,1592,1595,1599,1601,1604,
1608,1610,1615,1619,1623,1626,1630,1632,1636,1640,1642,1646,1649,1652,1656,
1659,1662,1667,1670,1673,1676,1679,1684,1687,1690,1695,1698,1701,1704,1707,
1712,1715,1718,1723,1728,1732,1738,1742,1746,1749,1754,1759,1762,1768,1772,
1777,1782,1786,1791,1795,1799,1801,1805,1809,1814,1820,1823,1827,1831,1835,
1838,1842,1846,1849,1853,1858,1863,1868,1873,1876,1882,1886,1891,1896,1900,
1905,1909,1913,1915,1919,1923,1928,1934,1937,1941,1945,1949,1952,1956,1960,
1963,1967,1972,1977,1983,1987,1989,1993,1997,1999,2001,2016,2026,2036,2041,
2045,2052,2057,2062,2066,2070,2074,2077,2079,2084,2088,2092,2096,2100,2104,
2107,2109,2114,2118,2123,2128,2132,2139,2146,2153,2158,2163,2166,2170,2174,
2190,2193,2206,2208,2212,2215,2221,2226,2230,2233,2237,2241,2245,2248,2252,
2256,2260,2272,2276,2280,2287,2291,2295,2301,2305,2309,2312,2316,2319,2322,
2329,2333,2337,2343,2347,2351,2357,2361,2365,2371,2375,2379,2391,2395,2399,
2405,2409,2415,2419,2422,2425,2429,2437,2443,2447,2451,2455,2459,2462,2468,
2472,2476,2480,2484,2488,2492,2496,2500,2506,2511,2516,2521,2526,2531,2534,
2538,2542,2548,2553,2557,2560,2570,2574,2578,2580,2584,2588,2592,2596,2599,
2605,2609,2613,2617,2621,2625,2629,2632,2648,2653,2657,2661,2664,2667,2673,
2677,2681,2683,2687,2691,2695,2697,2701,2705,2711,2717,2722,2726,2730,2735,
2737,2740,2744,2747,2750,2756,2760,2764,2772,2776,2780,2784,2788,2792,2796,
2800,2804,2808,2811,2817,2821,2824,2831,2835,2840,2848,2856,2875,2901];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class CypherParser extends antlr4.Parser {

    static grammarFileName = "Cypher.g4";
    static literalNames = [ null, "';'", "'='", "'('", "')'", "'['", "']'", 
                            "','", "'+='", "'|'", "'{'", "'}'", "'*'", "'-'", 
                            "':'", "'+'", "'&'", "'!'", "'%'", "'..'", "'/'", 
                            "'^'", "'=~'", "'<>'", "'<'", "'>'", "'<='", 
                            "'>='", "'.'", "'$'", "'\\u27E8'", "'\\u3008'", 
                            "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                            "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                            "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                            "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                            "'\\uFF0D'", null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, "'0'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, "CYPHER", "EXPLAIN", "PROFILE", "USE", 
                             "USING", "PERIODIC", "COMMIT", "UNION", "ALL", 
                             "CREATE", "DROP", "INDEX", "ON", "CONSTRAINT", 
                             "ASSERT", "IS", "UNIQUE", "EXISTS", "LOAD", 
                             "CSV", "WITH", "HEADERS", "FROM", "AS", "FIELDTERMINATOR", 
                             "OPTIONAL", "MATCH", "UNWIND", "MERGE", "SET", 
                             "DETACH", "DELETE", "REMOVE", "FOREACH", "IN", 
                             "TRANSACTIONS", "CONCURRENT", "ROWS", "CALL", 
                             "YIELD", "DISTINCT", "RETURN", "ORDER", "BY", 
                             "L_SKIP", "L_OFFSET", "LIMIT", "ASCENDING", 
                             "ASC", "DESCENDING", "DESC", "JOIN", "SCAN", 
                             "START", "NODE", "WHERE", "GROUPS", "SHORTEST", 
                             "SHORTESTPATH", "ALLSHORTESTPATHS", "OR", "XOR", 
                             "AND", "NOT", "STARTS", "ENDS", "CONTAINS", 
                             "NULL", "COUNT", "FILTER", "EXTRACT", "ANY", 
                             "NONE", "SINGLE", "TRUE", "FALSE", "REDUCE", 
                             "CASE", "ELSE", "END", "WHEN", "THEN", "StringLiteral", 
                             "EscapedChar", "HexInteger", "DecimalInteger", 
                             "OctalInteger", "HexLetter", "HexDigit", "Digit", 
                             "NonZeroDigit", "NonZeroOctDigit", "OctDigit", 
                             "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", 
                             "FOR", "REQUIRE", "MANDATORY", "SCALAR", "OF", 
                             "ADD", "UnescapedSymbolicName", "IdentifierStart", 
                             "IdentifierPart", "EscapedSymbolicName", "SP", 
                             "WHITESPACE", "Comment" ];
    static ruleNames = [ "oC_Cypher", "oC_QueryOptions", "oC_AnyCypherOption", 
                         "oC_CypherOption", "oC_VersionNumber", "oC_Explain", 
                         "oC_Profile", "oC_ConfigurationOption", "oC_Statement", 
                         "oC_Query", "oC_Use", "oC_RegularQuery", "oC_BulkImportQuery", 
                         "oC_PeriodicCommitHint", "oC_LoadCSVQuery", "oC_Union", 
                         "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                         "oC_UpdatingClause", "oC_ReadingClause", "oC_Command", 
                         "oC_CreateUniqueConstraint", "oC_CreateNodePropertyExistenceConstraint", 
                         "oC_CreateRelationshipPropertyExistenceConstraint", 
                         "oC_CreateIndex", "oC_DropUniqueConstraint", "oC_DropNodePropertyExistenceConstraint", 
                         "oC_DropRelationshipPropertyExistenceConstraint", 
                         "oC_DropIndex", "oC_Index", "oC_UniqueConstraint", 
                         "oC_NodePropertyExistenceConstraint", "oC_RelationshipPropertyExistenceConstraint", 
                         "oC_RelationshipPatternSyntax", "oC_LoadCSV", "oC_Match", 
                         "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                         "oC_CreateUnique", "oC_Set", "oC_SetItem", "oC_Delete", 
                         "oC_Remove", "oC_RemoveItem", "oC_Foreach", "oC_InQueryCall", 
                         "oC_SubQuery", "oC_SubQueryVariableScope", "oC_SubQueryDirective", 
                         "oC_StandaloneCall", "oC_YieldItems", "oC_YieldItem", 
                         "oC_With", "oC_Return", "oC_ReturnBody", "oC_ReturnItems", 
                         "oC_ReturnItem", "oC_Order", "oC_Skip", "oC_Limit", 
                         "oC_SortItem", "oC_Hint", "oC_IdentifiedIndexLookup", 
                         "oC_IndexQuery", "oC_IdLookup", "oC_LiteralIds", 
                         "oC_Where", "oC_Pattern", "oC_PatternPart", "oC_AnonymousPatternPart", 
                         "oC_ShortestPathPattern", "oC_PatternElement", 
                         "oC_OpenParen", "oC_CloseParen", "oC_NodePattern", 
                         "oC_PatternElementChain", "oC_RelationshipPattern", 
                         "oC_RelationshipDetail", "oC_QuantifiedPathPattern", 
                         "oC_PathPatternQuantifier", "oC_Properties", "oC_RelType", 
                         "oC_RelationshipTypes", "oC_RelationshipTypeTerm", 
                         "oC_RelationshipTypeOr", "oC_RelationshipTypeAnd", 
                         "oC_RelationshipTypeNot", "oC_RelationshipTypeContainer", 
                         "oC_RelationshipTypeGroup", "oC_RelationshipTypeNotNested", 
                         "oC_RelationshipTypeAny", "oC_NodeLabels", "oC_NodeLabelTerm", 
                         "oC_NodeLabelOr", "oC_NodeLabelAnd", "oC_NodeLabelNot", 
                         "oC_NodeLabelContainer", "oC_NodeLabelGroup", "oC_NodeLabelNotNested", 
                         "oC_NodeLabelAny", "oC_NodeLabel", "oC_RangeLiteral", 
                         "oC_LabelName", "oC_RelTypeName", "oC_Expression", 
                         "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
                         "oC_NotExpression", "oC_ComparisonExpression", 
                         "oC_AddOrSubtractExpression", "oC_MultiplyDivideModuloExpression", 
                         "oC_PowerOfExpression", "oC_UnaryAddOrSubtractExpression", 
                         "oC_StringListNullOperatorExpression", "oC_RegularExpression", 
                         "oC_PropertyOrLabelsExpression", "oC_NodeProjection", 
                         "oC_Atom", "oC_Literal", "oC_BooleanLiteral", "oC_ListLiteral", 
                         "oC_Reduce", "oC_PartialComparisonExpression", 
                         "oC_ParenthesizedExpression", "oC_RelationshipsPattern", 
                         "oC_FilterExpression", "oC_IdInColl", "oC_FunctionInvocation", 
                         "oC_FunctionName", "oC_ExplicitProcedureInvocation", 
                         "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                         "oC_ProcedureName", "oC_Namespace", "oC_ListComprehension", 
                         "oC_PatternComprehension", "oC_PropertyLookup", 
                         "oC_CaseExpression", "oC_CaseAlternatives", "oC_Variable", 
                         "oC_NumberLiteral", "oC_MapLiteral", "oC_LegacyParameter", 
                         "oC_Parameter", "oC_PropertyExpression", "oC_PropertyKeyName", 
                         "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_SchemaName", 
                         "oC_ReservedWord", "oC_SymbolicName", "oC_KeywordsThatArePartOfFunctionNames", 
                         "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CypherParser.ruleNames;
        this.literalNames = CypherParser.literalNames;
        this.symbolicNames = CypherParser.symbolicNames;
    }

    get atn() {
        return atn;
    }



	oC_Cypher() {
	    let localctx = new OC_CypherContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CypherParser.RULE_oC_Cypher);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 319;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 318;
	            this.match(CypherParser.SP);
	        }

	        this.state = 321;
	        this.oC_QueryOptions();
	        this.state = 322;
	        this.oC_Statement();
	        this.state = 327;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        if(la_===1) {
	            this.state = 324;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 323;
	                this.match(CypherParser.SP);
	            }

	            this.state = 326;
	            this.match(CypherParser.T__0);

	        }
	        this.state = 330;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 329;
	            this.match(CypherParser.SP);
	        }

	        this.state = 332;
	        this.match(CypherParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_QueryOptions() {
	    let localctx = new OC_QueryOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CypherParser.RULE_oC_QueryOptions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 340;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (CypherParser.CYPHER - 49)) | (1 << (CypherParser.EXPLAIN - 49)) | (1 << (CypherParser.PROFILE - 49)))) !== 0)) {
	            this.state = 334;
	            this.oC_AnyCypherOption();
	            this.state = 336;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 335;
	                this.match(CypherParser.SP);
	            }

	            this.state = 342;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_AnyCypherOption() {
	    let localctx = new OC_AnyCypherOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CypherParser.RULE_oC_AnyCypherOption);
	    try {
	        this.state = 346;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.CYPHER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 343;
	            this.oC_CypherOption();
	            break;
	        case CypherParser.EXPLAIN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 344;
	            this.oC_Explain();
	            break;
	        case CypherParser.PROFILE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 345;
	            this.oC_Profile();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CypherOption() {
	    let localctx = new OC_CypherOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CypherParser.RULE_oC_CypherOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 348;
	        this.match(CypherParser.CYPHER);
	        this.state = 351;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        if(la_===1) {
	            this.state = 349;
	            this.match(CypherParser.SP);
	            this.state = 350;
	            this.oC_VersionNumber();

	        }
	        this.state = 357;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 353;
	                this.match(CypherParser.SP);
	                this.state = 354;
	                this.oC_ConfigurationOption(); 
	            }
	            this.state = 359;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_VersionNumber() {
	    let localctx = new OC_VersionNumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CypherParser.RULE_oC_VersionNumber);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 360;
	        this.match(CypherParser.RegularDecimalReal);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Explain() {
	    let localctx = new OC_ExplainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, CypherParser.RULE_oC_Explain);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 362;
	        this.match(CypherParser.EXPLAIN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Profile() {
	    let localctx = new OC_ProfileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CypherParser.RULE_oC_Profile);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 364;
	        this.match(CypherParser.PROFILE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ConfigurationOption() {
	    let localctx = new OC_ConfigurationOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CypherParser.RULE_oC_ConfigurationOption);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 366;
	        this.oC_SymbolicName();
	        this.state = 368;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 367;
	            this.match(CypherParser.SP);
	        }

	        this.state = 370;
	        this.match(CypherParser.T__1);
	        this.state = 372;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 371;
	            this.match(CypherParser.SP);
	        }

	        this.state = 374;
	        this.oC_SymbolicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Statement() {
	    let localctx = new OC_StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CypherParser.RULE_oC_Statement);
	    try {
	        this.state = 378;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 376;
	            this.oC_Command();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 377;
	            this.oC_Query();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Query() {
	    let localctx = new OC_QueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CypherParser.RULE_oC_Query);
	    try {
	        this.state = 384;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 380;
	            this.oC_RegularQuery();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 381;
	            this.oC_StandaloneCall();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 382;
	            this.oC_BulkImportQuery();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 383;
	            this.oC_SubQuery();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Use() {
	    let localctx = new OC_UseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CypherParser.RULE_oC_Use);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 386;
	        this.match(CypherParser.USE);
	        this.state = 387;
	        this.match(CypherParser.SP);
	        this.state = 388;
	        this.oC_Expression();
	        this.state = 389;
	        this.match(CypherParser.SP);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RegularQuery() {
	    let localctx = new OC_RegularQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CypherParser.RULE_oC_RegularQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 391;
	        this.oC_SingleQuery();
	        this.state = 398;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 393;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 392;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 395;
	                this.oC_Union(); 
	            }
	            this.state = 400;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_BulkImportQuery() {
	    let localctx = new OC_BulkImportQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CypherParser.RULE_oC_BulkImportQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 401;
	        this.oC_PeriodicCommitHint();
	        this.state = 403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 402;
	            this.match(CypherParser.SP);
	        }

	        this.state = 405;
	        this.oC_LoadCSVQuery();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PeriodicCommitHint() {
	    let localctx = new OC_PeriodicCommitHintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CypherParser.RULE_oC_PeriodicCommitHint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 407;
	        this.match(CypherParser.USING);
	        this.state = 408;
	        this.match(CypherParser.SP);
	        this.state = 409;
	        this.match(CypherParser.PERIODIC);
	        this.state = 410;
	        this.match(CypherParser.SP);
	        this.state = 411;
	        this.match(CypherParser.COMMIT);
	        this.state = 414;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        if(la_===1) {
	            this.state = 412;
	            this.match(CypherParser.SP);
	            this.state = 413;
	            this.oC_IntegerLiteral();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_LoadCSVQuery() {
	    let localctx = new OC_LoadCSVQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CypherParser.RULE_oC_LoadCSVQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 416;
	        this.oC_LoadCSV();
	        this.state = 417;
	        this.oC_SingleQuery();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Union() {
	    let localctx = new OC_UnionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, CypherParser.RULE_oC_Union);
	    var _la = 0; // Token type
	    try {
	        this.state = 431;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 419;
	            this.match(CypherParser.UNION);
	            this.state = 420;
	            this.match(CypherParser.SP);
	            this.state = 421;
	            this.match(CypherParser.ALL);
	            this.state = 423;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 422;
	                this.match(CypherParser.SP);
	            }

	            this.state = 425;
	            this.oC_SingleQuery();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 426;
	            this.match(CypherParser.UNION);
	            this.state = 428;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 427;
	                this.match(CypherParser.SP);
	            }

	            this.state = 430;
	            this.oC_SingleQuery();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SingleQuery() {
	    let localctx = new OC_SingleQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CypherParser.RULE_oC_SingleQuery);
	    var _la = 0; // Token type
	    try {
	        this.state = 441;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 434;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.USE) {
	                this.state = 433;
	                this.oC_Use();
	            }

	            this.state = 436;
	            this.oC_SinglePartQuery();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 438;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.USE) {
	                this.state = 437;
	                this.oC_Use();
	            }

	            this.state = 440;
	            this.oC_MultiPartQuery();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SinglePartQuery() {
	    let localctx = new OC_SinglePartQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CypherParser.RULE_oC_SinglePartQuery);
	    var _la = 0; // Token type
	    try {
	        this.state = 478;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 449;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CypherParser.LOAD - 67)) | (1 << (CypherParser.OPTIONAL - 67)) | (1 << (CypherParser.MATCH - 67)) | (1 << (CypherParser.UNWIND - 67)) | (1 << (CypherParser.CALL - 67)))) !== 0)) {
	                this.state = 443;
	                this.oC_ReadingClause();
	                this.state = 445;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 444;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 451;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 452;
	            this.oC_Return();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 459;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CypherParser.LOAD - 67)) | (1 << (CypherParser.OPTIONAL - 67)) | (1 << (CypherParser.MATCH - 67)) | (1 << (CypherParser.UNWIND - 67)) | (1 << (CypherParser.CALL - 67)))) !== 0)) {
	                this.state = 453;
	                this.oC_ReadingClause();
	                this.state = 455;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 454;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 461;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 462;
	            this.oC_UpdatingClause();
	            this.state = 469;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 464;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 463;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 466;
	                    this.oC_UpdatingClause(); 
	                }
	                this.state = 471;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
	            }

	            this.state = 476;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	            if(la_===1) {
	                this.state = 473;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 472;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 475;
	                this.oC_Return();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_MultiPartQuery() {
	    let localctx = new OC_MultiPartQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CypherParser.RULE_oC_MultiPartQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 502; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 486;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		while(((((_la - 67)) & ~0x1f) == 0 && ((1 << (_la - 67)) & ((1 << (CypherParser.LOAD - 67)) | (1 << (CypherParser.OPTIONAL - 67)) | (1 << (CypherParser.MATCH - 67)) | (1 << (CypherParser.UNWIND - 67)) | (1 << (CypherParser.CALL - 67)))) !== 0)) {
	        		    this.state = 480;
	        		    this.oC_ReadingClause();
	        		    this.state = 482;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		    if(_la===CypherParser.SP) {
	        		        this.state = 481;
	        		        this.match(CypherParser.SP);
	        		    }

	        		    this.state = 488;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		}
	        		this.state = 495;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		while(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (CypherParser.CREATE - 58)) | (1 << (CypherParser.MERGE - 58)) | (1 << (CypherParser.SET - 58)) | (1 << (CypherParser.DETACH - 58)) | (1 << (CypherParser.DELETE - 58)) | (1 << (CypherParser.REMOVE - 58)) | (1 << (CypherParser.FOREACH - 58)))) !== 0)) {
	        		    this.state = 489;
	        		    this.oC_UpdatingClause();
	        		    this.state = 491;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		    if(_la===CypherParser.SP) {
	        		        this.state = 490;
	        		        this.match(CypherParser.SP);
	        		    }

	        		    this.state = 497;
	        		    this._errHandler.sync(this);
	        		    _la = this._input.LA(1);
	        		}
	        		this.state = 498;
	        		this.oC_With();
	        		this.state = 500;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		if(_la===CypherParser.SP) {
	        		    this.state = 499;
	        		    this.match(CypherParser.SP);
	        		}

	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 504; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,37, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 506;
	        this.oC_SinglePartQuery();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_UpdatingClause() {
	    let localctx = new OC_UpdatingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CypherParser.RULE_oC_UpdatingClause);
	    try {
	        this.state = 515;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 508;
	            this.oC_Create();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 509;
	            this.oC_Merge();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 510;
	            this.oC_CreateUnique();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 511;
	            this.oC_Foreach();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 512;
	            this.oC_Delete();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 513;
	            this.oC_Set();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 514;
	            this.oC_Remove();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ReadingClause() {
	    let localctx = new OC_ReadingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CypherParser.RULE_oC_ReadingClause);
	    try {
	        this.state = 522;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 517;
	            this.oC_LoadCSV();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 518;
	            this.oC_Match();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 519;
	            this.oC_Unwind();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 520;
	            this.oC_InQueryCall();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 521;
	            this.oC_SubQuery();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Command() {
	    let localctx = new OC_CommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CypherParser.RULE_oC_Command);
	    try {
	        this.state = 532;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 524;
	            this.oC_CreateIndex();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 525;
	            this.oC_DropIndex();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 526;
	            this.oC_CreateUniqueConstraint();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 527;
	            this.oC_DropUniqueConstraint();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 528;
	            this.oC_CreateNodePropertyExistenceConstraint();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 529;
	            this.oC_DropNodePropertyExistenceConstraint();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 530;
	            this.oC_CreateRelationshipPropertyExistenceConstraint();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 531;
	            this.oC_DropRelationshipPropertyExistenceConstraint();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CreateUniqueConstraint() {
	    let localctx = new OC_CreateUniqueConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CypherParser.RULE_oC_CreateUniqueConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 534;
	        this.match(CypherParser.CREATE);
	        this.state = 535;
	        this.match(CypherParser.SP);
	        this.state = 536;
	        this.oC_UniqueConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CreateNodePropertyExistenceConstraint() {
	    let localctx = new OC_CreateNodePropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CypherParser.RULE_oC_CreateNodePropertyExistenceConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 538;
	        this.match(CypherParser.CREATE);
	        this.state = 539;
	        this.match(CypherParser.SP);
	        this.state = 540;
	        this.oC_NodePropertyExistenceConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CreateRelationshipPropertyExistenceConstraint() {
	    let localctx = new OC_CreateRelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CypherParser.RULE_oC_CreateRelationshipPropertyExistenceConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 542;
	        this.match(CypherParser.CREATE);
	        this.state = 543;
	        this.match(CypherParser.SP);
	        this.state = 544;
	        this.oC_RelationshipPropertyExistenceConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CreateIndex() {
	    let localctx = new OC_CreateIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, CypherParser.RULE_oC_CreateIndex);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 546;
	        this.match(CypherParser.CREATE);
	        this.state = 547;
	        this.match(CypherParser.SP);
	        this.state = 548;
	        this.oC_Index();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_DropUniqueConstraint() {
	    let localctx = new OC_DropUniqueConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CypherParser.RULE_oC_DropUniqueConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 550;
	        this.match(CypherParser.DROP);
	        this.state = 551;
	        this.match(CypherParser.SP);
	        this.state = 552;
	        this.oC_UniqueConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_DropNodePropertyExistenceConstraint() {
	    let localctx = new OC_DropNodePropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CypherParser.RULE_oC_DropNodePropertyExistenceConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 554;
	        this.match(CypherParser.DROP);
	        this.state = 555;
	        this.match(CypherParser.SP);
	        this.state = 556;
	        this.oC_NodePropertyExistenceConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_DropRelationshipPropertyExistenceConstraint() {
	    let localctx = new OC_DropRelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CypherParser.RULE_oC_DropRelationshipPropertyExistenceConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 558;
	        this.match(CypherParser.DROP);
	        this.state = 559;
	        this.match(CypherParser.SP);
	        this.state = 560;
	        this.oC_RelationshipPropertyExistenceConstraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_DropIndex() {
	    let localctx = new OC_DropIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CypherParser.RULE_oC_DropIndex);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 562;
	        this.match(CypherParser.DROP);
	        this.state = 563;
	        this.match(CypherParser.SP);
	        this.state = 564;
	        this.oC_Index();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Index() {
	    let localctx = new OC_IndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CypherParser.RULE_oC_Index);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 566;
	        this.match(CypherParser.INDEX);
	        this.state = 567;
	        this.match(CypherParser.SP);
	        this.state = 568;
	        this.match(CypherParser.ON);
	        this.state = 570;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 569;
	            this.match(CypherParser.SP);
	        }

	        this.state = 572;
	        this.oC_NodeLabel();
	        this.state = 573;
	        this.match(CypherParser.T__2);
	        this.state = 574;
	        this.oC_PropertyKeyName();
	        this.state = 575;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_UniqueConstraint() {
	    let localctx = new OC_UniqueConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CypherParser.RULE_oC_UniqueConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 577;
	        this.match(CypherParser.CONSTRAINT);
	        this.state = 578;
	        this.match(CypherParser.SP);
	        this.state = 579;
	        this.match(CypherParser.ON);
	        this.state = 581;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 580;
	            this.match(CypherParser.SP);
	        }

	        this.state = 583;
	        this.match(CypherParser.T__2);
	        this.state = 584;
	        this.oC_Variable();
	        this.state = 585;
	        this.oC_NodeLabel();
	        this.state = 586;
	        this.match(CypherParser.T__3);
	        this.state = 588;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 587;
	            this.match(CypherParser.SP);
	        }

	        this.state = 590;
	        this.match(CypherParser.ASSERT);
	        this.state = 591;
	        this.match(CypherParser.SP);
	        this.state = 592;
	        this.oC_PropertyExpression();
	        this.state = 593;
	        this.match(CypherParser.SP);
	        this.state = 594;
	        this.match(CypherParser.IS);
	        this.state = 595;
	        this.match(CypherParser.SP);
	        this.state = 596;
	        this.match(CypherParser.UNIQUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodePropertyExistenceConstraint() {
	    let localctx = new OC_NodePropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CypherParser.RULE_oC_NodePropertyExistenceConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 598;
	        this.match(CypherParser.CONSTRAINT);
	        this.state = 599;
	        this.match(CypherParser.SP);
	        this.state = 600;
	        this.match(CypherParser.ON);
	        this.state = 602;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 601;
	            this.match(CypherParser.SP);
	        }

	        this.state = 604;
	        this.match(CypherParser.T__2);
	        this.state = 605;
	        this.oC_Variable();
	        this.state = 606;
	        this.oC_NodeLabel();
	        this.state = 607;
	        this.match(CypherParser.T__3);
	        this.state = 609;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 608;
	            this.match(CypherParser.SP);
	        }

	        this.state = 611;
	        this.match(CypherParser.ASSERT);
	        this.state = 612;
	        this.match(CypherParser.SP);
	        this.state = 613;
	        this.match(CypherParser.EXISTS);
	        this.state = 615;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 614;
	            this.match(CypherParser.SP);
	        }

	        this.state = 617;
	        this.match(CypherParser.T__2);
	        this.state = 618;
	        this.oC_PropertyExpression();
	        this.state = 619;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipPropertyExistenceConstraint() {
	    let localctx = new OC_RelationshipPropertyExistenceConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CypherParser.RULE_oC_RelationshipPropertyExistenceConstraint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 621;
	        this.match(CypherParser.CONSTRAINT);
	        this.state = 622;
	        this.match(CypherParser.SP);
	        this.state = 623;
	        this.match(CypherParser.ON);
	        this.state = 625;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 624;
	            this.match(CypherParser.SP);
	        }

	        this.state = 627;
	        this.oC_RelationshipPatternSyntax();
	        this.state = 629;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 628;
	            this.match(CypherParser.SP);
	        }

	        this.state = 631;
	        this.match(CypherParser.ASSERT);
	        this.state = 632;
	        this.match(CypherParser.SP);
	        this.state = 633;
	        this.match(CypherParser.EXISTS);
	        this.state = 635;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 634;
	            this.match(CypherParser.SP);
	        }

	        this.state = 637;
	        this.match(CypherParser.T__2);
	        this.state = 638;
	        this.oC_PropertyExpression();
	        this.state = 639;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipPatternSyntax() {
	    let localctx = new OC_RelationshipPatternSyntaxContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CypherParser.RULE_oC_RelationshipPatternSyntax);
	    var _la = 0; // Token type
	    try {
	        this.state = 694;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 641;
	            this.match(CypherParser.T__2);
	            this.state = 643;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 642;
	                this.match(CypherParser.SP);
	            }

	            this.state = 645;
	            this.match(CypherParser.T__3);
	            this.state = 646;
	            this.oC_Dash();
	            this.state = 647;
	            this.match(CypherParser.T__4);
	            this.state = 648;
	            this.oC_Variable();
	            this.state = 649;
	            this.oC_RelType();
	            this.state = 650;
	            this.match(CypherParser.T__5);
	            this.state = 651;
	            this.oC_Dash();
	            this.state = 652;
	            this.match(CypherParser.T__2);
	            this.state = 654;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 653;
	                this.match(CypherParser.SP);
	            }

	            this.state = 656;
	            this.match(CypherParser.T__3);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 658;
	            this.match(CypherParser.T__2);
	            this.state = 660;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 659;
	                this.match(CypherParser.SP);
	            }

	            this.state = 662;
	            this.match(CypherParser.T__3);
	            this.state = 663;
	            this.oC_Dash();
	            this.state = 664;
	            this.match(CypherParser.T__4);
	            this.state = 665;
	            this.oC_Variable();
	            this.state = 666;
	            this.oC_RelType();
	            this.state = 667;
	            this.match(CypherParser.T__5);
	            this.state = 668;
	            this.oC_Dash();
	            this.state = 669;
	            this.oC_RightArrowHead();
	            this.state = 670;
	            this.match(CypherParser.T__2);
	            this.state = 672;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 671;
	                this.match(CypherParser.SP);
	            }

	            this.state = 674;
	            this.match(CypherParser.T__3);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 676;
	            this.match(CypherParser.T__2);
	            this.state = 678;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 677;
	                this.match(CypherParser.SP);
	            }

	            this.state = 680;
	            this.match(CypherParser.T__3);
	            this.state = 681;
	            this.oC_LeftArrowHead();
	            this.state = 682;
	            this.oC_Dash();
	            this.state = 683;
	            this.match(CypherParser.T__4);
	            this.state = 684;
	            this.oC_Variable();
	            this.state = 685;
	            this.oC_RelType();
	            this.state = 686;
	            this.match(CypherParser.T__5);
	            this.state = 687;
	            this.oC_Dash();
	            this.state = 688;
	            this.match(CypherParser.T__2);
	            this.state = 690;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 689;
	                this.match(CypherParser.SP);
	            }

	            this.state = 692;
	            this.match(CypherParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_LoadCSV() {
	    let localctx = new OC_LoadCSVContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CypherParser.RULE_oC_LoadCSV);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 696;
	        this.match(CypherParser.LOAD);
	        this.state = 697;
	        this.match(CypherParser.SP);
	        this.state = 698;
	        this.match(CypherParser.CSV);
	        this.state = 699;
	        this.match(CypherParser.SP);
	        this.state = 704;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.WITH) {
	            this.state = 700;
	            this.match(CypherParser.WITH);
	            this.state = 701;
	            this.match(CypherParser.SP);
	            this.state = 702;
	            this.match(CypherParser.HEADERS);
	            this.state = 703;
	            this.match(CypherParser.SP);
	        }

	        this.state = 706;
	        this.match(CypherParser.FROM);
	        this.state = 707;
	        this.match(CypherParser.SP);
	        this.state = 708;
	        this.oC_Expression();
	        this.state = 709;
	        this.match(CypherParser.SP);
	        this.state = 710;
	        this.match(CypherParser.AS);
	        this.state = 711;
	        this.match(CypherParser.SP);
	        this.state = 712;
	        this.oC_Variable();
	        this.state = 713;
	        this.match(CypherParser.SP);
	        this.state = 717;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.FIELDTERMINATOR) {
	            this.state = 714;
	            this.match(CypherParser.FIELDTERMINATOR);
	            this.state = 715;
	            this.match(CypherParser.SP);
	            this.state = 716;
	            this.match(CypherParser.StringLiteral);
	        }

	        this.state = 720;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        if(la_===1) {
	            this.state = 719;
	            this.match(CypherParser.SP);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Match() {
	    let localctx = new OC_MatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CypherParser.RULE_oC_Match);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 724;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.OPTIONAL) {
	            this.state = 722;
	            this.match(CypherParser.OPTIONAL);
	            this.state = 723;
	            this.match(CypherParser.SP);
	        }

	        this.state = 726;
	        this.match(CypherParser.MATCH);
	        this.state = 728;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        if(la_===1) {
	            this.state = 727;
	            this.match(CypherParser.SP);

	        }
	        this.state = 730;
	        this.oC_Pattern();
	        this.state = 734;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 731;
	                this.oC_Hint(); 
	            }
	            this.state = 736;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
	        }

	        this.state = 741;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        if(la_===1) {
	            this.state = 738;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 737;
	                this.match(CypherParser.SP);
	            }

	            this.state = 740;
	            this.oC_Where();

	        }
	        this.state = 745;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        if(la_===1) {
	            this.state = 743;
	            this.match(CypherParser.SP);
	            this.state = 744;
	            this.oC_Order();

	        }
	        this.state = 749;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        if(la_===1) {
	            this.state = 747;
	            this.match(CypherParser.SP);
	            this.state = 748;
	            this.oC_Skip();

	        }
	        this.state = 753;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        if(la_===1) {
	            this.state = 751;
	            this.match(CypherParser.SP);
	            this.state = 752;
	            this.oC_Limit();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Unwind() {
	    let localctx = new OC_UnwindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CypherParser.RULE_oC_Unwind);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 755;
	        this.match(CypherParser.UNWIND);
	        this.state = 757;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 756;
	            this.match(CypherParser.SP);
	        }

	        this.state = 759;
	        this.oC_Expression();
	        this.state = 760;
	        this.match(CypherParser.SP);
	        this.state = 761;
	        this.match(CypherParser.AS);
	        this.state = 762;
	        this.match(CypherParser.SP);
	        this.state = 763;
	        this.oC_Variable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Merge() {
	    let localctx = new OC_MergeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CypherParser.RULE_oC_Merge);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 765;
	        this.match(CypherParser.MERGE);
	        this.state = 767;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        if(la_===1) {
	            this.state = 766;
	            this.match(CypherParser.SP);

	        }
	        this.state = 769;
	        this.oC_PatternPart();
	        this.state = 774;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,70,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 770;
	                this.match(CypherParser.SP);
	                this.state = 771;
	                this.oC_MergeAction(); 
	            }
	            this.state = 776;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,70,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_MergeAction() {
	    let localctx = new OC_MergeActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CypherParser.RULE_oC_MergeAction);
	    try {
	        this.state = 787;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 777;
	            this.match(CypherParser.ON);
	            this.state = 778;
	            this.match(CypherParser.SP);
	            this.state = 779;
	            this.match(CypherParser.MATCH);
	            this.state = 780;
	            this.match(CypherParser.SP);
	            this.state = 781;
	            this.oC_Set();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 782;
	            this.match(CypherParser.ON);
	            this.state = 783;
	            this.match(CypherParser.SP);
	            this.state = 784;
	            this.match(CypherParser.CREATE);
	            this.state = 785;
	            this.match(CypherParser.SP);
	            this.state = 786;
	            this.oC_Set();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Create() {
	    let localctx = new OC_CreateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CypherParser.RULE_oC_Create);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 789;
	        this.match(CypherParser.CREATE);
	        this.state = 791;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        if(la_===1) {
	            this.state = 790;
	            this.match(CypherParser.SP);

	        }
	        this.state = 793;
	        this.oC_Pattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CreateUnique() {
	    let localctx = new OC_CreateUniqueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CypherParser.RULE_oC_CreateUnique);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 795;
	        this.match(CypherParser.CREATE);
	        this.state = 796;
	        this.match(CypherParser.SP);
	        this.state = 797;
	        this.match(CypherParser.UNIQUE);
	        this.state = 799;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        if(la_===1) {
	            this.state = 798;
	            this.match(CypherParser.SP);

	        }
	        this.state = 801;
	        this.oC_Pattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Set() {
	    let localctx = new OC_SetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CypherParser.RULE_oC_Set);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 803;
	        this.match(CypherParser.SET);
	        this.state = 805;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 804;
	            this.match(CypherParser.SP);
	        }

	        this.state = 807;
	        this.oC_SetItem();
	        this.state = 818;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,77,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 809;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 808;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 811;
	                this.match(CypherParser.T__6);
	                this.state = 813;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 812;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 815;
	                this.oC_SetItem(); 
	            }
	            this.state = 820;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,77,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SetItem() {
	    let localctx = new OC_SetItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CypherParser.RULE_oC_SetItem);
	    var _la = 0; // Token type
	    try {
	        this.state = 857;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 821;
	            this.oC_PropertyExpression();
	            this.state = 823;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 822;
	                this.match(CypherParser.SP);
	            }

	            this.state = 825;
	            this.match(CypherParser.T__1);
	            this.state = 827;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 826;
	                this.match(CypherParser.SP);
	            }

	            this.state = 829;
	            this.oC_Expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 831;
	            this.oC_Variable();
	            this.state = 833;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 832;
	                this.match(CypherParser.SP);
	            }

	            this.state = 835;
	            this.match(CypherParser.T__1);
	            this.state = 837;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 836;
	                this.match(CypherParser.SP);
	            }

	            this.state = 839;
	            this.oC_Expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 841;
	            this.oC_Variable();
	            this.state = 843;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 842;
	                this.match(CypherParser.SP);
	            }

	            this.state = 845;
	            this.match(CypherParser.T__7);
	            this.state = 847;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 846;
	                this.match(CypherParser.SP);
	            }

	            this.state = 849;
	            this.oC_Expression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 851;
	            this.oC_Variable();
	            this.state = 853;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 852;
	                this.match(CypherParser.SP);
	            }

	            this.state = 855;
	            this.oC_NodeLabels();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Delete() {
	    let localctx = new OC_DeleteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CypherParser.RULE_oC_Delete);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 861;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.DETACH) {
	            this.state = 859;
	            this.match(CypherParser.DETACH);
	            this.state = 860;
	            this.match(CypherParser.SP);
	        }

	        this.state = 863;
	        this.match(CypherParser.DELETE);
	        this.state = 865;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 864;
	            this.match(CypherParser.SP);
	        }

	        this.state = 867;
	        this.oC_Expression();
	        this.state = 878;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 869;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 868;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 871;
	                this.match(CypherParser.T__6);
	                this.state = 873;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 872;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 875;
	                this.oC_Expression(); 
	            }
	            this.state = 880;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Remove() {
	    let localctx = new OC_RemoveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CypherParser.RULE_oC_Remove);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 881;
	        this.match(CypherParser.REMOVE);
	        this.state = 882;
	        this.match(CypherParser.SP);
	        this.state = 883;
	        this.oC_RemoveItem();
	        this.state = 894;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 885;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 884;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 887;
	                this.match(CypherParser.T__6);
	                this.state = 889;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 888;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 891;
	                this.oC_RemoveItem(); 
	            }
	            this.state = 896;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RemoveItem() {
	    let localctx = new OC_RemoveItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CypherParser.RULE_oC_RemoveItem);
	    try {
	        this.state = 901;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 897;
	            this.oC_Variable();
	            this.state = 898;
	            this.oC_NodeLabels();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 900;
	            this.oC_PropertyExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Foreach() {
	    let localctx = new OC_ForeachContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CypherParser.RULE_oC_Foreach);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 903;
	        this.match(CypherParser.FOREACH);
	        this.state = 905;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 904;
	            this.match(CypherParser.SP);
	        }

	        this.state = 907;
	        this.match(CypherParser.T__2);
	        this.state = 909;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 908;
	            this.match(CypherParser.SP);
	        }

	        this.state = 911;
	        this.oC_Variable();
	        this.state = 912;
	        this.match(CypherParser.SP);
	        this.state = 913;
	        this.match(CypherParser.IN);
	        this.state = 914;
	        this.match(CypherParser.SP);
	        this.state = 915;
	        this.oC_Expression();
	        this.state = 917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 916;
	            this.match(CypherParser.SP);
	        }

	        this.state = 919;
	        this.match(CypherParser.T__8);
	        this.state = 922; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 920;
	        		this.match(CypherParser.SP);
	        		this.state = 921;
	        		this.oC_UpdatingClause();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 924; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,98, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 927;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 926;
	            this.match(CypherParser.SP);
	        }

	        this.state = 929;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_InQueryCall() {
	    let localctx = new OC_InQueryCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, CypherParser.RULE_oC_InQueryCall);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 933;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.OPTIONAL) {
	            this.state = 931;
	            this.match(CypherParser.OPTIONAL);
	            this.state = 932;
	            this.match(CypherParser.SP);
	        }

	        this.state = 935;
	        this.match(CypherParser.CALL);
	        this.state = 936;
	        this.match(CypherParser.SP);
	        this.state = 937;
	        this.oC_ExplicitProcedureInvocation();
	        this.state = 944;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        if(la_===1) {
	            this.state = 939;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 938;
	                this.match(CypherParser.SP);
	            }

	            this.state = 941;
	            this.match(CypherParser.YIELD);
	            this.state = 942;
	            this.match(CypherParser.SP);
	            this.state = 943;
	            this.oC_YieldItems();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SubQuery() {
	    let localctx = new OC_SubQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CypherParser.RULE_oC_SubQuery);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 948;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.OPTIONAL) {
	            this.state = 946;
	            this.match(CypherParser.OPTIONAL);
	            this.state = 947;
	            this.match(CypherParser.SP);
	        }

	        this.state = 950;
	        this.match(CypherParser.CALL);
	        this.state = 952;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        if(la_===1) {
	            this.state = 951;
	            this.match(CypherParser.SP);

	        }
	        this.state = 955;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__2) {
	            this.state = 954;
	            this.oC_SubQueryVariableScope();
	        }

	        this.state = 958;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 957;
	            this.match(CypherParser.SP);
	        }

	        this.state = 960;
	        this.match(CypherParser.T__9);
	        this.state = 962;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 961;
	            this.match(CypherParser.SP);
	        }

	        this.state = 964;
	        this.oC_Query();
	        this.state = 966;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 965;
	            this.match(CypherParser.SP);
	        }

	        this.state = 968;
	        this.match(CypherParser.T__10);
	        this.state = 970;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        if(la_===1) {
	            this.state = 969;
	            this.match(CypherParser.SP);

	        }
	        this.state = 973;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	        if(la_===1) {
	            this.state = 972;
	            this.oC_SubQueryDirective();

	        }
	        this.state = 976;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        if(la_===1) {
	            this.state = 975;
	            this.match(CypherParser.SP);

	        }
	        this.state = 979;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        if(la_===1) {
	            this.state = 978;
	            this.oC_Return();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SubQueryVariableScope() {
	    let localctx = new OC_SubQueryVariableScopeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CypherParser.RULE_oC_SubQueryVariableScope);
	    var _la = 0; // Token type
	    try {
	        this.state = 1014;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 981;
	            this.match(CypherParser.T__2);
	            this.state = 983;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	            if(la_===1) {
	                this.state = 982;
	                this.match(CypherParser.SP);

	            }
	            this.state = 986;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (CypherParser.CYPHER - 49)) | (1 << (CypherParser.EXPLAIN - 49)) | (1 << (CypherParser.PROFILE - 49)) | (1 << (CypherParser.USE - 49)) | (1 << (CypherParser.USING - 49)) | (1 << (CypherParser.PERIODIC - 49)) | (1 << (CypherParser.COMMIT - 49)) | (1 << (CypherParser.UNION - 49)) | (1 << (CypherParser.ALL - 49)) | (1 << (CypherParser.CREATE - 49)) | (1 << (CypherParser.DROP - 49)) | (1 << (CypherParser.INDEX - 49)) | (1 << (CypherParser.ON - 49)) | (1 << (CypherParser.CONSTRAINT - 49)) | (1 << (CypherParser.ASSERT - 49)) | (1 << (CypherParser.IS - 49)) | (1 << (CypherParser.UNIQUE - 49)) | (1 << (CypherParser.EXISTS - 49)) | (1 << (CypherParser.LOAD - 49)) | (1 << (CypherParser.CSV - 49)) | (1 << (CypherParser.WITH - 49)) | (1 << (CypherParser.HEADERS - 49)) | (1 << (CypherParser.FROM - 49)) | (1 << (CypherParser.AS - 49)) | (1 << (CypherParser.FIELDTERMINATOR - 49)) | (1 << (CypherParser.OPTIONAL - 49)) | (1 << (CypherParser.MATCH - 49)) | (1 << (CypherParser.UNWIND - 49)) | (1 << (CypherParser.MERGE - 49)) | (1 << (CypherParser.SET - 49)) | (1 << (CypherParser.DETACH - 49)) | (1 << (CypherParser.DELETE - 49)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (CypherParser.REMOVE - 81)) | (1 << (CypherParser.FOREACH - 81)) | (1 << (CypherParser.IN - 81)) | (1 << (CypherParser.CALL - 81)) | (1 << (CypherParser.YIELD - 81)) | (1 << (CypherParser.DISTINCT - 81)) | (1 << (CypherParser.RETURN - 81)) | (1 << (CypherParser.ORDER - 81)) | (1 << (CypherParser.BY - 81)) | (1 << (CypherParser.L_SKIP - 81)) | (1 << (CypherParser.LIMIT - 81)) | (1 << (CypherParser.ASCENDING - 81)) | (1 << (CypherParser.ASC - 81)) | (1 << (CypherParser.DESCENDING - 81)) | (1 << (CypherParser.DESC - 81)) | (1 << (CypherParser.JOIN - 81)) | (1 << (CypherParser.SCAN - 81)) | (1 << (CypherParser.START - 81)) | (1 << (CypherParser.NODE - 81)) | (1 << (CypherParser.WHERE - 81)) | (1 << (CypherParser.SHORTESTPATH - 81)) | (1 << (CypherParser.OR - 81)) | (1 << (CypherParser.XOR - 81)) | (1 << (CypherParser.AND - 81)) | (1 << (CypherParser.NOT - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CypherParser.STARTS - 113)) | (1 << (CypherParser.ENDS - 113)) | (1 << (CypherParser.CONTAINS - 113)) | (1 << (CypherParser.NULL - 113)) | (1 << (CypherParser.COUNT - 113)) | (1 << (CypherParser.FILTER - 113)) | (1 << (CypherParser.EXTRACT - 113)) | (1 << (CypherParser.ANY - 113)) | (1 << (CypherParser.NONE - 113)) | (1 << (CypherParser.SINGLE - 113)) | (1 << (CypherParser.TRUE - 113)) | (1 << (CypherParser.FALSE - 113)) | (1 << (CypherParser.REDUCE - 113)) | (1 << (CypherParser.CASE - 113)) | (1 << (CypherParser.ELSE - 113)) | (1 << (CypherParser.END - 113)) | (1 << (CypherParser.WHEN - 113)) | (1 << (CypherParser.THEN - 113)) | (1 << (CypherParser.HexLetter - 113)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (CypherParser.FOR - 145)) | (1 << (CypherParser.REQUIRE - 145)) | (1 << (CypherParser.MANDATORY - 145)) | (1 << (CypherParser.SCALAR - 145)) | (1 << (CypherParser.OF - 145)) | (1 << (CypherParser.ADD - 145)) | (1 << (CypherParser.UnescapedSymbolicName - 145)) | (1 << (CypherParser.EscapedSymbolicName - 145)))) !== 0)) {
	                this.state = 985;
	                this.oC_Variable();
	            }

	            this.state = 998;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 989;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 988;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 991;
	                    this.match(CypherParser.T__6);
	                    this.state = 993;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 992;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 995;
	                    this.oC_Variable(); 
	                }
	                this.state = 1000;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
	            }

	            this.state = 1002;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1001;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1004;
	            this.match(CypherParser.T__3);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1005;
	            this.match(CypherParser.T__2);
	            this.state = 1007;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1006;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1009;
	            this.match(CypherParser.T__11);
	            this.state = 1011;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1010;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1013;
	            this.match(CypherParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SubQueryDirective() {
	    let localctx = new OC_SubQueryDirectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CypherParser.RULE_oC_SubQueryDirective);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1017;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1016;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1019;
	        this.match(CypherParser.IN);
	        this.state = 1026;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        if(la_===1) {
	            this.state = 1020;
	            this.match(CypherParser.SP);
	            this.state = 1022;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (CypherParser.HexInteger - 133)) | (1 << (CypherParser.DecimalInteger - 133)) | (1 << (CypherParser.OctalInteger - 133)))) !== 0)) {
	                this.state = 1021;
	                this.oC_IntegerLiteral();
	            }

	            this.state = 1024;
	            this.match(CypherParser.SP);
	            this.state = 1025;
	            this.match(CypherParser.CONCURRENT);

	        }
	        this.state = 1028;
	        this.match(CypherParser.SP);
	        this.state = 1029;
	        this.match(CypherParser.TRANSACTIONS);
	        this.state = 1037;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	        if(la_===1) {
	            this.state = 1030;
	            this.match(CypherParser.SP);
	            this.state = 1031;
	            this.match(CypherParser.OF);
	            this.state = 1032;
	            this.match(CypherParser.SP);
	            this.state = 1033;
	            this.oC_IntegerLiteral();
	            this.state = 1034;
	            this.match(CypherParser.SP);
	            this.state = 1035;
	            this.match(CypherParser.ROWS);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_StandaloneCall() {
	    let localctx = new OC_StandaloneCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CypherParser.RULE_oC_StandaloneCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1039;
	        this.match(CypherParser.CALL);
	        this.state = 1040;
	        this.match(CypherParser.SP);
	        this.state = 1043;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1041;
	            this.oC_ExplicitProcedureInvocation();
	            break;

	        case 2:
	            this.state = 1042;
	            this.oC_ImplicitProcedureInvocation();
	            break;

	        }
	        this.state = 1049;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        if(la_===1) {
	            this.state = 1045;
	            this.match(CypherParser.SP);
	            this.state = 1046;
	            this.match(CypherParser.YIELD);
	            this.state = 1047;
	            this.match(CypherParser.SP);
	            this.state = 1048;
	            this.oC_YieldItems();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_YieldItems() {
	    let localctx = new OC_YieldItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CypherParser.RULE_oC_YieldItems);
	    var _la = 0; // Token type
	    try {
	        this.state = 1066;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.CYPHER:
	        case CypherParser.EXPLAIN:
	        case CypherParser.PROFILE:
	        case CypherParser.USE:
	        case CypherParser.USING:
	        case CypherParser.PERIODIC:
	        case CypherParser.COMMIT:
	        case CypherParser.UNION:
	        case CypherParser.ALL:
	        case CypherParser.CREATE:
	        case CypherParser.DROP:
	        case CypherParser.INDEX:
	        case CypherParser.ON:
	        case CypherParser.CONSTRAINT:
	        case CypherParser.ASSERT:
	        case CypherParser.IS:
	        case CypherParser.UNIQUE:
	        case CypherParser.EXISTS:
	        case CypherParser.LOAD:
	        case CypherParser.CSV:
	        case CypherParser.WITH:
	        case CypherParser.HEADERS:
	        case CypherParser.FROM:
	        case CypherParser.AS:
	        case CypherParser.FIELDTERMINATOR:
	        case CypherParser.OPTIONAL:
	        case CypherParser.MATCH:
	        case CypherParser.UNWIND:
	        case CypherParser.MERGE:
	        case CypherParser.SET:
	        case CypherParser.DETACH:
	        case CypherParser.DELETE:
	        case CypherParser.REMOVE:
	        case CypherParser.FOREACH:
	        case CypherParser.IN:
	        case CypherParser.CALL:
	        case CypherParser.YIELD:
	        case CypherParser.DISTINCT:
	        case CypherParser.RETURN:
	        case CypherParser.ORDER:
	        case CypherParser.BY:
	        case CypherParser.L_SKIP:
	        case CypherParser.LIMIT:
	        case CypherParser.ASCENDING:
	        case CypherParser.ASC:
	        case CypherParser.DESCENDING:
	        case CypherParser.DESC:
	        case CypherParser.JOIN:
	        case CypherParser.SCAN:
	        case CypherParser.START:
	        case CypherParser.NODE:
	        case CypherParser.WHERE:
	        case CypherParser.SHORTESTPATH:
	        case CypherParser.OR:
	        case CypherParser.XOR:
	        case CypherParser.AND:
	        case CypherParser.NOT:
	        case CypherParser.STARTS:
	        case CypherParser.ENDS:
	        case CypherParser.CONTAINS:
	        case CypherParser.NULL:
	        case CypherParser.COUNT:
	        case CypherParser.FILTER:
	        case CypherParser.EXTRACT:
	        case CypherParser.ANY:
	        case CypherParser.NONE:
	        case CypherParser.SINGLE:
	        case CypherParser.TRUE:
	        case CypherParser.FALSE:
	        case CypherParser.REDUCE:
	        case CypherParser.CASE:
	        case CypherParser.ELSE:
	        case CypherParser.END:
	        case CypherParser.WHEN:
	        case CypherParser.THEN:
	        case CypherParser.HexLetter:
	        case CypherParser.FOR:
	        case CypherParser.REQUIRE:
	        case CypherParser.MANDATORY:
	        case CypherParser.SCALAR:
	        case CypherParser.OF:
	        case CypherParser.ADD:
	        case CypherParser.UnescapedSymbolicName:
	        case CypherParser.EscapedSymbolicName:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1051;
	            this.oC_YieldItem();
	            this.state = 1062;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,130,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1053;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1052;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1055;
	                    this.match(CypherParser.T__6);
	                    this.state = 1057;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1056;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1059;
	                    this.oC_YieldItem(); 
	                }
	                this.state = 1064;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,130,this._ctx);
	            }

	            break;
	        case CypherParser.T__12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1065;
	            this.match(CypherParser.T__12);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_YieldItem() {
	    let localctx = new OC_YieldItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CypherParser.RULE_oC_YieldItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1073;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	        if(la_===1) {
	            this.state = 1068;
	            this.oC_ProcedureResultField();
	            this.state = 1069;
	            this.match(CypherParser.SP);
	            this.state = 1070;
	            this.match(CypherParser.AS);
	            this.state = 1071;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1075;
	        this.oC_Variable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_With() {
	    let localctx = new OC_WithContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CypherParser.RULE_oC_With);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1077;
	        this.match(CypherParser.WITH);
	        this.state = 1082;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	        if(la_===1) {
	            this.state = 1079;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1078;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1081;
	            this.match(CypherParser.DISTINCT);

	        }
	        this.state = 1084;
	        this.match(CypherParser.SP);
	        this.state = 1085;
	        this.oC_ReturnBody();
	        this.state = 1090;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
	        if(la_===1) {
	            this.state = 1087;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1086;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1089;
	            this.oC_Where();

	        }
	        this.state = 1094;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	        if(la_===1) {
	            this.state = 1092;
	            this.match(CypherParser.SP);
	            this.state = 1093;
	            this.oC_Order();

	        }
	        this.state = 1098;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	        if(la_===1) {
	            this.state = 1096;
	            this.match(CypherParser.SP);
	            this.state = 1097;
	            this.oC_Skip();

	        }
	        this.state = 1102;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
	        if(la_===1) {
	            this.state = 1100;
	            this.match(CypherParser.SP);
	            this.state = 1101;
	            this.oC_Limit();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Return() {
	    let localctx = new OC_ReturnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CypherParser.RULE_oC_Return);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1104;
	        this.match(CypherParser.RETURN);
	        this.state = 1109;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        if(la_===1) {
	            this.state = 1106;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1105;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1108;
	            this.match(CypherParser.DISTINCT);

	        }
	        this.state = 1111;
	        this.match(CypherParser.SP);
	        this.state = 1112;
	        this.oC_ReturnBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ReturnBody() {
	    let localctx = new OC_ReturnBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CypherParser.RULE_oC_ReturnBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1114;
	        this.oC_ReturnItems();
	        this.state = 1117;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
	        if(la_===1) {
	            this.state = 1115;
	            this.match(CypherParser.SP);
	            this.state = 1116;
	            this.oC_Order();

	        }
	        this.state = 1121;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
	        if(la_===1) {
	            this.state = 1119;
	            this.match(CypherParser.SP);
	            this.state = 1120;
	            this.oC_Skip();

	        }
	        this.state = 1125;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	        if(la_===1) {
	            this.state = 1123;
	            this.match(CypherParser.SP);
	            this.state = 1124;
	            this.oC_Limit();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ReturnItems() {
	    let localctx = new OC_ReturnItemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CypherParser.RULE_oC_ReturnItems);
	    var _la = 0; // Token type
	    try {
	        this.state = 1155;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.T__11:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1127;
	            this.match(CypherParser.T__11);
	            this.state = 1138;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,147,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1129;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1128;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1131;
	                    this.match(CypherParser.T__6);
	                    this.state = 1133;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1132;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1135;
	                    this.oC_ReturnItem(); 
	                }
	                this.state = 1140;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,147,this._ctx);
	            }

	            break;
	        case CypherParser.T__2:
	        case CypherParser.T__4:
	        case CypherParser.T__9:
	        case CypherParser.T__12:
	        case CypherParser.T__14:
	        case CypherParser.T__28:
	        case CypherParser.CYPHER:
	        case CypherParser.EXPLAIN:
	        case CypherParser.PROFILE:
	        case CypherParser.USE:
	        case CypherParser.USING:
	        case CypherParser.PERIODIC:
	        case CypherParser.COMMIT:
	        case CypherParser.UNION:
	        case CypherParser.ALL:
	        case CypherParser.CREATE:
	        case CypherParser.DROP:
	        case CypherParser.INDEX:
	        case CypherParser.ON:
	        case CypherParser.CONSTRAINT:
	        case CypherParser.ASSERT:
	        case CypherParser.IS:
	        case CypherParser.UNIQUE:
	        case CypherParser.EXISTS:
	        case CypherParser.LOAD:
	        case CypherParser.CSV:
	        case CypherParser.WITH:
	        case CypherParser.HEADERS:
	        case CypherParser.FROM:
	        case CypherParser.AS:
	        case CypherParser.FIELDTERMINATOR:
	        case CypherParser.OPTIONAL:
	        case CypherParser.MATCH:
	        case CypherParser.UNWIND:
	        case CypherParser.MERGE:
	        case CypherParser.SET:
	        case CypherParser.DETACH:
	        case CypherParser.DELETE:
	        case CypherParser.REMOVE:
	        case CypherParser.FOREACH:
	        case CypherParser.IN:
	        case CypherParser.CALL:
	        case CypherParser.YIELD:
	        case CypherParser.DISTINCT:
	        case CypherParser.RETURN:
	        case CypherParser.ORDER:
	        case CypherParser.BY:
	        case CypherParser.L_SKIP:
	        case CypherParser.LIMIT:
	        case CypherParser.ASCENDING:
	        case CypherParser.ASC:
	        case CypherParser.DESCENDING:
	        case CypherParser.DESC:
	        case CypherParser.JOIN:
	        case CypherParser.SCAN:
	        case CypherParser.START:
	        case CypherParser.NODE:
	        case CypherParser.WHERE:
	        case CypherParser.SHORTEST:
	        case CypherParser.SHORTESTPATH:
	        case CypherParser.ALLSHORTESTPATHS:
	        case CypherParser.OR:
	        case CypherParser.XOR:
	        case CypherParser.AND:
	        case CypherParser.NOT:
	        case CypherParser.STARTS:
	        case CypherParser.ENDS:
	        case CypherParser.CONTAINS:
	        case CypherParser.NULL:
	        case CypherParser.COUNT:
	        case CypherParser.FILTER:
	        case CypherParser.EXTRACT:
	        case CypherParser.ANY:
	        case CypherParser.NONE:
	        case CypherParser.SINGLE:
	        case CypherParser.TRUE:
	        case CypherParser.FALSE:
	        case CypherParser.REDUCE:
	        case CypherParser.CASE:
	        case CypherParser.ELSE:
	        case CypherParser.END:
	        case CypherParser.WHEN:
	        case CypherParser.THEN:
	        case CypherParser.StringLiteral:
	        case CypherParser.HexInteger:
	        case CypherParser.DecimalInteger:
	        case CypherParser.OctalInteger:
	        case CypherParser.HexLetter:
	        case CypherParser.ExponentDecimalReal:
	        case CypherParser.RegularDecimalReal:
	        case CypherParser.FOR:
	        case CypherParser.REQUIRE:
	        case CypherParser.MANDATORY:
	        case CypherParser.SCALAR:
	        case CypherParser.OF:
	        case CypherParser.ADD:
	        case CypherParser.UnescapedSymbolicName:
	        case CypherParser.EscapedSymbolicName:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1141;
	            this.oC_ReturnItem();
	            this.state = 1152;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,150,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1143;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1142;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1145;
	                    this.match(CypherParser.T__6);
	                    this.state = 1147;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1146;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1149;
	                    this.oC_ReturnItem(); 
	                }
	                this.state = 1154;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,150,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ReturnItem() {
	    let localctx = new OC_ReturnItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CypherParser.RULE_oC_ReturnItem);
	    try {
	        this.state = 1164;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1157;
	            this.oC_Expression();
	            this.state = 1158;
	            this.match(CypherParser.SP);
	            this.state = 1159;
	            this.match(CypherParser.AS);
	            this.state = 1160;
	            this.match(CypherParser.SP);
	            this.state = 1161;
	            this.oC_Variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1163;
	            this.oC_Expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Order() {
	    let localctx = new OC_OrderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CypherParser.RULE_oC_Order);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1166;
	        this.match(CypherParser.ORDER);
	        this.state = 1167;
	        this.match(CypherParser.SP);
	        this.state = 1168;
	        this.match(CypherParser.BY);
	        this.state = 1169;
	        this.match(CypherParser.SP);
	        this.state = 1170;
	        this.oC_SortItem();
	        this.state = 1178;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CypherParser.T__6) {
	            this.state = 1171;
	            this.match(CypherParser.T__6);
	            this.state = 1173;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1172;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1175;
	            this.oC_SortItem();
	            this.state = 1180;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Skip() {
	    let localctx = new OC_SkipContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CypherParser.RULE_oC_Skip);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1181;
	        _la = this._input.LA(1);
	        if(!(_la===CypherParser.L_SKIP || _la===CypherParser.L_OFFSET)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1182;
	        this.match(CypherParser.SP);
	        this.state = 1183;
	        this.oC_Expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Limit() {
	    let localctx = new OC_LimitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, CypherParser.RULE_oC_Limit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1185;
	        this.match(CypherParser.LIMIT);
	        this.state = 1186;
	        this.match(CypherParser.SP);
	        this.state = 1187;
	        this.oC_Expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SortItem() {
	    let localctx = new OC_SortItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, CypherParser.RULE_oC_SortItem);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1189;
	        this.oC_Expression();
	        this.state = 1194;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	        if(la_===1) {
	            this.state = 1191;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1190;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1193;
	            _la = this._input.LA(1);
	            if(!(((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (CypherParser.ASCENDING - 96)) | (1 << (CypherParser.ASC - 96)) | (1 << (CypherParser.DESCENDING - 96)) | (1 << (CypherParser.DESC - 96)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Hint() {
	    let localctx = new OC_HintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CypherParser.RULE_oC_Hint);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1197;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1196;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1236;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1199;
	            this.match(CypherParser.USING);
	            this.state = 1200;
	            this.match(CypherParser.SP);
	            this.state = 1201;
	            this.match(CypherParser.INDEX);
	            this.state = 1202;
	            this.match(CypherParser.SP);
	            this.state = 1203;
	            this.oC_Variable();
	            this.state = 1204;
	            this.oC_NodeLabel();
	            this.state = 1205;
	            this.match(CypherParser.T__2);
	            this.state = 1206;
	            this.oC_PropertyKeyName();
	            this.state = 1207;
	            this.match(CypherParser.T__3);
	            break;

	        case 2:
	            this.state = 1209;
	            this.match(CypherParser.USING);
	            this.state = 1210;
	            this.match(CypherParser.SP);
	            this.state = 1211;
	            this.match(CypherParser.JOIN);
	            this.state = 1212;
	            this.match(CypherParser.SP);
	            this.state = 1213;
	            this.match(CypherParser.ON);
	            this.state = 1214;
	            this.match(CypherParser.SP);
	            this.state = 1215;
	            this.oC_Variable();
	            this.state = 1226;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,160,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1217;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1216;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1219;
	                    this.match(CypherParser.T__6);
	                    this.state = 1221;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1220;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1223;
	                    this.oC_Variable(); 
	                }
	                this.state = 1228;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,160,this._ctx);
	            }

	            break;

	        case 3:
	            this.state = 1229;
	            this.match(CypherParser.USING);
	            this.state = 1230;
	            this.match(CypherParser.SP);
	            this.state = 1231;
	            this.match(CypherParser.SCAN);
	            this.state = 1232;
	            this.match(CypherParser.SP);
	            this.state = 1233;
	            this.oC_Variable();
	            this.state = 1234;
	            this.oC_NodeLabel();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_IdentifiedIndexLookup() {
	    let localctx = new OC_IdentifiedIndexLookupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CypherParser.RULE_oC_IdentifiedIndexLookup);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1238;
	        this.match(CypherParser.T__13);
	        this.state = 1239;
	        this.oC_SymbolicName();
	        this.state = 1240;
	        this.match(CypherParser.T__2);
	        this.state = 1241;
	        this.oC_SymbolicName();
	        this.state = 1242;
	        this.match(CypherParser.T__1);
	        this.state = 1245;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.StringLiteral:
	            this.state = 1243;
	            this.match(CypherParser.StringLiteral);
	            break;
	        case CypherParser.T__9:
	            this.state = 1244;
	            this.oC_LegacyParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1247;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_IndexQuery() {
	    let localctx = new OC_IndexQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CypherParser.RULE_oC_IndexQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1249;
	        this.match(CypherParser.T__13);
	        this.state = 1250;
	        this.oC_SymbolicName();
	        this.state = 1251;
	        this.match(CypherParser.T__2);
	        this.state = 1254;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.StringLiteral:
	            this.state = 1252;
	            this.match(CypherParser.StringLiteral);
	            break;
	        case CypherParser.T__9:
	            this.state = 1253;
	            this.oC_LegacyParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1256;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_IdLookup() {
	    let localctx = new OC_IdLookupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CypherParser.RULE_oC_IdLookup);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1258;
	        this.match(CypherParser.T__2);
	        this.state = 1262;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.HexInteger:
	        case CypherParser.DecimalInteger:
	        case CypherParser.OctalInteger:
	            this.state = 1259;
	            this.oC_LiteralIds();
	            break;
	        case CypherParser.T__9:
	            this.state = 1260;
	            this.oC_LegacyParameter();
	            break;
	        case CypherParser.T__11:
	            this.state = 1261;
	            this.match(CypherParser.T__11);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1264;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_LiteralIds() {
	    let localctx = new OC_LiteralIdsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CypherParser.RULE_oC_LiteralIds);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1266;
	        this.oC_IntegerLiteral();
	        this.state = 1277;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CypherParser.T__6 || _la===CypherParser.SP) {
	            this.state = 1268;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1267;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1270;
	            this.match(CypherParser.T__6);
	            this.state = 1272;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1271;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1274;
	            this.oC_IntegerLiteral();
	            this.state = 1279;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Where() {
	    let localctx = new OC_WhereContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CypherParser.RULE_oC_Where);
	    var _la = 0; // Token type
	    try {
	        this.state = 1321;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1280;
	            this.match(CypherParser.WHERE);
	            this.state = 1281;
	            this.match(CypherParser.SP);
	            this.state = 1283;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.NOT) {
	                this.state = 1282;
	                this.match(CypherParser.NOT);
	            }

	            this.state = 1286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1285;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1288;
	            this.match(CypherParser.EXISTS);
	            this.state = 1290;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1289;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1292;
	            this.match(CypherParser.T__9);
	            this.state = 1294;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1293;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1296;
	            this.oC_Expression();
	            this.state = 1298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1297;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1300;
	            this.match(CypherParser.T__10);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1302;
	            this.match(CypherParser.WHERE);
	            this.state = 1303;
	            this.match(CypherParser.SP);
	            this.state = 1304;
	            this.match(CypherParser.COUNT);
	            this.state = 1306;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1305;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1308;
	            this.match(CypherParser.T__9);
	            this.state = 1310;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1309;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1312;
	            this.oC_Expression();
	            this.state = 1314;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1313;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1316;
	            this.match(CypherParser.T__10);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1318;
	            this.match(CypherParser.WHERE);
	            this.state = 1319;
	            this.match(CypherParser.SP);
	            this.state = 1320;
	            this.oC_Expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Pattern() {
	    let localctx = new OC_PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CypherParser.RULE_oC_Pattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1323;
	        this.oC_PatternPart();
	        this.state = 1334;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,179,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1325;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1324;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1327;
	                this.match(CypherParser.T__6);
	                this.state = 1329;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	                if(la_===1) {
	                    this.state = 1328;
	                    this.match(CypherParser.SP);

	                }
	                this.state = 1331;
	                this.oC_PatternPart(); 
	            }
	            this.state = 1336;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,179,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PatternPart() {
	    let localctx = new OC_PatternPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CypherParser.RULE_oC_PatternPart);
	    var _la = 0; // Token type
	    try {
	        this.state = 1348;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1337;
	            this.oC_Variable();
	            this.state = 1339;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1338;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1341;
	            this.match(CypherParser.T__1);
	            this.state = 1343;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
	            if(la_===1) {
	                this.state = 1342;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1345;
	            this.oC_AnonymousPatternPart();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1347;
	            this.oC_AnonymousPatternPart();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_AnonymousPatternPart() {
	    let localctx = new OC_AnonymousPatternPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CypherParser.RULE_oC_AnonymousPatternPart);
	    try {
	        this.state = 1357;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.ALL:
	        case CypherParser.SHORTEST:
	        case CypherParser.SHORTESTPATH:
	        case CypherParser.ALLSHORTESTPATHS:
	        case CypherParser.ANY:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1350;
	            this.oC_ShortestPathPattern();
	            break;
	        case CypherParser.EOF:
	        case CypherParser.T__0:
	        case CypherParser.T__2:
	        case CypherParser.T__3:
	        case CypherParser.T__6:
	        case CypherParser.T__10:
	        case CypherParser.USING:
	        case CypherParser.UNION:
	        case CypherParser.CREATE:
	        case CypherParser.LOAD:
	        case CypherParser.WITH:
	        case CypherParser.OPTIONAL:
	        case CypherParser.MATCH:
	        case CypherParser.UNWIND:
	        case CypherParser.MERGE:
	        case CypherParser.SET:
	        case CypherParser.DETACH:
	        case CypherParser.DELETE:
	        case CypherParser.REMOVE:
	        case CypherParser.FOREACH:
	        case CypherParser.CALL:
	        case CypherParser.RETURN:
	        case CypherParser.WHERE:
	        case CypherParser.SP:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1354;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,183,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1351;
	                    this.oC_PatternElement(); 
	                }
	                this.state = 1356;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,183,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ShortestPathPattern() {
	    let localctx = new OC_ShortestPathPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CypherParser.RULE_oC_ShortestPathPattern);
	    var _la = 0; // Token type
	    try {
	        this.state = 1410;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1359;
	            this.match(CypherParser.SHORTESTPATH);
	            this.state = 1361;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1360;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1363;
	            this.match(CypherParser.T__2);
	            this.state = 1365;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	            if(la_===1) {
	                this.state = 1364;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1367;
	            this.oC_PatternElement();
	            this.state = 1369;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1368;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1371;
	            this.match(CypherParser.T__3);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1373;
	            this.match(CypherParser.ALLSHORTESTPATHS);
	            this.state = 1375;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1374;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1377;
	            this.match(CypherParser.T__2);
	            this.state = 1379;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
	            if(la_===1) {
	                this.state = 1378;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1381;
	            this.oC_PatternElement();
	            this.state = 1383;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1382;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1385;
	            this.match(CypherParser.T__3);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1387;
	            this.match(CypherParser.ALL);
	            this.state = 1388;
	            this.match(CypherParser.SP);
	            this.state = 1389;
	            this.match(CypherParser.SHORTEST);
	            this.state = 1390;
	            this.match(CypherParser.SP);
	            this.state = 1391;
	            this.oC_PatternElement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1392;
	            this.match(CypherParser.SHORTEST);
	            this.state = 1393;
	            this.match(CypherParser.SP);
	            this.state = 1394;
	            this.oC_IntegerLiteral();
	            this.state = 1397;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
	            if(la_===1) {
	                this.state = 1395;
	                this.match(CypherParser.SP);
	                this.state = 1396;
	                this.match(CypherParser.GROUPS);

	            }
	            this.state = 1399;
	            this.match(CypherParser.SP);
	            this.state = 1400;
	            this.oC_PatternElement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1402;
	            this.match(CypherParser.ANY);
	            this.state = 1403;
	            this.match(CypherParser.SP);
	            this.state = 1404;
	            this.match(CypherParser.SHORTEST);
	            this.state = 1405;
	            this.match(CypherParser.SP);
	            this.state = 1406;
	            this.oC_PatternElement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1407;
	            this.match(CypherParser.ANY);
	            this.state = 1408;
	            this.match(CypherParser.SP);
	            this.state = 1409;
	            this.oC_PatternElement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PatternElement() {
	    let localctx = new OC_PatternElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CypherParser.RULE_oC_PatternElement);
	    try {
	        this.state = 1429;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1412;
	            this.oC_NodePattern();
	            this.state = 1419;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,194,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1414;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	                    if(la_===1) {
	                        this.state = 1413;
	                        this.match(CypherParser.SP);

	                    }
	                    this.state = 1416;
	                    this.oC_PatternElementChain(); 
	                }
	                this.state = 1421;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,194,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1422;
	            this.oC_QuantifiedPathPattern();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1423;
	            this.oC_NodePattern();
	            this.state = 1425;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	            if(la_===1) {
	                this.state = 1424;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1427;
	            this.oC_QuantifiedPathPattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_OpenParen() {
	    let localctx = new OC_OpenParenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CypherParser.RULE_oC_OpenParen);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1431;
	        this.match(CypherParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CloseParen() {
	    let localctx = new OC_CloseParenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CypherParser.RULE_oC_CloseParen);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1433;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodePattern() {
	    let localctx = new OC_NodePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CypherParser.RULE_oC_NodePattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1435;
	        this.match(CypherParser.T__2);
	        this.state = 1437;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,197,this._ctx);
	        if(la_===1) {
	            this.state = 1436;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1443;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	        if(la_===1) {
	            this.state = 1439;
	            this.oC_Variable();
	            this.state = 1441;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
	            if(la_===1) {
	                this.state = 1440;
	                this.match(CypherParser.SP);

	            }

	        }
	        this.state = 1449;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__13) {
	            this.state = 1445;
	            this.oC_NodeLabels();
	            this.state = 1447;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	            if(la_===1) {
	                this.state = 1446;
	                this.match(CypherParser.SP);

	            }
	        }

	        this.state = 1455;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__9 || _la===CypherParser.T__28) {
	            this.state = 1451;
	            this.oC_Properties();
	            this.state = 1453;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
	            if(la_===1) {
	                this.state = 1452;
	                this.match(CypherParser.SP);

	            }
	        }

	        this.state = 1464;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.WHERE || _la===CypherParser.SP) {
	            this.state = 1458;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1457;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1460;
	            this.oC_Where();
	            this.state = 1462;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1461;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1466;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PatternElementChain() {
	    let localctx = new OC_PatternElementChainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CypherParser.RULE_oC_PatternElementChain);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1468;
	        this.oC_RelationshipPattern();
	        this.state = 1470;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,207,this._ctx);
	        if(la_===1) {
	            this.state = 1469;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1473;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        if(la_===1) {
	            this.state = 1472;
	            this.oC_NodePattern();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipPattern() {
	    let localctx = new OC_RelationshipPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CypherParser.RULE_oC_RelationshipPattern);
	    var _la = 0; // Token type
	    try {
	        this.state = 1576;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1475;
	            this.oC_LeftArrowHead();
	            this.state = 1477;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1476;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1479;
	            this.oC_Dash();
	            this.state = 1481;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
	            if(la_===1) {
	                this.state = 1480;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1484;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.T__4) {
	                this.state = 1483;
	                this.oC_RelationshipDetail();
	            }

	            this.state = 1487;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1486;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1489;
	            this.oC_Dash();
	            this.state = 1491;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1490;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1493;
	            this.oC_RightArrowHead();
	            this.state = 1502;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,216,this._ctx);
	            if(la_===1) {
	                this.state = 1496;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1495;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1498;
	                this.oC_PathPatternQuantifier();
	                this.state = 1500;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	                if(la_===1) {
	                    this.state = 1499;
	                    this.match(CypherParser.SP);

	                }

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1504;
	            this.oC_LeftArrowHead();
	            this.state = 1506;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1505;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1508;
	            this.oC_Dash();
	            this.state = 1510;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
	            if(la_===1) {
	                this.state = 1509;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1513;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.T__4) {
	                this.state = 1512;
	                this.oC_RelationshipDetail();
	            }

	            this.state = 1516;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1515;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1518;
	            this.oC_Dash();
	            this.state = 1527;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	            if(la_===1) {
	                this.state = 1521;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1520;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1523;
	                this.oC_PathPatternQuantifier();
	                this.state = 1525;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
	                if(la_===1) {
	                    this.state = 1524;
	                    this.match(CypherParser.SP);

	                }

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1529;
	            this.oC_Dash();
	            this.state = 1531;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	            if(la_===1) {
	                this.state = 1530;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1534;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.T__4) {
	                this.state = 1533;
	                this.oC_RelationshipDetail();
	            }

	            this.state = 1537;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1536;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1539;
	            this.oC_Dash();
	            this.state = 1541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1540;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1543;
	            this.oC_RightArrowHead();
	            this.state = 1552;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
	            if(la_===1) {
	                this.state = 1546;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1545;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1548;
	                this.oC_PathPatternQuantifier();
	                this.state = 1550;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
	                if(la_===1) {
	                    this.state = 1549;
	                    this.match(CypherParser.SP);

	                }

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1554;
	            this.oC_Dash();
	            this.state = 1556;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	            if(la_===1) {
	                this.state = 1555;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.T__4) {
	                this.state = 1558;
	                this.oC_RelationshipDetail();
	            }

	            this.state = 1562;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1561;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1564;
	            this.oC_Dash();
	            this.state = 1573;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	            if(la_===1) {
	                this.state = 1567;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1566;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1569;
	                this.oC_PathPatternQuantifier();
	                this.state = 1571;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
	                if(la_===1) {
	                    this.state = 1570;
	                    this.match(CypherParser.SP);

	                }

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1575;
	            this.oC_QuantifiedPathPattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipDetail() {
	    let localctx = new OC_RelationshipDetailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CypherParser.RULE_oC_RelationshipDetail);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1578;
	        this.match(CypherParser.T__4);
	        this.state = 1580;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
	        if(la_===1) {
	            this.state = 1579;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1586;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
	        if(la_===1) {
	            this.state = 1582;
	            this.oC_Variable();
	            this.state = 1584;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	            if(la_===1) {
	                this.state = 1583;
	                this.match(CypherParser.SP);

	            }

	        }
	        this.state = 1592;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__13) {
	            this.state = 1588;
	            this.oC_RelationshipTypes();
	            this.state = 1590;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	            if(la_===1) {
	                this.state = 1589;
	                this.match(CypherParser.SP);

	            }
	        }

	        this.state = 1595;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__11) {
	            this.state = 1594;
	            this.oC_RangeLiteral();
	        }

	        this.state = 1601;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__9 || _la===CypherParser.T__28) {
	            this.state = 1597;
	            this.oC_Properties();
	            this.state = 1599;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	            if(la_===1) {
	                this.state = 1598;
	                this.match(CypherParser.SP);

	            }
	        }

	        this.state = 1610;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.WHERE || _la===CypherParser.SP) {
	            this.state = 1604;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1603;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1606;
	            this.oC_Where();
	            this.state = 1608;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1607;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1612;
	        this.match(CypherParser.T__5);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_QuantifiedPathPattern() {
	    let localctx = new OC_QuantifiedPathPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CypherParser.RULE_oC_QuantifiedPathPattern);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1615;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1614;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1617;
	        this.oC_OpenParen();
	        this.state = 1619;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
	        if(la_===1) {
	            this.state = 1618;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1621;
	        this.oC_PatternElement();
	        this.state = 1623;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
	        if(la_===1) {
	            this.state = 1622;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1632;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.WHERE || _la===CypherParser.SP) {
	            this.state = 1626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1625;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1628;
	            this.oC_Where();
	            this.state = 1630;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1629;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 1634;
	        this.oC_CloseParen();
	        this.state = 1642;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,257,this._ctx);
	        if(la_===1) {
	            this.state = 1636;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1635;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1638;
	            this.oC_PathPatternQuantifier();
	            this.state = 1640;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
	            if(la_===1) {
	                this.state = 1639;
	                this.match(CypherParser.SP);

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PathPatternQuantifier() {
	    let localctx = new OC_PathPatternQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CypherParser.RULE_oC_PathPatternQuantifier);
	    var _la = 0; // Token type
	    try {
	        this.state = 1723;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1644;
	            this.match(CypherParser.T__9);
	            this.state = 1646;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
	            if(la_===1) {
	                this.state = 1645;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1649;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (CypherParser.HexInteger - 133)) | (1 << (CypherParser.DecimalInteger - 133)) | (1 << (CypherParser.OctalInteger - 133)))) !== 0)) {
	                this.state = 1648;
	                this.oC_IntegerLiteral();
	            }

	            this.state = 1652;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1651;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1654;
	            this.match(CypherParser.T__6);
	            this.state = 1656;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
	            if(la_===1) {
	                this.state = 1655;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1659;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (CypherParser.HexInteger - 133)) | (1 << (CypherParser.DecimalInteger - 133)) | (1 << (CypherParser.OctalInteger - 133)))) !== 0)) {
	                this.state = 1658;
	                this.oC_IntegerLiteral();
	            }

	            this.state = 1662;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1661;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1664;
	            this.match(CypherParser.T__10);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1665;
	            this.match(CypherParser.T__9);
	            this.state = 1667;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
	            if(la_===1) {
	                this.state = 1666;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1670;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (CypherParser.HexInteger - 133)) | (1 << (CypherParser.DecimalInteger - 133)) | (1 << (CypherParser.OctalInteger - 133)))) !== 0)) {
	                this.state = 1669;
	                this.oC_IntegerLiteral();
	            }

	            this.state = 1673;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
	            if(la_===1) {
	                this.state = 1672;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1676;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.T__6) {
	                this.state = 1675;
	                this.match(CypherParser.T__6);
	            }

	            this.state = 1679;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1678;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1681;
	            this.match(CypherParser.T__10);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1682;
	            this.match(CypherParser.T__9);
	            this.state = 1684;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,269,this._ctx);
	            if(la_===1) {
	                this.state = 1683;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1687;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (CypherParser.HexInteger - 133)) | (1 << (CypherParser.DecimalInteger - 133)) | (1 << (CypherParser.OctalInteger - 133)))) !== 0)) {
	                this.state = 1686;
	                this.oC_IntegerLiteral();
	            }

	            this.state = 1690;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1689;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1692;
	            this.match(CypherParser.T__10);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1693;
	            this.match(CypherParser.T__9);
	            this.state = 1695;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
	            if(la_===1) {
	                this.state = 1694;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1698;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.T__6) {
	                this.state = 1697;
	                this.match(CypherParser.T__6);
	            }

	            this.state = 1701;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
	            if(la_===1) {
	                this.state = 1700;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1704;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (CypherParser.HexInteger - 133)) | (1 << (CypherParser.DecimalInteger - 133)) | (1 << (CypherParser.OctalInteger - 133)))) !== 0)) {
	                this.state = 1703;
	                this.oC_IntegerLiteral();
	            }

	            this.state = 1707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1706;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1709;
	            this.match(CypherParser.T__10);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1710;
	            this.match(CypherParser.T__9);
	            this.state = 1712;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
	            if(la_===1) {
	                this.state = 1711;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1715;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.T__6) {
	                this.state = 1714;
	                this.match(CypherParser.T__6);
	            }

	            this.state = 1718;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1717;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1720;
	            this.match(CypherParser.T__10);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1721;
	            this.match(CypherParser.T__14);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1722;
	            this.match(CypherParser.T__11);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Properties() {
	    let localctx = new OC_PropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CypherParser.RULE_oC_Properties);
	    try {
	        this.state = 1728;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1725;
	            this.oC_MapLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1726;
	            this.oC_Parameter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1727;
	            this.oC_LegacyParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelType() {
	    let localctx = new OC_RelTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CypherParser.RULE_oC_RelType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1730;
	        this.match(CypherParser.T__13);
	        this.state = 1732;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1731;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1734;
	        this.oC_RelTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipTypes() {
	    let localctx = new OC_RelationshipTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, CypherParser.RULE_oC_RelationshipTypes);
	    var _la = 0; // Token type
	    try {
	        this.state = 1762;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,289,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1736;
	            this.match(CypherParser.T__13);
	            this.state = 1738;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1737;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1740;
	            this.oC_RelTypeName();
	            this.state = 1754;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,287,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1742;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1741;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1744;
	                    this.match(CypherParser.T__8);
	                    this.state = 1746;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.T__13) {
	                        this.state = 1745;
	                        this.match(CypherParser.T__13);
	                    }

	                    this.state = 1749;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1748;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1751;
	                    this.oC_RelTypeName(); 
	                }
	                this.state = 1756;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,287,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1757;
	            this.match(CypherParser.T__13);
	            this.state = 1759;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,288,this._ctx);
	            if(la_===1) {
	                this.state = 1758;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1761;
	            this.oC_RelationshipTypeTerm();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipTypeTerm() {
	    let localctx = new OC_RelationshipTypeTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, CypherParser.RULE_oC_RelationshipTypeTerm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1764;
	        this.oC_RelationshipTypeOr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipTypeOr() {
	    let localctx = new OC_RelationshipTypeOrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, CypherParser.RULE_oC_RelationshipTypeOr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1766;
	        this.oC_RelationshipTypeAnd();
	        this.state = 1777;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,292,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1768;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1767;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1770;
	                this.match(CypherParser.T__8);
	                this.state = 1772;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
	                if(la_===1) {
	                    this.state = 1771;
	                    this.match(CypherParser.SP);

	                }
	                this.state = 1774;
	                this.oC_RelationshipTypeAnd(); 
	            }
	            this.state = 1779;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,292,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipTypeAnd() {
	    let localctx = new OC_RelationshipTypeAndContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, CypherParser.RULE_oC_RelationshipTypeAnd);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1780;
	        this.oC_RelationshipTypeNot();
	        this.state = 1791;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,295,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1782;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1781;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1784;
	                this.match(CypherParser.T__15);
	                this.state = 1786;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,294,this._ctx);
	                if(la_===1) {
	                    this.state = 1785;
	                    this.match(CypherParser.SP);

	                }
	                this.state = 1788;
	                this.oC_RelationshipTypeNot(); 
	            }
	            this.state = 1793;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,295,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipTypeNot() {
	    let localctx = new OC_RelationshipTypeNotContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, CypherParser.RULE_oC_RelationshipTypeNot);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1801;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
	        if(la_===1) {
	            this.state = 1795;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1794;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1797;
	            this.match(CypherParser.T__16);
	            this.state = 1799;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
	            if(la_===1) {
	                this.state = 1798;
	                this.match(CypherParser.SP);

	            }

	        }
	        this.state = 1803;
	        this.oC_RelationshipTypeContainer();
	        this.state = 1805;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
	        if(la_===1) {
	            this.state = 1804;
	            this.match(CypherParser.SP);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipTypeContainer() {
	    let localctx = new OC_RelationshipTypeContainerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, CypherParser.RULE_oC_RelationshipTypeContainer);
	    try {
	        this.state = 1820;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1807;
	            this.oC_RelTypeName();
	            this.state = 1814;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,301,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1809;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,300,this._ctx);
	                    if(la_===1) {
	                        this.state = 1808;
	                        this.match(CypherParser.SP);

	                    }
	                    this.state = 1811;
	                    this.oC_RelationshipTypeTerm(); 
	                }
	                this.state = 1816;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,301,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1817;
	            this.oC_RelationshipTypeGroup();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1818;
	            this.oC_RelationshipTypeNotNested();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1819;
	            this.oC_RelationshipTypeAny();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipTypeGroup() {
	    let localctx = new OC_RelationshipTypeGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, CypherParser.RULE_oC_RelationshipTypeGroup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1823;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1822;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1825;
	        this.match(CypherParser.T__2);
	        this.state = 1827;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
	        if(la_===1) {
	            this.state = 1826;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1829;
	        this.oC_RelationshipTypeTerm();
	        this.state = 1831;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1830;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1833;
	        this.match(CypherParser.T__3);
	        this.state = 1835;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
	        if(la_===1) {
	            this.state = 1834;
	            this.match(CypherParser.SP);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipTypeNotNested() {
	    let localctx = new OC_RelationshipTypeNotNestedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, CypherParser.RULE_oC_RelationshipTypeNotNested);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1838;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1837;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1840;
	        this.match(CypherParser.T__16);
	        this.state = 1842;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
	        if(la_===1) {
	            this.state = 1841;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1844;
	        this.oC_RelationshipTypeTerm();
	        this.state = 1846;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
	        if(la_===1) {
	            this.state = 1845;
	            this.match(CypherParser.SP);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipTypeAny() {
	    let localctx = new OC_RelationshipTypeAnyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, CypherParser.RULE_oC_RelationshipTypeAny);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1849;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1848;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1851;
	        this.match(CypherParser.T__17);
	        this.state = 1853;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
	        if(la_===1) {
	            this.state = 1852;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1858;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,312,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1855;
	                this.oC_RelationshipTypeTerm(); 
	            }
	            this.state = 1860;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,312,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodeLabels() {
	    let localctx = new OC_NodeLabelsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, CypherParser.RULE_oC_NodeLabels);
	    var _la = 0; // Token type
	    try {
	        this.state = 1876;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,316,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1861;
	            this.oC_NodeLabel();
	            this.state = 1868;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,314,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1863;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 1862;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 1865;
	                    this.oC_NodeLabel(); 
	                }
	                this.state = 1870;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,314,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1871;
	            this.match(CypherParser.T__13);
	            this.state = 1873;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,315,this._ctx);
	            if(la_===1) {
	                this.state = 1872;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1875;
	            this.oC_NodeLabelTerm();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodeLabelTerm() {
	    let localctx = new OC_NodeLabelTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, CypherParser.RULE_oC_NodeLabelTerm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1878;
	        this.oC_NodeLabelOr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodeLabelOr() {
	    let localctx = new OC_NodeLabelOrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, CypherParser.RULE_oC_NodeLabelOr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1880;
	        this.oC_NodeLabelAnd();
	        this.state = 1891;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,319,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1882;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1881;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1884;
	                this.match(CypherParser.T__8);
	                this.state = 1886;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
	                if(la_===1) {
	                    this.state = 1885;
	                    this.match(CypherParser.SP);

	                }
	                this.state = 1888;
	                this.oC_NodeLabelAnd(); 
	            }
	            this.state = 1893;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,319,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodeLabelAnd() {
	    let localctx = new OC_NodeLabelAndContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, CypherParser.RULE_oC_NodeLabelAnd);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1894;
	        this.oC_NodeLabelNot();
	        this.state = 1905;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,322,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1896;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 1895;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 1898;
	                this.match(CypherParser.T__15);
	                this.state = 1900;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,321,this._ctx);
	                if(la_===1) {
	                    this.state = 1899;
	                    this.match(CypherParser.SP);

	                }
	                this.state = 1902;
	                this.oC_NodeLabelNot(); 
	            }
	            this.state = 1907;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,322,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodeLabelNot() {
	    let localctx = new OC_NodeLabelNotContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, CypherParser.RULE_oC_NodeLabelNot);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1915;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
	        if(la_===1) {
	            this.state = 1909;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 1908;
	                this.match(CypherParser.SP);
	            }

	            this.state = 1911;
	            this.match(CypherParser.T__16);
	            this.state = 1913;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
	            if(la_===1) {
	                this.state = 1912;
	                this.match(CypherParser.SP);

	            }

	        }
	        this.state = 1917;
	        this.oC_NodeLabelContainer();
	        this.state = 1919;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,326,this._ctx);
	        if(la_===1) {
	            this.state = 1918;
	            this.match(CypherParser.SP);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodeLabelContainer() {
	    let localctx = new OC_NodeLabelContainerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, CypherParser.RULE_oC_NodeLabelContainer);
	    try {
	        this.state = 1934;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,329,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1921;
	            this.oC_LabelName();
	            this.state = 1928;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,328,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1923;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,327,this._ctx);
	                    if(la_===1) {
	                        this.state = 1922;
	                        this.match(CypherParser.SP);

	                    }
	                    this.state = 1925;
	                    this.oC_NodeLabelTerm(); 
	                }
	                this.state = 1930;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,328,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1931;
	            this.oC_NodeLabelGroup();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1932;
	            this.oC_NodeLabelNotNested();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1933;
	            this.oC_NodeLabelAny();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodeLabelGroup() {
	    let localctx = new OC_NodeLabelGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, CypherParser.RULE_oC_NodeLabelGroup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1937;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1936;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1939;
	        this.match(CypherParser.T__2);
	        this.state = 1941;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,331,this._ctx);
	        if(la_===1) {
	            this.state = 1940;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1943;
	        this.oC_NodeLabelTerm();
	        this.state = 1945;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1944;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1947;
	        this.match(CypherParser.T__3);
	        this.state = 1949;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
	        if(la_===1) {
	            this.state = 1948;
	            this.match(CypherParser.SP);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodeLabelNotNested() {
	    let localctx = new OC_NodeLabelNotNestedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, CypherParser.RULE_oC_NodeLabelNotNested);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1952;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1951;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1954;
	        this.match(CypherParser.T__16);
	        this.state = 1956;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,335,this._ctx);
	        if(la_===1) {
	            this.state = 1955;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1958;
	        this.oC_NodeLabelTerm();
	        this.state = 1960;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,336,this._ctx);
	        if(la_===1) {
	            this.state = 1959;
	            this.match(CypherParser.SP);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodeLabelAny() {
	    let localctx = new OC_NodeLabelAnyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, CypherParser.RULE_oC_NodeLabelAny);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1963;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1962;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1965;
	        this.match(CypherParser.T__17);
	        this.state = 1967;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,338,this._ctx);
	        if(la_===1) {
	            this.state = 1966;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1972;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,339,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1969;
	                this.oC_NodeLabelTerm(); 
	            }
	            this.state = 1974;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,339,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodeLabel() {
	    let localctx = new OC_NodeLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, CypherParser.RULE_oC_NodeLabel);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1975;
	        this.match(CypherParser.T__13);
	        this.state = 1977;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 1976;
	            this.match(CypherParser.SP);
	        }

	        this.state = 1979;
	        this.oC_LabelName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RangeLiteral() {
	    let localctx = new OC_RangeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, CypherParser.RULE_oC_RangeLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1981;
	        this.match(CypherParser.T__11);
	        this.state = 1983;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,341,this._ctx);
	        if(la_===1) {
	            this.state = 1982;
	            this.match(CypherParser.SP);

	        }
	        this.state = 1989;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (CypherParser.HexInteger - 133)) | (1 << (CypherParser.DecimalInteger - 133)) | (1 << (CypherParser.OctalInteger - 133)))) !== 0)) {
	            this.state = 1985;
	            this.oC_IntegerLiteral();
	            this.state = 1987;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
	            if(la_===1) {
	                this.state = 1986;
	                this.match(CypherParser.SP);

	            }
	        }

	        this.state = 2001;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.T__18) {
	            this.state = 1991;
	            this.match(CypherParser.T__18);
	            this.state = 1993;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	            if(la_===1) {
	                this.state = 1992;
	                this.match(CypherParser.SP);

	            }
	            this.state = 1999;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (CypherParser.HexInteger - 133)) | (1 << (CypherParser.DecimalInteger - 133)) | (1 << (CypherParser.OctalInteger - 133)))) !== 0)) {
	                this.state = 1995;
	                this.oC_IntegerLiteral();
	                this.state = 1997;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,345,this._ctx);
	                if(la_===1) {
	                    this.state = 1996;
	                    this.match(CypherParser.SP);

	                }
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_LabelName() {
	    let localctx = new OC_LabelNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, CypherParser.RULE_oC_LabelName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2003;
	        this.oC_SchemaName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelTypeName() {
	    let localctx = new OC_RelTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, CypherParser.RULE_oC_RelTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2005;
	        this.oC_SchemaName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Expression() {
	    let localctx = new OC_ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, CypherParser.RULE_oC_Expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2007;
	        this.oC_OrExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_OrExpression() {
	    let localctx = new OC_OrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, CypherParser.RULE_oC_OrExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2009;
	        this.oC_XorExpression();
	        this.state = 2016;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,348,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2010;
	                this.match(CypherParser.SP);
	                this.state = 2011;
	                this.match(CypherParser.OR);
	                this.state = 2012;
	                this.match(CypherParser.SP);
	                this.state = 2013;
	                this.oC_XorExpression(); 
	            }
	            this.state = 2018;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,348,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_XorExpression() {
	    let localctx = new OC_XorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, CypherParser.RULE_oC_XorExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2019;
	        this.oC_AndExpression();
	        this.state = 2026;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,349,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2020;
	                this.match(CypherParser.SP);
	                this.state = 2021;
	                this.match(CypherParser.XOR);
	                this.state = 2022;
	                this.match(CypherParser.SP);
	                this.state = 2023;
	                this.oC_AndExpression(); 
	            }
	            this.state = 2028;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,349,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_AndExpression() {
	    let localctx = new OC_AndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, CypherParser.RULE_oC_AndExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2029;
	        this.oC_NotExpression();
	        this.state = 2036;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,350,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2030;
	                this.match(CypherParser.SP);
	                this.state = 2031;
	                this.match(CypherParser.AND);
	                this.state = 2032;
	                this.match(CypherParser.SP);
	                this.state = 2033;
	                this.oC_NotExpression(); 
	            }
	            this.state = 2038;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,350,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NotExpression() {
	    let localctx = new OC_NotExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, CypherParser.RULE_oC_NotExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2045;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,352,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2039;
	                this.match(CypherParser.NOT);
	                this.state = 2041;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2040;
	                    this.match(CypherParser.SP);
	                }
	         
	            }
	            this.state = 2047;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,352,this._ctx);
	        }

	        this.state = 2048;
	        this.oC_ComparisonExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ComparisonExpression() {
	    let localctx = new OC_ComparisonExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, CypherParser.RULE_oC_ComparisonExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2050;
	        this.oC_AddOrSubtractExpression();
	        this.state = 2057;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,354,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2052;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2051;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2054;
	                this.oC_PartialComparisonExpression(); 
	            }
	            this.state = 2059;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,354,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_AddOrSubtractExpression() {
	    let localctx = new OC_AddOrSubtractExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, CypherParser.RULE_oC_AddOrSubtractExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2060;
	        this.oC_MultiplyDivideModuloExpression();
	        this.state = 2079;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,360,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2077;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,359,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 2062;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 2061;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 2064;
	                    this.match(CypherParser.T__14);
	                    this.state = 2066;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 2065;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 2068;
	                    this.oC_MultiplyDivideModuloExpression();
	                    break;

	                case 2:
	                    this.state = 2070;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 2069;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 2072;
	                    this.match(CypherParser.T__12);
	                    this.state = 2074;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 2073;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 2076;
	                    this.oC_MultiplyDivideModuloExpression();
	                    break;

	                } 
	            }
	            this.state = 2081;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,360,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_MultiplyDivideModuloExpression() {
	    let localctx = new OC_MultiplyDivideModuloExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, CypherParser.RULE_oC_MultiplyDivideModuloExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2082;
	        this.oC_PowerOfExpression();
	        this.state = 2109;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,368,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2107;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,367,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 2084;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 2083;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 2086;
	                    this.match(CypherParser.T__11);
	                    this.state = 2088;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 2087;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 2090;
	                    this.oC_PowerOfExpression();
	                    break;

	                case 2:
	                    this.state = 2092;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 2091;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 2094;
	                    this.match(CypherParser.T__19);
	                    this.state = 2096;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 2095;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 2098;
	                    this.oC_PowerOfExpression();
	                    break;

	                case 3:
	                    this.state = 2100;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 2099;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 2102;
	                    this.match(CypherParser.T__17);
	                    this.state = 2104;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===CypherParser.SP) {
	                        this.state = 2103;
	                        this.match(CypherParser.SP);
	                    }

	                    this.state = 2106;
	                    this.oC_PowerOfExpression();
	                    break;

	                } 
	            }
	            this.state = 2111;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,368,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PowerOfExpression() {
	    let localctx = new OC_PowerOfExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, CypherParser.RULE_oC_PowerOfExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2112;
	        this.oC_UnaryAddOrSubtractExpression();
	        this.state = 2123;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,371,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2114;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2113;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2116;
	                this.match(CypherParser.T__20);
	                this.state = 2118;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2117;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2120;
	                this.oC_UnaryAddOrSubtractExpression(); 
	            }
	            this.state = 2125;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,371,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_UnaryAddOrSubtractExpression() {
	    let localctx = new OC_UnaryAddOrSubtractExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, CypherParser.RULE_oC_UnaryAddOrSubtractExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2132;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CypherParser.T__12 || _la===CypherParser.T__14) {
	            this.state = 2126;
	            _la = this._input.LA(1);
	            if(!(_la===CypherParser.T__12 || _la===CypherParser.T__14)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2128;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2127;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2134;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2135;
	        this.oC_StringListNullOperatorExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_StringListNullOperatorExpression() {
	    let localctx = new OC_StringListNullOperatorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, CypherParser.RULE_oC_StringListNullOperatorExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 2212;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,386,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2137;
	            this.oC_PropertyOrLabelsExpression();
	            this.state = 2208;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,385,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2206;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,384,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 2139;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===CypherParser.SP) {
	                            this.state = 2138;
	                            this.match(CypherParser.SP);
	                        }

	                        this.state = 2141;
	                        this.match(CypherParser.T__4);
	                        this.state = 2142;
	                        this.oC_Expression();
	                        this.state = 2143;
	                        this.match(CypherParser.T__5);
	                        break;

	                    case 2:
	                        this.state = 2161; 
	                        this._errHandler.sync(this);
	                        var _alt = 1;
	                        do {
	                        	switch (_alt) {
	                        	case 1:
	                        		this.state = 2146;
	                        		this._errHandler.sync(this);
	                        		_la = this._input.LA(1);
	                        		if(_la===CypherParser.SP) {
	                        		    this.state = 2145;
	                        		    this.match(CypherParser.SP);
	                        		}

	                        		this.state = 2148;
	                        		this.match(CypherParser.T__4);
	                        		this.state = 2149;
	                        		this.oC_Expression();
	                        		this.state = 2150;
	                        		this.match(CypherParser.T__5);
	                        		this.state = 2158;
	                        		this._errHandler.sync(this);
	                        		var _alt = this._interp.adaptivePredict(this._input,377,this._ctx)
	                        		while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                        		    if(_alt===1) {
	                        		        this.state = 2153;
	                        		        this._errHandler.sync(this);
	                        		        _la = this._input.LA(1);
	                        		        if(_la===CypherParser.SP) {
	                        		            this.state = 2152;
	                        		            this.match(CypherParser.SP);
	                        		        }

	                        		        this.state = 2155;
	                        		        this.oC_PropertyLookup(); 
	                        		    }
	                        		    this.state = 2160;
	                        		    this._errHandler.sync(this);
	                        		    _alt = this._interp.adaptivePredict(this._input,377,this._ctx);
	                        		}

	                        		break;
	                        	default:
	                        		throw new antlr4.error.NoViableAltException(this);
	                        	}
	                        	this.state = 2163; 
	                        	this._errHandler.sync(this);
	                        	_alt = this._interp.adaptivePredict(this._input,378, this._ctx);
	                        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	                        break;

	                    case 3:
	                        this.state = 2166;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===CypherParser.SP) {
	                            this.state = 2165;
	                            this.match(CypherParser.SP);
	                        }

	                        this.state = 2168;
	                        this.match(CypherParser.T__4);
	                        this.state = 2170;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__9) | (1 << CypherParser.T__12) | (1 << CypherParser.T__14) | (1 << CypherParser.T__28))) !== 0) || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (CypherParser.CYPHER - 49)) | (1 << (CypherParser.EXPLAIN - 49)) | (1 << (CypherParser.PROFILE - 49)) | (1 << (CypherParser.USE - 49)) | (1 << (CypherParser.USING - 49)) | (1 << (CypherParser.PERIODIC - 49)) | (1 << (CypherParser.COMMIT - 49)) | (1 << (CypherParser.UNION - 49)) | (1 << (CypherParser.ALL - 49)) | (1 << (CypherParser.CREATE - 49)) | (1 << (CypherParser.DROP - 49)) | (1 << (CypherParser.INDEX - 49)) | (1 << (CypherParser.ON - 49)) | (1 << (CypherParser.CONSTRAINT - 49)) | (1 << (CypherParser.ASSERT - 49)) | (1 << (CypherParser.IS - 49)) | (1 << (CypherParser.UNIQUE - 49)) | (1 << (CypherParser.EXISTS - 49)) | (1 << (CypherParser.LOAD - 49)) | (1 << (CypherParser.CSV - 49)) | (1 << (CypherParser.WITH - 49)) | (1 << (CypherParser.HEADERS - 49)) | (1 << (CypherParser.FROM - 49)) | (1 << (CypherParser.AS - 49)) | (1 << (CypherParser.FIELDTERMINATOR - 49)) | (1 << (CypherParser.OPTIONAL - 49)) | (1 << (CypherParser.MATCH - 49)) | (1 << (CypherParser.UNWIND - 49)) | (1 << (CypherParser.MERGE - 49)) | (1 << (CypherParser.SET - 49)) | (1 << (CypherParser.DETACH - 49)) | (1 << (CypherParser.DELETE - 49)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (CypherParser.REMOVE - 81)) | (1 << (CypherParser.FOREACH - 81)) | (1 << (CypherParser.IN - 81)) | (1 << (CypherParser.CALL - 81)) | (1 << (CypherParser.YIELD - 81)) | (1 << (CypherParser.DISTINCT - 81)) | (1 << (CypherParser.RETURN - 81)) | (1 << (CypherParser.ORDER - 81)) | (1 << (CypherParser.BY - 81)) | (1 << (CypherParser.L_SKIP - 81)) | (1 << (CypherParser.LIMIT - 81)) | (1 << (CypherParser.ASCENDING - 81)) | (1 << (CypherParser.ASC - 81)) | (1 << (CypherParser.DESCENDING - 81)) | (1 << (CypherParser.DESC - 81)) | (1 << (CypherParser.JOIN - 81)) | (1 << (CypherParser.SCAN - 81)) | (1 << (CypherParser.START - 81)) | (1 << (CypherParser.NODE - 81)) | (1 << (CypherParser.WHERE - 81)) | (1 << (CypherParser.SHORTEST - 81)) | (1 << (CypherParser.SHORTESTPATH - 81)) | (1 << (CypherParser.ALLSHORTESTPATHS - 81)) | (1 << (CypherParser.OR - 81)) | (1 << (CypherParser.XOR - 81)) | (1 << (CypherParser.AND - 81)) | (1 << (CypherParser.NOT - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CypherParser.STARTS - 113)) | (1 << (CypherParser.ENDS - 113)) | (1 << (CypherParser.CONTAINS - 113)) | (1 << (CypherParser.NULL - 113)) | (1 << (CypherParser.COUNT - 113)) | (1 << (CypherParser.FILTER - 113)) | (1 << (CypherParser.EXTRACT - 113)) | (1 << (CypherParser.ANY - 113)) | (1 << (CypherParser.NONE - 113)) | (1 << (CypherParser.SINGLE - 113)) | (1 << (CypherParser.TRUE - 113)) | (1 << (CypherParser.FALSE - 113)) | (1 << (CypherParser.REDUCE - 113)) | (1 << (CypherParser.CASE - 113)) | (1 << (CypherParser.ELSE - 113)) | (1 << (CypherParser.END - 113)) | (1 << (CypherParser.WHEN - 113)) | (1 << (CypherParser.THEN - 113)) | (1 << (CypherParser.StringLiteral - 113)) | (1 << (CypherParser.HexInteger - 113)) | (1 << (CypherParser.DecimalInteger - 113)) | (1 << (CypherParser.OctalInteger - 113)) | (1 << (CypherParser.HexLetter - 113)) | (1 << (CypherParser.ExponentDecimalReal - 113)) | (1 << (CypherParser.RegularDecimalReal - 113)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (CypherParser.FOR - 145)) | (1 << (CypherParser.REQUIRE - 145)) | (1 << (CypherParser.MANDATORY - 145)) | (1 << (CypherParser.SCALAR - 145)) | (1 << (CypherParser.OF - 145)) | (1 << (CypherParser.ADD - 145)) | (1 << (CypherParser.UnescapedSymbolicName - 145)) | (1 << (CypherParser.EscapedSymbolicName - 145)))) !== 0)) {
	                            this.state = 2169;
	                            this.oC_Expression();
	                        }

	                        this.state = 2172;
	                        this.match(CypherParser.T__18);
	                        this.state = 2174;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__9) | (1 << CypherParser.T__12) | (1 << CypherParser.T__14) | (1 << CypherParser.T__28))) !== 0) || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (CypherParser.CYPHER - 49)) | (1 << (CypherParser.EXPLAIN - 49)) | (1 << (CypherParser.PROFILE - 49)) | (1 << (CypherParser.USE - 49)) | (1 << (CypherParser.USING - 49)) | (1 << (CypherParser.PERIODIC - 49)) | (1 << (CypherParser.COMMIT - 49)) | (1 << (CypherParser.UNION - 49)) | (1 << (CypherParser.ALL - 49)) | (1 << (CypherParser.CREATE - 49)) | (1 << (CypherParser.DROP - 49)) | (1 << (CypherParser.INDEX - 49)) | (1 << (CypherParser.ON - 49)) | (1 << (CypherParser.CONSTRAINT - 49)) | (1 << (CypherParser.ASSERT - 49)) | (1 << (CypherParser.IS - 49)) | (1 << (CypherParser.UNIQUE - 49)) | (1 << (CypherParser.EXISTS - 49)) | (1 << (CypherParser.LOAD - 49)) | (1 << (CypherParser.CSV - 49)) | (1 << (CypherParser.WITH - 49)) | (1 << (CypherParser.HEADERS - 49)) | (1 << (CypherParser.FROM - 49)) | (1 << (CypherParser.AS - 49)) | (1 << (CypherParser.FIELDTERMINATOR - 49)) | (1 << (CypherParser.OPTIONAL - 49)) | (1 << (CypherParser.MATCH - 49)) | (1 << (CypherParser.UNWIND - 49)) | (1 << (CypherParser.MERGE - 49)) | (1 << (CypherParser.SET - 49)) | (1 << (CypherParser.DETACH - 49)) | (1 << (CypherParser.DELETE - 49)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (CypherParser.REMOVE - 81)) | (1 << (CypherParser.FOREACH - 81)) | (1 << (CypherParser.IN - 81)) | (1 << (CypherParser.CALL - 81)) | (1 << (CypherParser.YIELD - 81)) | (1 << (CypherParser.DISTINCT - 81)) | (1 << (CypherParser.RETURN - 81)) | (1 << (CypherParser.ORDER - 81)) | (1 << (CypherParser.BY - 81)) | (1 << (CypherParser.L_SKIP - 81)) | (1 << (CypherParser.LIMIT - 81)) | (1 << (CypherParser.ASCENDING - 81)) | (1 << (CypherParser.ASC - 81)) | (1 << (CypherParser.DESCENDING - 81)) | (1 << (CypherParser.DESC - 81)) | (1 << (CypherParser.JOIN - 81)) | (1 << (CypherParser.SCAN - 81)) | (1 << (CypherParser.START - 81)) | (1 << (CypherParser.NODE - 81)) | (1 << (CypherParser.WHERE - 81)) | (1 << (CypherParser.SHORTEST - 81)) | (1 << (CypherParser.SHORTESTPATH - 81)) | (1 << (CypherParser.ALLSHORTESTPATHS - 81)) | (1 << (CypherParser.OR - 81)) | (1 << (CypherParser.XOR - 81)) | (1 << (CypherParser.AND - 81)) | (1 << (CypherParser.NOT - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CypherParser.STARTS - 113)) | (1 << (CypherParser.ENDS - 113)) | (1 << (CypherParser.CONTAINS - 113)) | (1 << (CypherParser.NULL - 113)) | (1 << (CypherParser.COUNT - 113)) | (1 << (CypherParser.FILTER - 113)) | (1 << (CypherParser.EXTRACT - 113)) | (1 << (CypherParser.ANY - 113)) | (1 << (CypherParser.NONE - 113)) | (1 << (CypherParser.SINGLE - 113)) | (1 << (CypherParser.TRUE - 113)) | (1 << (CypherParser.FALSE - 113)) | (1 << (CypherParser.REDUCE - 113)) | (1 << (CypherParser.CASE - 113)) | (1 << (CypherParser.ELSE - 113)) | (1 << (CypherParser.END - 113)) | (1 << (CypherParser.WHEN - 113)) | (1 << (CypherParser.THEN - 113)) | (1 << (CypherParser.StringLiteral - 113)) | (1 << (CypherParser.HexInteger - 113)) | (1 << (CypherParser.DecimalInteger - 113)) | (1 << (CypherParser.OctalInteger - 113)) | (1 << (CypherParser.HexLetter - 113)) | (1 << (CypherParser.ExponentDecimalReal - 113)) | (1 << (CypherParser.RegularDecimalReal - 113)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (CypherParser.FOR - 145)) | (1 << (CypherParser.REQUIRE - 145)) | (1 << (CypherParser.MANDATORY - 145)) | (1 << (CypherParser.SCALAR - 145)) | (1 << (CypherParser.OF - 145)) | (1 << (CypherParser.ADD - 145)) | (1 << (CypherParser.UnescapedSymbolicName - 145)) | (1 << (CypherParser.EscapedSymbolicName - 145)))) !== 0)) {
	                            this.state = 2173;
	                            this.oC_Expression();
	                        }

	                        this.state = 2176;
	                        this.match(CypherParser.T__5);
	                        break;

	                    case 4:
	                        this.state = 2190;
	                        this._errHandler.sync(this);
	                        var la_ = this._interp.adaptivePredict(this._input,382,this._ctx);
	                        switch(la_) {
	                        case 1:
	                            this.state = 2177;
	                            this.oC_RegularExpression();
	                            break;

	                        case 2:
	                            this.state = 2178;
	                            this.match(CypherParser.SP);
	                            this.state = 2179;
	                            this.match(CypherParser.IN);
	                            break;

	                        case 3:
	                            this.state = 2180;
	                            this.match(CypherParser.SP);
	                            this.state = 2181;
	                            this.match(CypherParser.STARTS);
	                            this.state = 2182;
	                            this.match(CypherParser.SP);
	                            this.state = 2183;
	                            this.match(CypherParser.WITH);
	                            break;

	                        case 4:
	                            this.state = 2184;
	                            this.match(CypherParser.SP);
	                            this.state = 2185;
	                            this.match(CypherParser.ENDS);
	                            this.state = 2186;
	                            this.match(CypherParser.SP);
	                            this.state = 2187;
	                            this.match(CypherParser.WITH);
	                            break;

	                        case 5:
	                            this.state = 2188;
	                            this.match(CypherParser.SP);
	                            this.state = 2189;
	                            this.match(CypherParser.CONTAINS);
	                            break;

	                        }
	                        this.state = 2193;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===CypherParser.SP) {
	                            this.state = 2192;
	                            this.match(CypherParser.SP);
	                        }

	                        this.state = 2195;
	                        this.oC_PropertyOrLabelsExpression();
	                        break;

	                    case 5:
	                        this.state = 2196;
	                        this.match(CypherParser.SP);
	                        this.state = 2197;
	                        this.match(CypherParser.IS);
	                        this.state = 2198;
	                        this.match(CypherParser.SP);
	                        this.state = 2199;
	                        this.match(CypherParser.NULL);
	                        break;

	                    case 6:
	                        this.state = 2200;
	                        this.match(CypherParser.SP);
	                        this.state = 2201;
	                        this.match(CypherParser.IS);
	                        this.state = 2202;
	                        this.match(CypherParser.SP);
	                        this.state = 2203;
	                        this.match(CypherParser.NOT);
	                        this.state = 2204;
	                        this.match(CypherParser.SP);
	                        this.state = 2205;
	                        this.match(CypherParser.NULL);
	                        break;

	                    } 
	                }
	                this.state = 2210;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,385,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2211;
	            this.oC_FunctionInvocation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RegularExpression() {
	    let localctx = new OC_RegularExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, CypherParser.RULE_oC_RegularExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2215;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2214;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2217;
	        this.match(CypherParser.T__21);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PropertyOrLabelsExpression() {
	    let localctx = new OC_PropertyOrLabelsExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, CypherParser.RULE_oC_PropertyOrLabelsExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2219;
	        this.oC_Atom();
	        this.state = 2226;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,389,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2221;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2220;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2223;
	                this.oC_PropertyLookup(); 
	            }
	            this.state = 2228;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,389,this._ctx);
	        }

	        this.state = 2233;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,391,this._ctx);
	        if(la_===1) {
	            this.state = 2230;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2229;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2232;
	            this.oC_NodeLabels();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NodeProjection() {
	    let localctx = new OC_NodeProjectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, CypherParser.RULE_oC_NodeProjection);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2235;
	        this.oC_Variable();
	        this.state = 2237;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2236;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2239;
	        this.match(CypherParser.T__9);
	        this.state = 2241;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2240;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2243;
	        this.oC_PropertyLookup();
	        this.state = 2245;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,394,this._ctx);
	        if(la_===1) {
	            this.state = 2244;
	            this.match(CypherParser.SP);

	        }
	        this.state = 2260;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===CypherParser.T__6 || _la===CypherParser.SP) {
	            this.state = 2248;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2247;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2250;
	            this.match(CypherParser.T__6);
	            this.state = 2252;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2251;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2254;
	            this.oC_PropertyLookup();
	            this.state = 2256;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,397,this._ctx);
	            if(la_===1) {
	                this.state = 2255;
	                this.match(CypherParser.SP);

	            }
	            this.state = 2262;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2263;
	        this.match(CypherParser.T__10);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Atom() {
	    let localctx = new OC_AtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, CypherParser.RULE_oC_Atom);
	    var _la = 0; // Token type
	    try {
	        this.state = 2429;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,433,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2265;
	            this.oC_Literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2266;
	            this.oC_NodeProjection();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2267;
	            this.oC_Parameter();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2268;
	            this.oC_LegacyParameter();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2269;
	            this.oC_CaseExpression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2270;
	            this.match(CypherParser.COUNT);
	            this.state = 2272;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2271;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2274;
	            this.match(CypherParser.T__2);
	            this.state = 2276;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2275;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2278;
	            this.match(CypherParser.T__11);
	            this.state = 2280;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2279;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2282;
	            this.match(CypherParser.T__3);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2283;
	            this.oC_ListComprehension();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2284;
	            this.oC_PatternComprehension();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2285;
	            this.match(CypherParser.FILTER);
	            this.state = 2287;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2286;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2289;
	            this.match(CypherParser.T__2);
	            this.state = 2291;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2290;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2293;
	            this.oC_FilterExpression();
	            this.state = 2295;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2294;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2297;
	            this.match(CypherParser.T__3);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2299;
	            this.match(CypherParser.EXTRACT);
	            this.state = 2301;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2300;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2303;
	            this.match(CypherParser.T__2);
	            this.state = 2305;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2304;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2307;
	            this.oC_FilterExpression();
	            this.state = 2309;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,407,this._ctx);
	            if(la_===1) {
	                this.state = 2308;
	                this.match(CypherParser.SP);

	            }
	            this.state = 2319;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,410,this._ctx);
	            if(la_===1) {
	                this.state = 2312;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2311;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2314;
	                this.match(CypherParser.T__8);
	                this.state = 2316;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2315;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2318;
	                this.oC_Expression();

	            }
	            this.state = 2322;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2321;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2324;
	            this.match(CypherParser.T__3);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2326;
	            this.oC_Reduce();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2327;
	            this.match(CypherParser.ALL);
	            this.state = 2329;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2328;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2331;
	            this.match(CypherParser.T__2);
	            this.state = 2333;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2332;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2335;
	            this.oC_FilterExpression();
	            this.state = 2337;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2336;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2339;
	            this.match(CypherParser.T__3);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2341;
	            this.match(CypherParser.ANY);
	            this.state = 2343;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2342;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2345;
	            this.match(CypherParser.T__2);
	            this.state = 2347;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2346;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2349;
	            this.oC_FilterExpression();
	            this.state = 2351;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2350;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2353;
	            this.match(CypherParser.T__3);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2355;
	            this.match(CypherParser.NONE);
	            this.state = 2357;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2356;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2359;
	            this.match(CypherParser.T__2);
	            this.state = 2361;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2360;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2363;
	            this.oC_FilterExpression();
	            this.state = 2365;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2364;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2367;
	            this.match(CypherParser.T__3);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2369;
	            this.match(CypherParser.SINGLE);
	            this.state = 2371;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2370;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2373;
	            this.match(CypherParser.T__2);
	            this.state = 2375;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2374;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2377;
	            this.oC_FilterExpression();
	            this.state = 2379;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2378;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2381;
	            this.match(CypherParser.T__3);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2383;
	            this.oC_ShortestPathPattern();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2384;
	            this.oC_RelationshipsPattern();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2385;
	            this.oC_ParenthesizedExpression();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 2386;
	            this.oC_FunctionInvocation();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 2387;
	            this.oC_Variable();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 2388;
	            this.oC_ExplicitProcedureInvocation();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 2389;
	            _la = this._input.LA(1);
	            if(!(_la===CypherParser.EXISTS || _la===CypherParser.COUNT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2391;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2390;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2393;
	            this.match(CypherParser.T__9);
	            this.state = 2395;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2394;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2397;
	            this.oC_RegularQuery();
	            this.state = 2399;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2398;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2401;
	            this.match(CypherParser.T__10);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 2403;
	            _la = this._input.LA(1);
	            if(!(_la===CypherParser.EXISTS || _la===CypherParser.COUNT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2405;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2404;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2407;
	            this.match(CypherParser.T__9);
	            this.state = 2409;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,428,this._ctx);
	            if(la_===1) {
	                this.state = 2408;
	                this.match(CypherParser.SP);

	            }
	            this.state = 2411;
	            this.oC_Pattern();
	            this.state = 2415;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,429,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2412;
	                    this.oC_Hint(); 
	                }
	                this.state = 2417;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,429,this._ctx);
	            }

	            this.state = 2422;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,431,this._ctx);
	            if(la_===1) {
	                this.state = 2419;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2418;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2421;
	                this.oC_Where();

	            }
	            this.state = 2425;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2424;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2427;
	            this.match(CypherParser.T__10);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Literal() {
	    let localctx = new OC_LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, CypherParser.RULE_oC_Literal);
	    try {
	        this.state = 2437;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.HexInteger:
	        case CypherParser.DecimalInteger:
	        case CypherParser.OctalInteger:
	        case CypherParser.ExponentDecimalReal:
	        case CypherParser.RegularDecimalReal:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2431;
	            this.oC_NumberLiteral();
	            break;
	        case CypherParser.StringLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2432;
	            this.match(CypherParser.StringLiteral);
	            break;
	        case CypherParser.TRUE:
	        case CypherParser.FALSE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2433;
	            this.oC_BooleanLiteral();
	            break;
	        case CypherParser.NULL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2434;
	            this.match(CypherParser.NULL);
	            break;
	        case CypherParser.T__9:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2435;
	            this.oC_MapLiteral();
	            break;
	        case CypherParser.T__4:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2436;
	            this.oC_ListLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_BooleanLiteral() {
	    let localctx = new OC_BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, CypherParser.RULE_oC_BooleanLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2439;
	        _la = this._input.LA(1);
	        if(!(_la===CypherParser.TRUE || _la===CypherParser.FALSE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ListLiteral() {
	    let localctx = new OC_ListLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, CypherParser.RULE_oC_ListLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2441;
	        this.match(CypherParser.T__4);
	        this.state = 2443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2442;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2462;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__9) | (1 << CypherParser.T__12) | (1 << CypherParser.T__14) | (1 << CypherParser.T__28))) !== 0) || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (CypherParser.CYPHER - 49)) | (1 << (CypherParser.EXPLAIN - 49)) | (1 << (CypherParser.PROFILE - 49)) | (1 << (CypherParser.USE - 49)) | (1 << (CypherParser.USING - 49)) | (1 << (CypherParser.PERIODIC - 49)) | (1 << (CypherParser.COMMIT - 49)) | (1 << (CypherParser.UNION - 49)) | (1 << (CypherParser.ALL - 49)) | (1 << (CypherParser.CREATE - 49)) | (1 << (CypherParser.DROP - 49)) | (1 << (CypherParser.INDEX - 49)) | (1 << (CypherParser.ON - 49)) | (1 << (CypherParser.CONSTRAINT - 49)) | (1 << (CypherParser.ASSERT - 49)) | (1 << (CypherParser.IS - 49)) | (1 << (CypherParser.UNIQUE - 49)) | (1 << (CypherParser.EXISTS - 49)) | (1 << (CypherParser.LOAD - 49)) | (1 << (CypherParser.CSV - 49)) | (1 << (CypherParser.WITH - 49)) | (1 << (CypherParser.HEADERS - 49)) | (1 << (CypherParser.FROM - 49)) | (1 << (CypherParser.AS - 49)) | (1 << (CypherParser.FIELDTERMINATOR - 49)) | (1 << (CypherParser.OPTIONAL - 49)) | (1 << (CypherParser.MATCH - 49)) | (1 << (CypherParser.UNWIND - 49)) | (1 << (CypherParser.MERGE - 49)) | (1 << (CypherParser.SET - 49)) | (1 << (CypherParser.DETACH - 49)) | (1 << (CypherParser.DELETE - 49)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (CypherParser.REMOVE - 81)) | (1 << (CypherParser.FOREACH - 81)) | (1 << (CypherParser.IN - 81)) | (1 << (CypherParser.CALL - 81)) | (1 << (CypherParser.YIELD - 81)) | (1 << (CypherParser.DISTINCT - 81)) | (1 << (CypherParser.RETURN - 81)) | (1 << (CypherParser.ORDER - 81)) | (1 << (CypherParser.BY - 81)) | (1 << (CypherParser.L_SKIP - 81)) | (1 << (CypherParser.LIMIT - 81)) | (1 << (CypherParser.ASCENDING - 81)) | (1 << (CypherParser.ASC - 81)) | (1 << (CypherParser.DESCENDING - 81)) | (1 << (CypherParser.DESC - 81)) | (1 << (CypherParser.JOIN - 81)) | (1 << (CypherParser.SCAN - 81)) | (1 << (CypherParser.START - 81)) | (1 << (CypherParser.NODE - 81)) | (1 << (CypherParser.WHERE - 81)) | (1 << (CypherParser.SHORTEST - 81)) | (1 << (CypherParser.SHORTESTPATH - 81)) | (1 << (CypherParser.ALLSHORTESTPATHS - 81)) | (1 << (CypherParser.OR - 81)) | (1 << (CypherParser.XOR - 81)) | (1 << (CypherParser.AND - 81)) | (1 << (CypherParser.NOT - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CypherParser.STARTS - 113)) | (1 << (CypherParser.ENDS - 113)) | (1 << (CypherParser.CONTAINS - 113)) | (1 << (CypherParser.NULL - 113)) | (1 << (CypherParser.COUNT - 113)) | (1 << (CypherParser.FILTER - 113)) | (1 << (CypherParser.EXTRACT - 113)) | (1 << (CypherParser.ANY - 113)) | (1 << (CypherParser.NONE - 113)) | (1 << (CypherParser.SINGLE - 113)) | (1 << (CypherParser.TRUE - 113)) | (1 << (CypherParser.FALSE - 113)) | (1 << (CypherParser.REDUCE - 113)) | (1 << (CypherParser.CASE - 113)) | (1 << (CypherParser.ELSE - 113)) | (1 << (CypherParser.END - 113)) | (1 << (CypherParser.WHEN - 113)) | (1 << (CypherParser.THEN - 113)) | (1 << (CypherParser.StringLiteral - 113)) | (1 << (CypherParser.HexInteger - 113)) | (1 << (CypherParser.DecimalInteger - 113)) | (1 << (CypherParser.OctalInteger - 113)) | (1 << (CypherParser.HexLetter - 113)) | (1 << (CypherParser.ExponentDecimalReal - 113)) | (1 << (CypherParser.RegularDecimalReal - 113)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (CypherParser.FOR - 145)) | (1 << (CypherParser.REQUIRE - 145)) | (1 << (CypherParser.MANDATORY - 145)) | (1 << (CypherParser.SCALAR - 145)) | (1 << (CypherParser.OF - 145)) | (1 << (CypherParser.ADD - 145)) | (1 << (CypherParser.UnescapedSymbolicName - 145)) | (1 << (CypherParser.EscapedSymbolicName - 145)))) !== 0)) {
	            this.state = 2445;
	            this.oC_Expression();
	            this.state = 2447;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2446;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2459;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CypherParser.T__6) {
	                this.state = 2449;
	                this.match(CypherParser.T__6);
	                this.state = 2451;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2450;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2453;
	                this.oC_Expression();
	                this.state = 2455;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2454;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2461;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2464;
	        this.match(CypherParser.T__5);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Reduce() {
	    let localctx = new OC_ReduceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, CypherParser.RULE_oC_Reduce);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2466;
	        this.match(CypherParser.REDUCE);
	        this.state = 2468;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2467;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2470;
	        this.match(CypherParser.T__2);
	        this.state = 2472;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2471;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2474;
	        this.oC_Variable();
	        this.state = 2476;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2475;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2478;
	        this.match(CypherParser.T__1);
	        this.state = 2480;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2479;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2482;
	        this.oC_Expression();
	        this.state = 2484;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2483;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2486;
	        this.match(CypherParser.T__6);
	        this.state = 2488;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2487;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2490;
	        this.oC_IdInColl();
	        this.state = 2492;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2491;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2494;
	        this.match(CypherParser.T__8);
	        this.state = 2496;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2495;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2498;
	        this.oC_Expression();
	        this.state = 2500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2499;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2502;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PartialComparisonExpression() {
	    let localctx = new OC_PartialComparisonExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, CypherParser.RULE_oC_PartialComparisonExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 2534;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.T__1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2504;
	            this.match(CypherParser.T__1);
	            this.state = 2506;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2505;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2508;
	            this.oC_AddOrSubtractExpression();
	            break;
	        case CypherParser.T__22:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2509;
	            this.match(CypherParser.T__22);
	            this.state = 2511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2510;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2513;
	            this.oC_AddOrSubtractExpression();
	            break;
	        case CypherParser.T__23:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2514;
	            this.match(CypherParser.T__23);
	            this.state = 2516;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2515;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2518;
	            this.oC_AddOrSubtractExpression();
	            break;
	        case CypherParser.T__24:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2519;
	            this.match(CypherParser.T__24);
	            this.state = 2521;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2520;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2523;
	            this.oC_AddOrSubtractExpression();
	            break;
	        case CypherParser.T__25:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2524;
	            this.match(CypherParser.T__25);
	            this.state = 2526;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2525;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2528;
	            this.oC_AddOrSubtractExpression();
	            break;
	        case CypherParser.T__26:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2529;
	            this.match(CypherParser.T__26);
	            this.state = 2531;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2530;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2533;
	            this.oC_AddOrSubtractExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ParenthesizedExpression() {
	    let localctx = new OC_ParenthesizedExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, CypherParser.RULE_oC_ParenthesizedExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2536;
	        this.match(CypherParser.T__2);
	        this.state = 2538;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2537;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2540;
	        this.oC_Expression();
	        this.state = 2542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2541;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2544;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RelationshipsPattern() {
	    let localctx = new OC_RelationshipsPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, CypherParser.RULE_oC_RelationshipsPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2546;
	        this.oC_NodePattern();
	        this.state = 2551; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2548;
	        		this._errHandler.sync(this);
	        		var la_ = this._interp.adaptivePredict(this._input,459,this._ctx);
	        		if(la_===1) {
	        		    this.state = 2547;
	        		    this.match(CypherParser.SP);

	        		}
	        		this.state = 2550;
	        		this.oC_PatternElementChain();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2553; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,460, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_FilterExpression() {
	    let localctx = new OC_FilterExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, CypherParser.RULE_oC_FilterExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2555;
	        this.oC_IdInColl();
	        this.state = 2560;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,462,this._ctx);
	        if(la_===1) {
	            this.state = 2557;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2556;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2559;
	            this.oC_Where();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_IdInColl() {
	    let localctx = new OC_IdInCollContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, CypherParser.RULE_oC_IdInColl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2562;
	        this.oC_Variable();
	        this.state = 2563;
	        this.match(CypherParser.SP);
	        this.state = 2564;
	        this.match(CypherParser.IN);
	        this.state = 2565;
	        this.match(CypherParser.SP);
	        this.state = 2566;
	        this.oC_Expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_FunctionInvocation() {
	    let localctx = new OC_FunctionInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, CypherParser.RULE_oC_FunctionInvocation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2568;
	        this.oC_FunctionName();
	        this.state = 2570;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2569;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2572;
	        this.match(CypherParser.T__2);
	        this.state = 2574;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2573;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2580;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,466,this._ctx);
	        if(la_===1) {
	            this.state = 2576;
	            this.match(CypherParser.DISTINCT);
	            this.state = 2578;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2577;
	                this.match(CypherParser.SP);
	            }


	        }
	        this.state = 2599;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__9) | (1 << CypherParser.T__12) | (1 << CypherParser.T__14) | (1 << CypherParser.T__28))) !== 0) || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (CypherParser.CYPHER - 49)) | (1 << (CypherParser.EXPLAIN - 49)) | (1 << (CypherParser.PROFILE - 49)) | (1 << (CypherParser.USE - 49)) | (1 << (CypherParser.USING - 49)) | (1 << (CypherParser.PERIODIC - 49)) | (1 << (CypherParser.COMMIT - 49)) | (1 << (CypherParser.UNION - 49)) | (1 << (CypherParser.ALL - 49)) | (1 << (CypherParser.CREATE - 49)) | (1 << (CypherParser.DROP - 49)) | (1 << (CypherParser.INDEX - 49)) | (1 << (CypherParser.ON - 49)) | (1 << (CypherParser.CONSTRAINT - 49)) | (1 << (CypherParser.ASSERT - 49)) | (1 << (CypherParser.IS - 49)) | (1 << (CypherParser.UNIQUE - 49)) | (1 << (CypherParser.EXISTS - 49)) | (1 << (CypherParser.LOAD - 49)) | (1 << (CypherParser.CSV - 49)) | (1 << (CypherParser.WITH - 49)) | (1 << (CypherParser.HEADERS - 49)) | (1 << (CypherParser.FROM - 49)) | (1 << (CypherParser.AS - 49)) | (1 << (CypherParser.FIELDTERMINATOR - 49)) | (1 << (CypherParser.OPTIONAL - 49)) | (1 << (CypherParser.MATCH - 49)) | (1 << (CypherParser.UNWIND - 49)) | (1 << (CypherParser.MERGE - 49)) | (1 << (CypherParser.SET - 49)) | (1 << (CypherParser.DETACH - 49)) | (1 << (CypherParser.DELETE - 49)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (CypherParser.REMOVE - 81)) | (1 << (CypherParser.FOREACH - 81)) | (1 << (CypherParser.IN - 81)) | (1 << (CypherParser.CALL - 81)) | (1 << (CypherParser.YIELD - 81)) | (1 << (CypherParser.DISTINCT - 81)) | (1 << (CypherParser.RETURN - 81)) | (1 << (CypherParser.ORDER - 81)) | (1 << (CypherParser.BY - 81)) | (1 << (CypherParser.L_SKIP - 81)) | (1 << (CypherParser.LIMIT - 81)) | (1 << (CypherParser.ASCENDING - 81)) | (1 << (CypherParser.ASC - 81)) | (1 << (CypherParser.DESCENDING - 81)) | (1 << (CypherParser.DESC - 81)) | (1 << (CypherParser.JOIN - 81)) | (1 << (CypherParser.SCAN - 81)) | (1 << (CypherParser.START - 81)) | (1 << (CypherParser.NODE - 81)) | (1 << (CypherParser.WHERE - 81)) | (1 << (CypherParser.SHORTEST - 81)) | (1 << (CypherParser.SHORTESTPATH - 81)) | (1 << (CypherParser.ALLSHORTESTPATHS - 81)) | (1 << (CypherParser.OR - 81)) | (1 << (CypherParser.XOR - 81)) | (1 << (CypherParser.AND - 81)) | (1 << (CypherParser.NOT - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CypherParser.STARTS - 113)) | (1 << (CypherParser.ENDS - 113)) | (1 << (CypherParser.CONTAINS - 113)) | (1 << (CypherParser.NULL - 113)) | (1 << (CypherParser.COUNT - 113)) | (1 << (CypherParser.FILTER - 113)) | (1 << (CypherParser.EXTRACT - 113)) | (1 << (CypherParser.ANY - 113)) | (1 << (CypherParser.NONE - 113)) | (1 << (CypherParser.SINGLE - 113)) | (1 << (CypherParser.TRUE - 113)) | (1 << (CypherParser.FALSE - 113)) | (1 << (CypherParser.REDUCE - 113)) | (1 << (CypherParser.CASE - 113)) | (1 << (CypherParser.ELSE - 113)) | (1 << (CypherParser.END - 113)) | (1 << (CypherParser.WHEN - 113)) | (1 << (CypherParser.THEN - 113)) | (1 << (CypherParser.StringLiteral - 113)) | (1 << (CypherParser.HexInteger - 113)) | (1 << (CypherParser.DecimalInteger - 113)) | (1 << (CypherParser.OctalInteger - 113)) | (1 << (CypherParser.HexLetter - 113)) | (1 << (CypherParser.ExponentDecimalReal - 113)) | (1 << (CypherParser.RegularDecimalReal - 113)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (CypherParser.FOR - 145)) | (1 << (CypherParser.REQUIRE - 145)) | (1 << (CypherParser.MANDATORY - 145)) | (1 << (CypherParser.SCALAR - 145)) | (1 << (CypherParser.OF - 145)) | (1 << (CypherParser.ADD - 145)) | (1 << (CypherParser.UnescapedSymbolicName - 145)) | (1 << (CypherParser.EscapedSymbolicName - 145)))) !== 0)) {
	            this.state = 2582;
	            this.oC_Expression();
	            this.state = 2584;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2583;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2596;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CypherParser.T__6) {
	                this.state = 2586;
	                this.match(CypherParser.T__6);
	                this.state = 2588;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2587;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2590;
	                this.oC_Expression();
	                this.state = 2592;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2591;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2598;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2601;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_FunctionName() {
	    let localctx = new OC_FunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, CypherParser.RULE_oC_FunctionName);
	    try {
	        this.state = 2605;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,472,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2603;
	            this.oC_ProcedureName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2604;
	            this.match(CypherParser.EXISTS);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ExplicitProcedureInvocation() {
	    let localctx = new OC_ExplicitProcedureInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, CypherParser.RULE_oC_ExplicitProcedureInvocation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2607;
	        this.oC_ProcedureName();
	        this.state = 2609;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2608;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2611;
	        this.match(CypherParser.T__2);
	        this.state = 2613;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2612;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2632;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CypherParser.T__2) | (1 << CypherParser.T__4) | (1 << CypherParser.T__9) | (1 << CypherParser.T__12) | (1 << CypherParser.T__14) | (1 << CypherParser.T__28))) !== 0) || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (CypherParser.CYPHER - 49)) | (1 << (CypherParser.EXPLAIN - 49)) | (1 << (CypherParser.PROFILE - 49)) | (1 << (CypherParser.USE - 49)) | (1 << (CypherParser.USING - 49)) | (1 << (CypherParser.PERIODIC - 49)) | (1 << (CypherParser.COMMIT - 49)) | (1 << (CypherParser.UNION - 49)) | (1 << (CypherParser.ALL - 49)) | (1 << (CypherParser.CREATE - 49)) | (1 << (CypherParser.DROP - 49)) | (1 << (CypherParser.INDEX - 49)) | (1 << (CypherParser.ON - 49)) | (1 << (CypherParser.CONSTRAINT - 49)) | (1 << (CypherParser.ASSERT - 49)) | (1 << (CypherParser.IS - 49)) | (1 << (CypherParser.UNIQUE - 49)) | (1 << (CypherParser.EXISTS - 49)) | (1 << (CypherParser.LOAD - 49)) | (1 << (CypherParser.CSV - 49)) | (1 << (CypherParser.WITH - 49)) | (1 << (CypherParser.HEADERS - 49)) | (1 << (CypherParser.FROM - 49)) | (1 << (CypherParser.AS - 49)) | (1 << (CypherParser.FIELDTERMINATOR - 49)) | (1 << (CypherParser.OPTIONAL - 49)) | (1 << (CypherParser.MATCH - 49)) | (1 << (CypherParser.UNWIND - 49)) | (1 << (CypherParser.MERGE - 49)) | (1 << (CypherParser.SET - 49)) | (1 << (CypherParser.DETACH - 49)) | (1 << (CypherParser.DELETE - 49)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (CypherParser.REMOVE - 81)) | (1 << (CypherParser.FOREACH - 81)) | (1 << (CypherParser.IN - 81)) | (1 << (CypherParser.CALL - 81)) | (1 << (CypherParser.YIELD - 81)) | (1 << (CypherParser.DISTINCT - 81)) | (1 << (CypherParser.RETURN - 81)) | (1 << (CypherParser.ORDER - 81)) | (1 << (CypherParser.BY - 81)) | (1 << (CypherParser.L_SKIP - 81)) | (1 << (CypherParser.LIMIT - 81)) | (1 << (CypherParser.ASCENDING - 81)) | (1 << (CypherParser.ASC - 81)) | (1 << (CypherParser.DESCENDING - 81)) | (1 << (CypherParser.DESC - 81)) | (1 << (CypherParser.JOIN - 81)) | (1 << (CypherParser.SCAN - 81)) | (1 << (CypherParser.START - 81)) | (1 << (CypherParser.NODE - 81)) | (1 << (CypherParser.WHERE - 81)) | (1 << (CypherParser.SHORTEST - 81)) | (1 << (CypherParser.SHORTESTPATH - 81)) | (1 << (CypherParser.ALLSHORTESTPATHS - 81)) | (1 << (CypherParser.OR - 81)) | (1 << (CypherParser.XOR - 81)) | (1 << (CypherParser.AND - 81)) | (1 << (CypherParser.NOT - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CypherParser.STARTS - 113)) | (1 << (CypherParser.ENDS - 113)) | (1 << (CypherParser.CONTAINS - 113)) | (1 << (CypherParser.NULL - 113)) | (1 << (CypherParser.COUNT - 113)) | (1 << (CypherParser.FILTER - 113)) | (1 << (CypherParser.EXTRACT - 113)) | (1 << (CypherParser.ANY - 113)) | (1 << (CypherParser.NONE - 113)) | (1 << (CypherParser.SINGLE - 113)) | (1 << (CypherParser.TRUE - 113)) | (1 << (CypherParser.FALSE - 113)) | (1 << (CypherParser.REDUCE - 113)) | (1 << (CypherParser.CASE - 113)) | (1 << (CypherParser.ELSE - 113)) | (1 << (CypherParser.END - 113)) | (1 << (CypherParser.WHEN - 113)) | (1 << (CypherParser.THEN - 113)) | (1 << (CypherParser.StringLiteral - 113)) | (1 << (CypherParser.HexInteger - 113)) | (1 << (CypherParser.DecimalInteger - 113)) | (1 << (CypherParser.OctalInteger - 113)) | (1 << (CypherParser.HexLetter - 113)) | (1 << (CypherParser.ExponentDecimalReal - 113)) | (1 << (CypherParser.RegularDecimalReal - 113)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (CypherParser.FOR - 145)) | (1 << (CypherParser.REQUIRE - 145)) | (1 << (CypherParser.MANDATORY - 145)) | (1 << (CypherParser.SCALAR - 145)) | (1 << (CypherParser.OF - 145)) | (1 << (CypherParser.ADD - 145)) | (1 << (CypherParser.UnescapedSymbolicName - 145)) | (1 << (CypherParser.EscapedSymbolicName - 145)))) !== 0)) {
	            this.state = 2615;
	            this.oC_Expression();
	            this.state = 2617;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2616;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2629;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CypherParser.T__6) {
	                this.state = 2619;
	                this.match(CypherParser.T__6);
	                this.state = 2621;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2620;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2623;
	                this.oC_Expression();
	                this.state = 2625;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2624;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2631;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2634;
	        this.match(CypherParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ImplicitProcedureInvocation() {
	    let localctx = new OC_ImplicitProcedureInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, CypherParser.RULE_oC_ImplicitProcedureInvocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2636;
	        this.oC_ProcedureName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ProcedureResultField() {
	    let localctx = new OC_ProcedureResultFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, CypherParser.RULE_oC_ProcedureResultField);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2638;
	        this.oC_SymbolicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ProcedureName() {
	    let localctx = new OC_ProcedureNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, CypherParser.RULE_oC_ProcedureName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2640;
	        this.oC_Namespace();
	        this.state = 2641;
	        this.oC_SymbolicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Namespace() {
	    let localctx = new OC_NamespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, CypherParser.RULE_oC_Namespace);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2648;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,480,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2643;
	                this.oC_SymbolicName();
	                this.state = 2644;
	                this.match(CypherParser.T__27); 
	            }
	            this.state = 2650;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,480,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ListComprehension() {
	    let localctx = new OC_ListComprehensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, CypherParser.RULE_oC_ListComprehension);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2651;
	        this.match(CypherParser.T__4);
	        this.state = 2653;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2652;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2655;
	        this.oC_FilterExpression();
	        this.state = 2664;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
	        if(la_===1) {
	            this.state = 2657;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2656;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2659;
	            this.match(CypherParser.T__8);
	            this.state = 2661;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2660;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2663;
	            this.oC_Expression();

	        }
	        this.state = 2667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2666;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2669;
	        this.match(CypherParser.T__5);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PatternComprehension() {
	    let localctx = new OC_PatternComprehensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, CypherParser.RULE_oC_PatternComprehension);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2671;
	        this.match(CypherParser.T__4);
	        this.state = 2673;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2672;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (CypherParser.CYPHER - 49)) | (1 << (CypherParser.EXPLAIN - 49)) | (1 << (CypherParser.PROFILE - 49)) | (1 << (CypherParser.USE - 49)) | (1 << (CypherParser.USING - 49)) | (1 << (CypherParser.PERIODIC - 49)) | (1 << (CypherParser.COMMIT - 49)) | (1 << (CypherParser.UNION - 49)) | (1 << (CypherParser.ALL - 49)) | (1 << (CypherParser.CREATE - 49)) | (1 << (CypherParser.DROP - 49)) | (1 << (CypherParser.INDEX - 49)) | (1 << (CypherParser.ON - 49)) | (1 << (CypherParser.CONSTRAINT - 49)) | (1 << (CypherParser.ASSERT - 49)) | (1 << (CypherParser.IS - 49)) | (1 << (CypherParser.UNIQUE - 49)) | (1 << (CypherParser.EXISTS - 49)) | (1 << (CypherParser.LOAD - 49)) | (1 << (CypherParser.CSV - 49)) | (1 << (CypherParser.WITH - 49)) | (1 << (CypherParser.HEADERS - 49)) | (1 << (CypherParser.FROM - 49)) | (1 << (CypherParser.AS - 49)) | (1 << (CypherParser.FIELDTERMINATOR - 49)) | (1 << (CypherParser.OPTIONAL - 49)) | (1 << (CypherParser.MATCH - 49)) | (1 << (CypherParser.UNWIND - 49)) | (1 << (CypherParser.MERGE - 49)) | (1 << (CypherParser.SET - 49)) | (1 << (CypherParser.DETACH - 49)) | (1 << (CypherParser.DELETE - 49)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (CypherParser.REMOVE - 81)) | (1 << (CypherParser.FOREACH - 81)) | (1 << (CypherParser.IN - 81)) | (1 << (CypherParser.CALL - 81)) | (1 << (CypherParser.YIELD - 81)) | (1 << (CypherParser.DISTINCT - 81)) | (1 << (CypherParser.RETURN - 81)) | (1 << (CypherParser.ORDER - 81)) | (1 << (CypherParser.BY - 81)) | (1 << (CypherParser.L_SKIP - 81)) | (1 << (CypherParser.LIMIT - 81)) | (1 << (CypherParser.ASCENDING - 81)) | (1 << (CypherParser.ASC - 81)) | (1 << (CypherParser.DESCENDING - 81)) | (1 << (CypherParser.DESC - 81)) | (1 << (CypherParser.JOIN - 81)) | (1 << (CypherParser.SCAN - 81)) | (1 << (CypherParser.START - 81)) | (1 << (CypherParser.NODE - 81)) | (1 << (CypherParser.WHERE - 81)) | (1 << (CypherParser.SHORTESTPATH - 81)) | (1 << (CypherParser.OR - 81)) | (1 << (CypherParser.XOR - 81)) | (1 << (CypherParser.AND - 81)) | (1 << (CypherParser.NOT - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CypherParser.STARTS - 113)) | (1 << (CypherParser.ENDS - 113)) | (1 << (CypherParser.CONTAINS - 113)) | (1 << (CypherParser.NULL - 113)) | (1 << (CypherParser.COUNT - 113)) | (1 << (CypherParser.FILTER - 113)) | (1 << (CypherParser.EXTRACT - 113)) | (1 << (CypherParser.ANY - 113)) | (1 << (CypherParser.NONE - 113)) | (1 << (CypherParser.SINGLE - 113)) | (1 << (CypherParser.TRUE - 113)) | (1 << (CypherParser.FALSE - 113)) | (1 << (CypherParser.REDUCE - 113)) | (1 << (CypherParser.CASE - 113)) | (1 << (CypherParser.ELSE - 113)) | (1 << (CypherParser.END - 113)) | (1 << (CypherParser.WHEN - 113)) | (1 << (CypherParser.THEN - 113)) | (1 << (CypherParser.HexLetter - 113)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (CypherParser.FOR - 145)) | (1 << (CypherParser.REQUIRE - 145)) | (1 << (CypherParser.MANDATORY - 145)) | (1 << (CypherParser.SCALAR - 145)) | (1 << (CypherParser.OF - 145)) | (1 << (CypherParser.ADD - 145)) | (1 << (CypherParser.UnescapedSymbolicName - 145)) | (1 << (CypherParser.EscapedSymbolicName - 145)))) !== 0)) {
	            this.state = 2675;
	            this.oC_Variable();
	            this.state = 2677;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2676;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2679;
	            this.match(CypherParser.T__1);
	            this.state = 2681;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2680;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 2685;
	        this.oC_RelationshipsPattern();
	        this.state = 2687;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2686;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2697;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.WHERE) {
	            this.state = 2689;
	            this.match(CypherParser.WHERE);
	            this.state = 2691;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2690;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2693;
	            this.oC_Expression();
	            this.state = 2695;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2694;
	                this.match(CypherParser.SP);
	            }

	        }

	        this.state = 2699;
	        this.match(CypherParser.T__8);
	        this.state = 2701;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2700;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2703;
	        this.oC_Expression();
	        this.state = 2705;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2704;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2707;
	        this.match(CypherParser.T__5);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PropertyLookup() {
	    let localctx = new OC_PropertyLookupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, CypherParser.RULE_oC_PropertyLookup);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2709;
	        this.match(CypherParser.T__27);
	        this.state = 2711;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2710;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2713;
	        this.oC_PropertyKeyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CaseExpression() {
	    let localctx = new OC_CaseExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, CypherParser.RULE_oC_CaseExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2737;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,502,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2715;
	            this.match(CypherParser.CASE);
	            this.state = 2720; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2717;
	            		this._errHandler.sync(this);
	            		_la = this._input.LA(1);
	            		if(_la===CypherParser.SP) {
	            		    this.state = 2716;
	            		    this.match(CypherParser.SP);
	            		}

	            		this.state = 2719;
	            		this.oC_CaseAlternatives();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2722; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,498, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.state = 2724;
	            this.match(CypherParser.CASE);
	            this.state = 2726;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2725;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2728;
	            this.oC_Expression();
	            this.state = 2733; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2730;
	            		this._errHandler.sync(this);
	            		_la = this._input.LA(1);
	            		if(_la===CypherParser.SP) {
	            		    this.state = 2729;
	            		    this.match(CypherParser.SP);
	            		}

	            		this.state = 2732;
	            		this.oC_CaseAlternatives();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2735; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,501, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	        this.state = 2747;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,505,this._ctx);
	        if(la_===1) {
	            this.state = 2740;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2739;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2742;
	            this.match(CypherParser.ELSE);
	            this.state = 2744;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2743;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2746;
	            this.oC_Expression();

	        }
	        this.state = 2750;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2749;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2752;
	        this.match(CypherParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_CaseAlternatives() {
	    let localctx = new OC_CaseAlternativesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, CypherParser.RULE_oC_CaseAlternatives);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2754;
	        this.match(CypherParser.WHEN);
	        this.state = 2756;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2755;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2758;
	        this.oC_Expression();
	        this.state = 2760;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2759;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2762;
	        this.match(CypherParser.THEN);
	        this.state = 2764;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2763;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2766;
	        this.oC_Expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Variable() {
	    let localctx = new OC_VariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, CypherParser.RULE_oC_Variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2768;
	        this.oC_SymbolicName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_NumberLiteral() {
	    let localctx = new OC_NumberLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, CypherParser.RULE_oC_NumberLiteral);
	    try {
	        this.state = 2772;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.ExponentDecimalReal:
	        case CypherParser.RegularDecimalReal:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2770;
	            this.oC_DoubleLiteral();
	            break;
	        case CypherParser.HexInteger:
	        case CypherParser.DecimalInteger:
	        case CypherParser.OctalInteger:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2771;
	            this.oC_IntegerLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_MapLiteral() {
	    let localctx = new OC_MapLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, CypherParser.RULE_oC_MapLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2774;
	        this.match(CypherParser.T__9);
	        this.state = 2776;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2775;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2811;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (CypherParser.CYPHER - 49)) | (1 << (CypherParser.EXPLAIN - 49)) | (1 << (CypherParser.PROFILE - 49)) | (1 << (CypherParser.USE - 49)) | (1 << (CypherParser.USING - 49)) | (1 << (CypherParser.PERIODIC - 49)) | (1 << (CypherParser.COMMIT - 49)) | (1 << (CypherParser.UNION - 49)) | (1 << (CypherParser.ALL - 49)) | (1 << (CypherParser.CREATE - 49)) | (1 << (CypherParser.DROP - 49)) | (1 << (CypherParser.INDEX - 49)) | (1 << (CypherParser.ON - 49)) | (1 << (CypherParser.CONSTRAINT - 49)) | (1 << (CypherParser.ASSERT - 49)) | (1 << (CypherParser.IS - 49)) | (1 << (CypherParser.UNIQUE - 49)) | (1 << (CypherParser.EXISTS - 49)) | (1 << (CypherParser.LOAD - 49)) | (1 << (CypherParser.CSV - 49)) | (1 << (CypherParser.WITH - 49)) | (1 << (CypherParser.HEADERS - 49)) | (1 << (CypherParser.FROM - 49)) | (1 << (CypherParser.AS - 49)) | (1 << (CypherParser.FIELDTERMINATOR - 49)) | (1 << (CypherParser.OPTIONAL - 49)) | (1 << (CypherParser.MATCH - 49)) | (1 << (CypherParser.UNWIND - 49)) | (1 << (CypherParser.MERGE - 49)) | (1 << (CypherParser.SET - 49)) | (1 << (CypherParser.DETACH - 49)) | (1 << (CypherParser.DELETE - 49)))) !== 0) || ((((_la - 81)) & ~0x1f) == 0 && ((1 << (_la - 81)) & ((1 << (CypherParser.REMOVE - 81)) | (1 << (CypherParser.FOREACH - 81)) | (1 << (CypherParser.IN - 81)) | (1 << (CypherParser.CALL - 81)) | (1 << (CypherParser.YIELD - 81)) | (1 << (CypherParser.DISTINCT - 81)) | (1 << (CypherParser.RETURN - 81)) | (1 << (CypherParser.ORDER - 81)) | (1 << (CypherParser.BY - 81)) | (1 << (CypherParser.L_SKIP - 81)) | (1 << (CypherParser.LIMIT - 81)) | (1 << (CypherParser.ASCENDING - 81)) | (1 << (CypherParser.ASC - 81)) | (1 << (CypherParser.DESCENDING - 81)) | (1 << (CypherParser.DESC - 81)) | (1 << (CypherParser.JOIN - 81)) | (1 << (CypherParser.SCAN - 81)) | (1 << (CypherParser.START - 81)) | (1 << (CypherParser.NODE - 81)) | (1 << (CypherParser.WHERE - 81)) | (1 << (CypherParser.SHORTESTPATH - 81)) | (1 << (CypherParser.OR - 81)) | (1 << (CypherParser.XOR - 81)) | (1 << (CypherParser.AND - 81)) | (1 << (CypherParser.NOT - 81)))) !== 0) || ((((_la - 113)) & ~0x1f) == 0 && ((1 << (_la - 113)) & ((1 << (CypherParser.STARTS - 113)) | (1 << (CypherParser.ENDS - 113)) | (1 << (CypherParser.CONTAINS - 113)) | (1 << (CypherParser.NULL - 113)) | (1 << (CypherParser.COUNT - 113)) | (1 << (CypherParser.FILTER - 113)) | (1 << (CypherParser.EXTRACT - 113)) | (1 << (CypherParser.ANY - 113)) | (1 << (CypherParser.NONE - 113)) | (1 << (CypherParser.SINGLE - 113)) | (1 << (CypherParser.TRUE - 113)) | (1 << (CypherParser.FALSE - 113)) | (1 << (CypherParser.REDUCE - 113)) | (1 << (CypherParser.CASE - 113)) | (1 << (CypherParser.ELSE - 113)) | (1 << (CypherParser.END - 113)) | (1 << (CypherParser.WHEN - 113)) | (1 << (CypherParser.THEN - 113)) | (1 << (CypherParser.HexLetter - 113)))) !== 0) || ((((_la - 145)) & ~0x1f) == 0 && ((1 << (_la - 145)) & ((1 << (CypherParser.FOR - 145)) | (1 << (CypherParser.REQUIRE - 145)) | (1 << (CypherParser.MANDATORY - 145)) | (1 << (CypherParser.SCALAR - 145)) | (1 << (CypherParser.OF - 145)) | (1 << (CypherParser.ADD - 145)) | (1 << (CypherParser.UnescapedSymbolicName - 145)) | (1 << (CypherParser.EscapedSymbolicName - 145)))) !== 0)) {
	            this.state = 2778;
	            this.oC_PropertyKeyName();
	            this.state = 2780;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2779;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2782;
	            this.match(CypherParser.T__13);
	            this.state = 2784;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2783;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2786;
	            this.oC_Expression();
	            this.state = 2788;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===CypherParser.SP) {
	                this.state = 2787;
	                this.match(CypherParser.SP);
	            }

	            this.state = 2808;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===CypherParser.T__6) {
	                this.state = 2790;
	                this.match(CypherParser.T__6);
	                this.state = 2792;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2791;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2794;
	                this.oC_PropertyKeyName();
	                this.state = 2796;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2795;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2798;
	                this.match(CypherParser.T__13);
	                this.state = 2800;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2799;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2802;
	                this.oC_Expression();
	                this.state = 2804;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===CypherParser.SP) {
	                    this.state = 2803;
	                    this.match(CypherParser.SP);
	                }

	                this.state = 2810;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 2813;
	        this.match(CypherParser.T__10);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_LegacyParameter() {
	    let localctx = new OC_LegacyParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, CypherParser.RULE_oC_LegacyParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2815;
	        this.match(CypherParser.T__9);
	        this.state = 2817;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2816;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2821;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.CYPHER:
	        case CypherParser.EXPLAIN:
	        case CypherParser.PROFILE:
	        case CypherParser.USE:
	        case CypherParser.USING:
	        case CypherParser.PERIODIC:
	        case CypherParser.COMMIT:
	        case CypherParser.UNION:
	        case CypherParser.ALL:
	        case CypherParser.CREATE:
	        case CypherParser.DROP:
	        case CypherParser.INDEX:
	        case CypherParser.ON:
	        case CypherParser.CONSTRAINT:
	        case CypherParser.ASSERT:
	        case CypherParser.IS:
	        case CypherParser.UNIQUE:
	        case CypherParser.EXISTS:
	        case CypherParser.LOAD:
	        case CypherParser.CSV:
	        case CypherParser.WITH:
	        case CypherParser.HEADERS:
	        case CypherParser.FROM:
	        case CypherParser.AS:
	        case CypherParser.FIELDTERMINATOR:
	        case CypherParser.OPTIONAL:
	        case CypherParser.MATCH:
	        case CypherParser.UNWIND:
	        case CypherParser.MERGE:
	        case CypherParser.SET:
	        case CypherParser.DETACH:
	        case CypherParser.DELETE:
	        case CypherParser.REMOVE:
	        case CypherParser.FOREACH:
	        case CypherParser.IN:
	        case CypherParser.CALL:
	        case CypherParser.YIELD:
	        case CypherParser.DISTINCT:
	        case CypherParser.RETURN:
	        case CypherParser.ORDER:
	        case CypherParser.BY:
	        case CypherParser.L_SKIP:
	        case CypherParser.LIMIT:
	        case CypherParser.ASCENDING:
	        case CypherParser.ASC:
	        case CypherParser.DESCENDING:
	        case CypherParser.DESC:
	        case CypherParser.JOIN:
	        case CypherParser.SCAN:
	        case CypherParser.START:
	        case CypherParser.NODE:
	        case CypherParser.WHERE:
	        case CypherParser.SHORTESTPATH:
	        case CypherParser.OR:
	        case CypherParser.XOR:
	        case CypherParser.AND:
	        case CypherParser.NOT:
	        case CypherParser.STARTS:
	        case CypherParser.ENDS:
	        case CypherParser.CONTAINS:
	        case CypherParser.NULL:
	        case CypherParser.COUNT:
	        case CypherParser.FILTER:
	        case CypherParser.EXTRACT:
	        case CypherParser.ANY:
	        case CypherParser.NONE:
	        case CypherParser.SINGLE:
	        case CypherParser.TRUE:
	        case CypherParser.FALSE:
	        case CypherParser.REDUCE:
	        case CypherParser.CASE:
	        case CypherParser.ELSE:
	        case CypherParser.END:
	        case CypherParser.WHEN:
	        case CypherParser.THEN:
	        case CypherParser.HexLetter:
	        case CypherParser.FOR:
	        case CypherParser.REQUIRE:
	        case CypherParser.MANDATORY:
	        case CypherParser.SCALAR:
	        case CypherParser.OF:
	        case CypherParser.ADD:
	        case CypherParser.UnescapedSymbolicName:
	        case CypherParser.EscapedSymbolicName:
	            this.state = 2819;
	            this.oC_SymbolicName();
	            break;
	        case CypherParser.DecimalInteger:
	            this.state = 2820;
	            this.match(CypherParser.DecimalInteger);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2824;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===CypherParser.SP) {
	            this.state = 2823;
	            this.match(CypherParser.SP);
	        }

	        this.state = 2826;
	        this.match(CypherParser.T__10);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Parameter() {
	    let localctx = new OC_ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, CypherParser.RULE_oC_Parameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2828;
	        this.match(CypherParser.T__28);
	        this.state = 2831;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case CypherParser.CYPHER:
	        case CypherParser.EXPLAIN:
	        case CypherParser.PROFILE:
	        case CypherParser.USE:
	        case CypherParser.USING:
	        case CypherParser.PERIODIC:
	        case CypherParser.COMMIT:
	        case CypherParser.UNION:
	        case CypherParser.ALL:
	        case CypherParser.CREATE:
	        case CypherParser.DROP:
	        case CypherParser.INDEX:
	        case CypherParser.ON:
	        case CypherParser.CONSTRAINT:
	        case CypherParser.ASSERT:
	        case CypherParser.IS:
	        case CypherParser.UNIQUE:
	        case CypherParser.EXISTS:
	        case CypherParser.LOAD:
	        case CypherParser.CSV:
	        case CypherParser.WITH:
	        case CypherParser.HEADERS:
	        case CypherParser.FROM:
	        case CypherParser.AS:
	        case CypherParser.FIELDTERMINATOR:
	        case CypherParser.OPTIONAL:
	        case CypherParser.MATCH:
	        case CypherParser.UNWIND:
	        case CypherParser.MERGE:
	        case CypherParser.SET:
	        case CypherParser.DETACH:
	        case CypherParser.DELETE:
	        case CypherParser.REMOVE:
	        case CypherParser.FOREACH:
	        case CypherParser.IN:
	        case CypherParser.CALL:
	        case CypherParser.YIELD:
	        case CypherParser.DISTINCT:
	        case CypherParser.RETURN:
	        case CypherParser.ORDER:
	        case CypherParser.BY:
	        case CypherParser.L_SKIP:
	        case CypherParser.LIMIT:
	        case CypherParser.ASCENDING:
	        case CypherParser.ASC:
	        case CypherParser.DESCENDING:
	        case CypherParser.DESC:
	        case CypherParser.JOIN:
	        case CypherParser.SCAN:
	        case CypherParser.START:
	        case CypherParser.NODE:
	        case CypherParser.WHERE:
	        case CypherParser.SHORTESTPATH:
	        case CypherParser.OR:
	        case CypherParser.XOR:
	        case CypherParser.AND:
	        case CypherParser.NOT:
	        case CypherParser.STARTS:
	        case CypherParser.ENDS:
	        case CypherParser.CONTAINS:
	        case CypherParser.NULL:
	        case CypherParser.COUNT:
	        case CypherParser.FILTER:
	        case CypherParser.EXTRACT:
	        case CypherParser.ANY:
	        case CypherParser.NONE:
	        case CypherParser.SINGLE:
	        case CypherParser.TRUE:
	        case CypherParser.FALSE:
	        case CypherParser.REDUCE:
	        case CypherParser.CASE:
	        case CypherParser.ELSE:
	        case CypherParser.END:
	        case CypherParser.WHEN:
	        case CypherParser.THEN:
	        case CypherParser.HexLetter:
	        case CypherParser.FOR:
	        case CypherParser.REQUIRE:
	        case CypherParser.MANDATORY:
	        case CypherParser.SCALAR:
	        case CypherParser.OF:
	        case CypherParser.ADD:
	        case CypherParser.UnescapedSymbolicName:
	        case CypherParser.EscapedSymbolicName:
	            this.state = 2829;
	            this.oC_SymbolicName();
	            break;
	        case CypherParser.DecimalInteger:
	            this.state = 2830;
	            this.match(CypherParser.DecimalInteger);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PropertyExpression() {
	    let localctx = new OC_PropertyExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, CypherParser.RULE_oC_PropertyExpression);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2833;
	        this.oC_Atom();
	        this.state = 2838; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2835;
	        		this._errHandler.sync(this);
	        		_la = this._input.LA(1);
	        		if(_la===CypherParser.SP) {
	        		    this.state = 2834;
	        		    this.match(CypherParser.SP);
	        		}

	        		this.state = 2837;
	        		this.oC_PropertyLookup();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2840; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,526, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_PropertyKeyName() {
	    let localctx = new OC_PropertyKeyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, CypherParser.RULE_oC_PropertyKeyName);
	    try {
	        this.state = 2848;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,527,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2842;
	            this.oC_SchemaName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2843;
	            this.oC_SchemaName();
	            this.state = 2844;
	            this.match(CypherParser.T__4);
	            this.state = 2845;
	            this.match(CypherParser.DecimalInteger);
	            this.state = 2846;
	            this.match(CypherParser.T__5);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_IntegerLiteral() {
	    let localctx = new OC_IntegerLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, CypherParser.RULE_oC_IntegerLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2850;
	        _la = this._input.LA(1);
	        if(!(((((_la - 133)) & ~0x1f) == 0 && ((1 << (_la - 133)) & ((1 << (CypherParser.HexInteger - 133)) | (1 << (CypherParser.DecimalInteger - 133)) | (1 << (CypherParser.OctalInteger - 133)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_DoubleLiteral() {
	    let localctx = new OC_DoubleLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, CypherParser.RULE_oC_DoubleLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2852;
	        _la = this._input.LA(1);
	        if(!(_la===CypherParser.ExponentDecimalReal || _la===CypherParser.RegularDecimalReal)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SchemaName() {
	    let localctx = new OC_SchemaNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, CypherParser.RULE_oC_SchemaName);
	    try {
	        this.state = 2856;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,528,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2854;
	            this.oC_SymbolicName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2855;
	            this.oC_ReservedWord();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_ReservedWord() {
	    let localctx = new OC_ReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, CypherParser.RULE_oC_ReservedWord);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2858;
	        _la = this._input.LA(1);
	        if(!(((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (CypherParser.UNION - 56)) | (1 << (CypherParser.ALL - 56)) | (1 << (CypherParser.CREATE - 56)) | (1 << (CypherParser.DROP - 56)) | (1 << (CypherParser.ON - 56)) | (1 << (CypherParser.CONSTRAINT - 56)) | (1 << (CypherParser.IS - 56)) | (1 << (CypherParser.UNIQUE - 56)) | (1 << (CypherParser.EXISTS - 56)) | (1 << (CypherParser.WITH - 56)) | (1 << (CypherParser.AS - 56)) | (1 << (CypherParser.OPTIONAL - 56)) | (1 << (CypherParser.MATCH - 56)) | (1 << (CypherParser.UNWIND - 56)) | (1 << (CypherParser.MERGE - 56)) | (1 << (CypherParser.SET - 56)) | (1 << (CypherParser.DETACH - 56)) | (1 << (CypherParser.DELETE - 56)) | (1 << (CypherParser.REMOVE - 56)) | (1 << (CypherParser.IN - 56)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (CypherParser.DISTINCT - 89)) | (1 << (CypherParser.RETURN - 89)) | (1 << (CypherParser.ORDER - 89)) | (1 << (CypherParser.BY - 89)) | (1 << (CypherParser.L_SKIP - 89)) | (1 << (CypherParser.LIMIT - 89)) | (1 << (CypherParser.ASCENDING - 89)) | (1 << (CypherParser.ASC - 89)) | (1 << (CypherParser.DESCENDING - 89)) | (1 << (CypherParser.DESC - 89)) | (1 << (CypherParser.WHERE - 89)) | (1 << (CypherParser.OR - 89)) | (1 << (CypherParser.XOR - 89)) | (1 << (CypherParser.AND - 89)) | (1 << (CypherParser.NOT - 89)) | (1 << (CypherParser.STARTS - 89)) | (1 << (CypherParser.ENDS - 89)) | (1 << (CypherParser.CONTAINS - 89)) | (1 << (CypherParser.NULL - 89)))) !== 0) || ((((_la - 123)) & ~0x1f) == 0 && ((1 << (_la - 123)) & ((1 << (CypherParser.TRUE - 123)) | (1 << (CypherParser.FALSE - 123)) | (1 << (CypherParser.CASE - 123)) | (1 << (CypherParser.ELSE - 123)) | (1 << (CypherParser.END - 123)) | (1 << (CypherParser.WHEN - 123)) | (1 << (CypherParser.THEN - 123)) | (1 << (CypherParser.FOR - 123)) | (1 << (CypherParser.REQUIRE - 123)) | (1 << (CypherParser.MANDATORY - 123)) | (1 << (CypherParser.SCALAR - 123)) | (1 << (CypherParser.OF - 123)) | (1 << (CypherParser.ADD - 123)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_SymbolicName() {
	    let localctx = new OC_SymbolicNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, CypherParser.RULE_oC_SymbolicName);
	    try {
	        this.state = 2875;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,529,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2860;
	            this.match(CypherParser.UnescapedSymbolicName);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2861;
	            this.match(CypherParser.EscapedSymbolicName);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2862;
	            this.match(CypherParser.HexLetter);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2863;
	            this.match(CypherParser.COUNT);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2864;
	            this.match(CypherParser.FILTER);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2865;
	            this.match(CypherParser.EXTRACT);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2866;
	            this.match(CypherParser.ANY);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2867;
	            this.match(CypherParser.NONE);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2868;
	            this.match(CypherParser.SINGLE);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2869;
	            this.match(CypherParser.LOAD);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2870;
	            this.match(CypherParser.END);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2871;
	            this.match(CypherParser.FROM);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2872;
	            this.match(CypherParser.START);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2873;
	            this.match(CypherParser.CYPHER);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2874;
	            this.oC_KeywordsThatArePartOfFunctionNames();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_KeywordsThatArePartOfFunctionNames() {
	    let localctx = new OC_KeywordsThatArePartOfFunctionNamesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, CypherParser.RULE_oC_KeywordsThatArePartOfFunctionNames);
	    try {
	        this.state = 2901;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,530,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2877;
	            this.match(CypherParser.ASSERT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2878;
	            this.match(CypherParser.CALL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2879;
	            this.match(CypherParser.CASE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2880;
	            this.match(CypherParser.COMMIT);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2881;
	            this.match(CypherParser.CREATE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2882;
	            this.match(CypherParser.CSV);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2883;
	            this.match(CypherParser.DELETE);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2884;
	            this.match(CypherParser.EXPLAIN);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2885;
	            this.match(CypherParser.FIELDTERMINATOR);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2886;
	            this.match(CypherParser.FOREACH);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2887;
	            this.match(CypherParser.HEADERS);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2888;
	            this.match(CypherParser.INDEX);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2889;
	            this.match(CypherParser.JOIN);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2890;
	            this.match(CypherParser.NODE);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2891;
	            this.match(CypherParser.PERIODIC);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2892;
	            this.match(CypherParser.PROFILE);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2893;
	            this.match(CypherParser.REDUCE);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2894;
	            this.match(CypherParser.SCAN);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 2895;
	            this.match(CypherParser.SHORTESTPATH);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 2896;
	            this.match(CypherParser.USE);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 2897;
	            this.match(CypherParser.USING);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 2898;
	            this.match(CypherParser.WHEN);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 2899;
	            this.match(CypherParser.YIELD);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 2900;
	            this.oC_ReservedWord();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_LeftArrowHead() {
	    let localctx = new OC_LeftArrowHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, CypherParser.RULE_oC_LeftArrowHead);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2903;
	        _la = this._input.LA(1);
	        if(!(((((_la - 24)) & ~0x1f) == 0 && ((1 << (_la - 24)) & ((1 << (CypherParser.T__23 - 24)) | (1 << (CypherParser.T__29 - 24)) | (1 << (CypherParser.T__30 - 24)) | (1 << (CypherParser.T__31 - 24)) | (1 << (CypherParser.T__32 - 24)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_RightArrowHead() {
	    let localctx = new OC_RightArrowHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, CypherParser.RULE_oC_RightArrowHead);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2905;
	        _la = this._input.LA(1);
	        if(!(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (CypherParser.T__24 - 25)) | (1 << (CypherParser.T__33 - 25)) | (1 << (CypherParser.T__34 - 25)) | (1 << (CypherParser.T__35 - 25)) | (1 << (CypherParser.T__36 - 25)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oC_Dash() {
	    let localctx = new OC_DashContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, CypherParser.RULE_oC_Dash);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2907;
	        _la = this._input.LA(1);
	        if(!(_la===CypherParser.T__12 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (CypherParser.T__37 - 38)) | (1 << (CypherParser.T__38 - 38)) | (1 << (CypherParser.T__39 - 38)) | (1 << (CypherParser.T__40 - 38)) | (1 << (CypherParser.T__41 - 38)) | (1 << (CypherParser.T__42 - 38)) | (1 << (CypherParser.T__43 - 38)) | (1 << (CypherParser.T__44 - 38)) | (1 << (CypherParser.T__45 - 38)) | (1 << (CypherParser.T__46 - 38)) | (1 << (CypherParser.T__47 - 38)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CypherParser.EOF = antlr4.Token.EOF;
CypherParser.T__0 = 1;
CypherParser.T__1 = 2;
CypherParser.T__2 = 3;
CypherParser.T__3 = 4;
CypherParser.T__4 = 5;
CypherParser.T__5 = 6;
CypherParser.T__6 = 7;
CypherParser.T__7 = 8;
CypherParser.T__8 = 9;
CypherParser.T__9 = 10;
CypherParser.T__10 = 11;
CypherParser.T__11 = 12;
CypherParser.T__12 = 13;
CypherParser.T__13 = 14;
CypherParser.T__14 = 15;
CypherParser.T__15 = 16;
CypherParser.T__16 = 17;
CypherParser.T__17 = 18;
CypherParser.T__18 = 19;
CypherParser.T__19 = 20;
CypherParser.T__20 = 21;
CypherParser.T__21 = 22;
CypherParser.T__22 = 23;
CypherParser.T__23 = 24;
CypherParser.T__24 = 25;
CypherParser.T__25 = 26;
CypherParser.T__26 = 27;
CypherParser.T__27 = 28;
CypherParser.T__28 = 29;
CypherParser.T__29 = 30;
CypherParser.T__30 = 31;
CypherParser.T__31 = 32;
CypherParser.T__32 = 33;
CypherParser.T__33 = 34;
CypherParser.T__34 = 35;
CypherParser.T__35 = 36;
CypherParser.T__36 = 37;
CypherParser.T__37 = 38;
CypherParser.T__38 = 39;
CypherParser.T__39 = 40;
CypherParser.T__40 = 41;
CypherParser.T__41 = 42;
CypherParser.T__42 = 43;
CypherParser.T__43 = 44;
CypherParser.T__44 = 45;
CypherParser.T__45 = 46;
CypherParser.T__46 = 47;
CypherParser.T__47 = 48;
CypherParser.CYPHER = 49;
CypherParser.EXPLAIN = 50;
CypherParser.PROFILE = 51;
CypherParser.USE = 52;
CypherParser.USING = 53;
CypherParser.PERIODIC = 54;
CypherParser.COMMIT = 55;
CypherParser.UNION = 56;
CypherParser.ALL = 57;
CypherParser.CREATE = 58;
CypherParser.DROP = 59;
CypherParser.INDEX = 60;
CypherParser.ON = 61;
CypherParser.CONSTRAINT = 62;
CypherParser.ASSERT = 63;
CypherParser.IS = 64;
CypherParser.UNIQUE = 65;
CypherParser.EXISTS = 66;
CypherParser.LOAD = 67;
CypherParser.CSV = 68;
CypherParser.WITH = 69;
CypherParser.HEADERS = 70;
CypherParser.FROM = 71;
CypherParser.AS = 72;
CypherParser.FIELDTERMINATOR = 73;
CypherParser.OPTIONAL = 74;
CypherParser.MATCH = 75;
CypherParser.UNWIND = 76;
CypherParser.MERGE = 77;
CypherParser.SET = 78;
CypherParser.DETACH = 79;
CypherParser.DELETE = 80;
CypherParser.REMOVE = 81;
CypherParser.FOREACH = 82;
CypherParser.IN = 83;
CypherParser.TRANSACTIONS = 84;
CypherParser.CONCURRENT = 85;
CypherParser.ROWS = 86;
CypherParser.CALL = 87;
CypherParser.YIELD = 88;
CypherParser.DISTINCT = 89;
CypherParser.RETURN = 90;
CypherParser.ORDER = 91;
CypherParser.BY = 92;
CypherParser.L_SKIP = 93;
CypherParser.L_OFFSET = 94;
CypherParser.LIMIT = 95;
CypherParser.ASCENDING = 96;
CypherParser.ASC = 97;
CypherParser.DESCENDING = 98;
CypherParser.DESC = 99;
CypherParser.JOIN = 100;
CypherParser.SCAN = 101;
CypherParser.START = 102;
CypherParser.NODE = 103;
CypherParser.WHERE = 104;
CypherParser.GROUPS = 105;
CypherParser.SHORTEST = 106;
CypherParser.SHORTESTPATH = 107;
CypherParser.ALLSHORTESTPATHS = 108;
CypherParser.OR = 109;
CypherParser.XOR = 110;
CypherParser.AND = 111;
CypherParser.NOT = 112;
CypherParser.STARTS = 113;
CypherParser.ENDS = 114;
CypherParser.CONTAINS = 115;
CypherParser.NULL = 116;
CypherParser.COUNT = 117;
CypherParser.FILTER = 118;
CypherParser.EXTRACT = 119;
CypherParser.ANY = 120;
CypherParser.NONE = 121;
CypherParser.SINGLE = 122;
CypherParser.TRUE = 123;
CypherParser.FALSE = 124;
CypherParser.REDUCE = 125;
CypherParser.CASE = 126;
CypherParser.ELSE = 127;
CypherParser.END = 128;
CypherParser.WHEN = 129;
CypherParser.THEN = 130;
CypherParser.StringLiteral = 131;
CypherParser.EscapedChar = 132;
CypherParser.HexInteger = 133;
CypherParser.DecimalInteger = 134;
CypherParser.OctalInteger = 135;
CypherParser.HexLetter = 136;
CypherParser.HexDigit = 137;
CypherParser.Digit = 138;
CypherParser.NonZeroDigit = 139;
CypherParser.NonZeroOctDigit = 140;
CypherParser.OctDigit = 141;
CypherParser.ZeroDigit = 142;
CypherParser.ExponentDecimalReal = 143;
CypherParser.RegularDecimalReal = 144;
CypherParser.FOR = 145;
CypherParser.REQUIRE = 146;
CypherParser.MANDATORY = 147;
CypherParser.SCALAR = 148;
CypherParser.OF = 149;
CypherParser.ADD = 150;
CypherParser.UnescapedSymbolicName = 151;
CypherParser.IdentifierStart = 152;
CypherParser.IdentifierPart = 153;
CypherParser.EscapedSymbolicName = 154;
CypherParser.SP = 155;
CypherParser.WHITESPACE = 156;
CypherParser.Comment = 157;

CypherParser.RULE_oC_Cypher = 0;
CypherParser.RULE_oC_QueryOptions = 1;
CypherParser.RULE_oC_AnyCypherOption = 2;
CypherParser.RULE_oC_CypherOption = 3;
CypherParser.RULE_oC_VersionNumber = 4;
CypherParser.RULE_oC_Explain = 5;
CypherParser.RULE_oC_Profile = 6;
CypherParser.RULE_oC_ConfigurationOption = 7;
CypherParser.RULE_oC_Statement = 8;
CypherParser.RULE_oC_Query = 9;
CypherParser.RULE_oC_Use = 10;
CypherParser.RULE_oC_RegularQuery = 11;
CypherParser.RULE_oC_BulkImportQuery = 12;
CypherParser.RULE_oC_PeriodicCommitHint = 13;
CypherParser.RULE_oC_LoadCSVQuery = 14;
CypherParser.RULE_oC_Union = 15;
CypherParser.RULE_oC_SingleQuery = 16;
CypherParser.RULE_oC_SinglePartQuery = 17;
CypherParser.RULE_oC_MultiPartQuery = 18;
CypherParser.RULE_oC_UpdatingClause = 19;
CypherParser.RULE_oC_ReadingClause = 20;
CypherParser.RULE_oC_Command = 21;
CypherParser.RULE_oC_CreateUniqueConstraint = 22;
CypherParser.RULE_oC_CreateNodePropertyExistenceConstraint = 23;
CypherParser.RULE_oC_CreateRelationshipPropertyExistenceConstraint = 24;
CypherParser.RULE_oC_CreateIndex = 25;
CypherParser.RULE_oC_DropUniqueConstraint = 26;
CypherParser.RULE_oC_DropNodePropertyExistenceConstraint = 27;
CypherParser.RULE_oC_DropRelationshipPropertyExistenceConstraint = 28;
CypherParser.RULE_oC_DropIndex = 29;
CypherParser.RULE_oC_Index = 30;
CypherParser.RULE_oC_UniqueConstraint = 31;
CypherParser.RULE_oC_NodePropertyExistenceConstraint = 32;
CypherParser.RULE_oC_RelationshipPropertyExistenceConstraint = 33;
CypherParser.RULE_oC_RelationshipPatternSyntax = 34;
CypherParser.RULE_oC_LoadCSV = 35;
CypherParser.RULE_oC_Match = 36;
CypherParser.RULE_oC_Unwind = 37;
CypherParser.RULE_oC_Merge = 38;
CypherParser.RULE_oC_MergeAction = 39;
CypherParser.RULE_oC_Create = 40;
CypherParser.RULE_oC_CreateUnique = 41;
CypherParser.RULE_oC_Set = 42;
CypherParser.RULE_oC_SetItem = 43;
CypherParser.RULE_oC_Delete = 44;
CypherParser.RULE_oC_Remove = 45;
CypherParser.RULE_oC_RemoveItem = 46;
CypherParser.RULE_oC_Foreach = 47;
CypherParser.RULE_oC_InQueryCall = 48;
CypherParser.RULE_oC_SubQuery = 49;
CypherParser.RULE_oC_SubQueryVariableScope = 50;
CypherParser.RULE_oC_SubQueryDirective = 51;
CypherParser.RULE_oC_StandaloneCall = 52;
CypherParser.RULE_oC_YieldItems = 53;
CypherParser.RULE_oC_YieldItem = 54;
CypherParser.RULE_oC_With = 55;
CypherParser.RULE_oC_Return = 56;
CypherParser.RULE_oC_ReturnBody = 57;
CypherParser.RULE_oC_ReturnItems = 58;
CypherParser.RULE_oC_ReturnItem = 59;
CypherParser.RULE_oC_Order = 60;
CypherParser.RULE_oC_Skip = 61;
CypherParser.RULE_oC_Limit = 62;
CypherParser.RULE_oC_SortItem = 63;
CypherParser.RULE_oC_Hint = 64;
CypherParser.RULE_oC_IdentifiedIndexLookup = 65;
CypherParser.RULE_oC_IndexQuery = 66;
CypherParser.RULE_oC_IdLookup = 67;
CypherParser.RULE_oC_LiteralIds = 68;
CypherParser.RULE_oC_Where = 69;
CypherParser.RULE_oC_Pattern = 70;
CypherParser.RULE_oC_PatternPart = 71;
CypherParser.RULE_oC_AnonymousPatternPart = 72;
CypherParser.RULE_oC_ShortestPathPattern = 73;
CypherParser.RULE_oC_PatternElement = 74;
CypherParser.RULE_oC_OpenParen = 75;
CypherParser.RULE_oC_CloseParen = 76;
CypherParser.RULE_oC_NodePattern = 77;
CypherParser.RULE_oC_PatternElementChain = 78;
CypherParser.RULE_oC_RelationshipPattern = 79;
CypherParser.RULE_oC_RelationshipDetail = 80;
CypherParser.RULE_oC_QuantifiedPathPattern = 81;
CypherParser.RULE_oC_PathPatternQuantifier = 82;
CypherParser.RULE_oC_Properties = 83;
CypherParser.RULE_oC_RelType = 84;
CypherParser.RULE_oC_RelationshipTypes = 85;
CypherParser.RULE_oC_RelationshipTypeTerm = 86;
CypherParser.RULE_oC_RelationshipTypeOr = 87;
CypherParser.RULE_oC_RelationshipTypeAnd = 88;
CypherParser.RULE_oC_RelationshipTypeNot = 89;
CypherParser.RULE_oC_RelationshipTypeContainer = 90;
CypherParser.RULE_oC_RelationshipTypeGroup = 91;
CypherParser.RULE_oC_RelationshipTypeNotNested = 92;
CypherParser.RULE_oC_RelationshipTypeAny = 93;
CypherParser.RULE_oC_NodeLabels = 94;
CypherParser.RULE_oC_NodeLabelTerm = 95;
CypherParser.RULE_oC_NodeLabelOr = 96;
CypherParser.RULE_oC_NodeLabelAnd = 97;
CypherParser.RULE_oC_NodeLabelNot = 98;
CypherParser.RULE_oC_NodeLabelContainer = 99;
CypherParser.RULE_oC_NodeLabelGroup = 100;
CypherParser.RULE_oC_NodeLabelNotNested = 101;
CypherParser.RULE_oC_NodeLabelAny = 102;
CypherParser.RULE_oC_NodeLabel = 103;
CypherParser.RULE_oC_RangeLiteral = 104;
CypherParser.RULE_oC_LabelName = 105;
CypherParser.RULE_oC_RelTypeName = 106;
CypherParser.RULE_oC_Expression = 107;
CypherParser.RULE_oC_OrExpression = 108;
CypherParser.RULE_oC_XorExpression = 109;
CypherParser.RULE_oC_AndExpression = 110;
CypherParser.RULE_oC_NotExpression = 111;
CypherParser.RULE_oC_ComparisonExpression = 112;
CypherParser.RULE_oC_AddOrSubtractExpression = 113;
CypherParser.RULE_oC_MultiplyDivideModuloExpression = 114;
CypherParser.RULE_oC_PowerOfExpression = 115;
CypherParser.RULE_oC_UnaryAddOrSubtractExpression = 116;
CypherParser.RULE_oC_StringListNullOperatorExpression = 117;
CypherParser.RULE_oC_RegularExpression = 118;
CypherParser.RULE_oC_PropertyOrLabelsExpression = 119;
CypherParser.RULE_oC_NodeProjection = 120;
CypherParser.RULE_oC_Atom = 121;
CypherParser.RULE_oC_Literal = 122;
CypherParser.RULE_oC_BooleanLiteral = 123;
CypherParser.RULE_oC_ListLiteral = 124;
CypherParser.RULE_oC_Reduce = 125;
CypherParser.RULE_oC_PartialComparisonExpression = 126;
CypherParser.RULE_oC_ParenthesizedExpression = 127;
CypherParser.RULE_oC_RelationshipsPattern = 128;
CypherParser.RULE_oC_FilterExpression = 129;
CypherParser.RULE_oC_IdInColl = 130;
CypherParser.RULE_oC_FunctionInvocation = 131;
CypherParser.RULE_oC_FunctionName = 132;
CypherParser.RULE_oC_ExplicitProcedureInvocation = 133;
CypherParser.RULE_oC_ImplicitProcedureInvocation = 134;
CypherParser.RULE_oC_ProcedureResultField = 135;
CypherParser.RULE_oC_ProcedureName = 136;
CypherParser.RULE_oC_Namespace = 137;
CypherParser.RULE_oC_ListComprehension = 138;
CypherParser.RULE_oC_PatternComprehension = 139;
CypherParser.RULE_oC_PropertyLookup = 140;
CypherParser.RULE_oC_CaseExpression = 141;
CypherParser.RULE_oC_CaseAlternatives = 142;
CypherParser.RULE_oC_Variable = 143;
CypherParser.RULE_oC_NumberLiteral = 144;
CypherParser.RULE_oC_MapLiteral = 145;
CypherParser.RULE_oC_LegacyParameter = 146;
CypherParser.RULE_oC_Parameter = 147;
CypherParser.RULE_oC_PropertyExpression = 148;
CypherParser.RULE_oC_PropertyKeyName = 149;
CypherParser.RULE_oC_IntegerLiteral = 150;
CypherParser.RULE_oC_DoubleLiteral = 151;
CypherParser.RULE_oC_SchemaName = 152;
CypherParser.RULE_oC_ReservedWord = 153;
CypherParser.RULE_oC_SymbolicName = 154;
CypherParser.RULE_oC_KeywordsThatArePartOfFunctionNames = 155;
CypherParser.RULE_oC_LeftArrowHead = 156;
CypherParser.RULE_oC_RightArrowHead = 157;
CypherParser.RULE_oC_Dash = 158;

class OC_CypherContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Cypher;
    }

	oC_QueryOptions() {
	    return this.getTypedRuleContext(OC_QueryOptionsContext,0);
	};

	oC_Statement() {
	    return this.getTypedRuleContext(OC_StatementContext,0);
	};

	EOF() {
	    return this.getToken(CypherParser.EOF, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Cypher(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Cypher(this);
		}
	}


}



class OC_QueryOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_QueryOptions;
    }

	oC_AnyCypherOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_AnyCypherOptionContext);
	    } else {
	        return this.getTypedRuleContext(OC_AnyCypherOptionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_QueryOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_QueryOptions(this);
		}
	}


}



class OC_AnyCypherOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_AnyCypherOption;
    }

	oC_CypherOption() {
	    return this.getTypedRuleContext(OC_CypherOptionContext,0);
	};

	oC_Explain() {
	    return this.getTypedRuleContext(OC_ExplainContext,0);
	};

	oC_Profile() {
	    return this.getTypedRuleContext(OC_ProfileContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_AnyCypherOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_AnyCypherOption(this);
		}
	}


}



class OC_CypherOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CypherOption;
    }

	CYPHER() {
	    return this.getToken(CypherParser.CYPHER, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_VersionNumber() {
	    return this.getTypedRuleContext(OC_VersionNumberContext,0);
	};

	oC_ConfigurationOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ConfigurationOptionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ConfigurationOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CypherOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CypherOption(this);
		}
	}


}



class OC_VersionNumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_VersionNumber;
    }

	RegularDecimalReal() {
	    return this.getToken(CypherParser.RegularDecimalReal, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_VersionNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_VersionNumber(this);
		}
	}


}



class OC_ExplainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Explain;
    }

	EXPLAIN() {
	    return this.getToken(CypherParser.EXPLAIN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Explain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Explain(this);
		}
	}


}



class OC_ProfileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Profile;
    }

	PROFILE() {
	    return this.getToken(CypherParser.PROFILE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Profile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Profile(this);
		}
	}


}



class OC_ConfigurationOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ConfigurationOption;
    }

	oC_SymbolicName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_SymbolicNameContext);
	    } else {
	        return this.getTypedRuleContext(OC_SymbolicNameContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ConfigurationOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ConfigurationOption(this);
		}
	}


}



class OC_StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Statement;
    }

	oC_Command() {
	    return this.getTypedRuleContext(OC_CommandContext,0);
	};

	oC_Query() {
	    return this.getTypedRuleContext(OC_QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Statement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Statement(this);
		}
	}


}



class OC_QueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Query;
    }

	oC_RegularQuery() {
	    return this.getTypedRuleContext(OC_RegularQueryContext,0);
	};

	oC_StandaloneCall() {
	    return this.getTypedRuleContext(OC_StandaloneCallContext,0);
	};

	oC_BulkImportQuery() {
	    return this.getTypedRuleContext(OC_BulkImportQueryContext,0);
	};

	oC_SubQuery() {
	    return this.getTypedRuleContext(OC_SubQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Query(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Query(this);
		}
	}


}



class OC_UseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Use;
    }

	USE() {
	    return this.getToken(CypherParser.USE, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Use(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Use(this);
		}
	}


}



class OC_RegularQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RegularQuery;
    }

	oC_SingleQuery() {
	    return this.getTypedRuleContext(OC_SingleQueryContext,0);
	};

	oC_Union = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_UnionContext);
	    } else {
	        return this.getTypedRuleContext(OC_UnionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RegularQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RegularQuery(this);
		}
	}


}



class OC_BulkImportQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_BulkImportQuery;
    }

	oC_PeriodicCommitHint() {
	    return this.getTypedRuleContext(OC_PeriodicCommitHintContext,0);
	};

	oC_LoadCSVQuery() {
	    return this.getTypedRuleContext(OC_LoadCSVQueryContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_BulkImportQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_BulkImportQuery(this);
		}
	}


}



class OC_PeriodicCommitHintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PeriodicCommitHint;
    }

	USING() {
	    return this.getToken(CypherParser.USING, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	PERIODIC() {
	    return this.getToken(CypherParser.PERIODIC, 0);
	};

	COMMIT() {
	    return this.getToken(CypherParser.COMMIT, 0);
	};

	oC_IntegerLiteral() {
	    return this.getTypedRuleContext(OC_IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PeriodicCommitHint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PeriodicCommitHint(this);
		}
	}


}



class OC_LoadCSVQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_LoadCSVQuery;
    }

	oC_LoadCSV() {
	    return this.getTypedRuleContext(OC_LoadCSVContext,0);
	};

	oC_SingleQuery() {
	    return this.getTypedRuleContext(OC_SingleQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_LoadCSVQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_LoadCSVQuery(this);
		}
	}


}



class OC_UnionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Union;
    }

	UNION() {
	    return this.getToken(CypherParser.UNION, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ALL() {
	    return this.getToken(CypherParser.ALL, 0);
	};

	oC_SingleQuery() {
	    return this.getTypedRuleContext(OC_SingleQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Union(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Union(this);
		}
	}


}



class OC_SingleQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SingleQuery;
    }

	oC_SinglePartQuery() {
	    return this.getTypedRuleContext(OC_SinglePartQueryContext,0);
	};

	oC_Use() {
	    return this.getTypedRuleContext(OC_UseContext,0);
	};

	oC_MultiPartQuery() {
	    return this.getTypedRuleContext(OC_MultiPartQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SingleQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SingleQuery(this);
		}
	}


}



class OC_SinglePartQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SinglePartQuery;
    }

	oC_Return() {
	    return this.getTypedRuleContext(OC_ReturnContext,0);
	};

	oC_ReadingClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ReadingClauseContext);
	    } else {
	        return this.getTypedRuleContext(OC_ReadingClauseContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_UpdatingClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_UpdatingClauseContext);
	    } else {
	        return this.getTypedRuleContext(OC_UpdatingClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SinglePartQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SinglePartQuery(this);
		}
	}


}



class OC_MultiPartQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_MultiPartQuery;
    }

	oC_SinglePartQuery() {
	    return this.getTypedRuleContext(OC_SinglePartQueryContext,0);
	};

	oC_With = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_WithContext);
	    } else {
	        return this.getTypedRuleContext(OC_WithContext,i);
	    }
	};

	oC_ReadingClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ReadingClauseContext);
	    } else {
	        return this.getTypedRuleContext(OC_ReadingClauseContext,i);
	    }
	};

	oC_UpdatingClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_UpdatingClauseContext);
	    } else {
	        return this.getTypedRuleContext(OC_UpdatingClauseContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_MultiPartQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_MultiPartQuery(this);
		}
	}


}



class OC_UpdatingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_UpdatingClause;
    }

	oC_Create() {
	    return this.getTypedRuleContext(OC_CreateContext,0);
	};

	oC_Merge() {
	    return this.getTypedRuleContext(OC_MergeContext,0);
	};

	oC_CreateUnique() {
	    return this.getTypedRuleContext(OC_CreateUniqueContext,0);
	};

	oC_Foreach() {
	    return this.getTypedRuleContext(OC_ForeachContext,0);
	};

	oC_Delete() {
	    return this.getTypedRuleContext(OC_DeleteContext,0);
	};

	oC_Set() {
	    return this.getTypedRuleContext(OC_SetContext,0);
	};

	oC_Remove() {
	    return this.getTypedRuleContext(OC_RemoveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_UpdatingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_UpdatingClause(this);
		}
	}


}



class OC_ReadingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ReadingClause;
    }

	oC_LoadCSV() {
	    return this.getTypedRuleContext(OC_LoadCSVContext,0);
	};

	oC_Match() {
	    return this.getTypedRuleContext(OC_MatchContext,0);
	};

	oC_Unwind() {
	    return this.getTypedRuleContext(OC_UnwindContext,0);
	};

	oC_InQueryCall() {
	    return this.getTypedRuleContext(OC_InQueryCallContext,0);
	};

	oC_SubQuery() {
	    return this.getTypedRuleContext(OC_SubQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ReadingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ReadingClause(this);
		}
	}


}



class OC_CommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Command;
    }

	oC_CreateIndex() {
	    return this.getTypedRuleContext(OC_CreateIndexContext,0);
	};

	oC_DropIndex() {
	    return this.getTypedRuleContext(OC_DropIndexContext,0);
	};

	oC_CreateUniqueConstraint() {
	    return this.getTypedRuleContext(OC_CreateUniqueConstraintContext,0);
	};

	oC_DropUniqueConstraint() {
	    return this.getTypedRuleContext(OC_DropUniqueConstraintContext,0);
	};

	oC_CreateNodePropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_CreateNodePropertyExistenceConstraintContext,0);
	};

	oC_DropNodePropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_DropNodePropertyExistenceConstraintContext,0);
	};

	oC_CreateRelationshipPropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_CreateRelationshipPropertyExistenceConstraintContext,0);
	};

	oC_DropRelationshipPropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_DropRelationshipPropertyExistenceConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Command(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Command(this);
		}
	}


}



class OC_CreateUniqueConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CreateUniqueConstraint;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_UniqueConstraint() {
	    return this.getTypedRuleContext(OC_UniqueConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CreateUniqueConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CreateUniqueConstraint(this);
		}
	}


}



class OC_CreateNodePropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CreateNodePropertyExistenceConstraint;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_NodePropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_NodePropertyExistenceConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CreateNodePropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CreateNodePropertyExistenceConstraint(this);
		}
	}


}



class OC_CreateRelationshipPropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CreateRelationshipPropertyExistenceConstraint;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_RelationshipPropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_RelationshipPropertyExistenceConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CreateRelationshipPropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CreateRelationshipPropertyExistenceConstraint(this);
		}
	}


}



class OC_CreateIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CreateIndex;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_Index() {
	    return this.getTypedRuleContext(OC_IndexContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CreateIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CreateIndex(this);
		}
	}


}



class OC_DropUniqueConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_DropUniqueConstraint;
    }

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_UniqueConstraint() {
	    return this.getTypedRuleContext(OC_UniqueConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_DropUniqueConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_DropUniqueConstraint(this);
		}
	}


}



class OC_DropNodePropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_DropNodePropertyExistenceConstraint;
    }

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_NodePropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_NodePropertyExistenceConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_DropNodePropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_DropNodePropertyExistenceConstraint(this);
		}
	}


}



class OC_DropRelationshipPropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_DropRelationshipPropertyExistenceConstraint;
    }

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_RelationshipPropertyExistenceConstraint() {
	    return this.getTypedRuleContext(OC_RelationshipPropertyExistenceConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_DropRelationshipPropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_DropRelationshipPropertyExistenceConstraint(this);
		}
	}


}



class OC_DropIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_DropIndex;
    }

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_Index() {
	    return this.getTypedRuleContext(OC_IndexContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_DropIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_DropIndex(this);
		}
	}


}



class OC_IndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Index;
    }

	INDEX() {
	    return this.getToken(CypherParser.INDEX, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	oC_NodeLabel() {
	    return this.getTypedRuleContext(OC_NodeLabelContext,0);
	};

	oC_PropertyKeyName() {
	    return this.getTypedRuleContext(OC_PropertyKeyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Index(this);
		}
	}


}



class OC_UniqueConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_UniqueConstraint;
    }

	CONSTRAINT() {
	    return this.getToken(CypherParser.CONSTRAINT, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_NodeLabel() {
	    return this.getTypedRuleContext(OC_NodeLabelContext,0);
	};

	ASSERT() {
	    return this.getToken(CypherParser.ASSERT, 0);
	};

	oC_PropertyExpression() {
	    return this.getTypedRuleContext(OC_PropertyExpressionContext,0);
	};

	IS() {
	    return this.getToken(CypherParser.IS, 0);
	};

	UNIQUE() {
	    return this.getToken(CypherParser.UNIQUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_UniqueConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_UniqueConstraint(this);
		}
	}


}



class OC_NodePropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodePropertyExistenceConstraint;
    }

	CONSTRAINT() {
	    return this.getToken(CypherParser.CONSTRAINT, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_NodeLabel() {
	    return this.getTypedRuleContext(OC_NodeLabelContext,0);
	};

	ASSERT() {
	    return this.getToken(CypherParser.ASSERT, 0);
	};

	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	oC_PropertyExpression() {
	    return this.getTypedRuleContext(OC_PropertyExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodePropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodePropertyExistenceConstraint(this);
		}
	}


}



class OC_RelationshipPropertyExistenceConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipPropertyExistenceConstraint;
    }

	CONSTRAINT() {
	    return this.getToken(CypherParser.CONSTRAINT, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	oC_RelationshipPatternSyntax() {
	    return this.getTypedRuleContext(OC_RelationshipPatternSyntaxContext,0);
	};

	ASSERT() {
	    return this.getToken(CypherParser.ASSERT, 0);
	};

	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	oC_PropertyExpression() {
	    return this.getTypedRuleContext(OC_PropertyExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipPropertyExistenceConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipPropertyExistenceConstraint(this);
		}
	}


}



class OC_RelationshipPatternSyntaxContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipPatternSyntax;
    }

	oC_Dash = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_DashContext);
	    } else {
	        return this.getTypedRuleContext(OC_DashContext,i);
	    }
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_RelType() {
	    return this.getTypedRuleContext(OC_RelTypeContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_RightArrowHead() {
	    return this.getTypedRuleContext(OC_RightArrowHeadContext,0);
	};

	oC_LeftArrowHead() {
	    return this.getTypedRuleContext(OC_LeftArrowHeadContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipPatternSyntax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipPatternSyntax(this);
		}
	}


}



class OC_LoadCSVContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_LoadCSV;
    }

	LOAD() {
	    return this.getToken(CypherParser.LOAD, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	CSV() {
	    return this.getToken(CypherParser.CSV, 0);
	};

	FROM() {
	    return this.getToken(CypherParser.FROM, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	WITH() {
	    return this.getToken(CypherParser.WITH, 0);
	};

	HEADERS() {
	    return this.getToken(CypherParser.HEADERS, 0);
	};

	FIELDTERMINATOR() {
	    return this.getToken(CypherParser.FIELDTERMINATOR, 0);
	};

	StringLiteral() {
	    return this.getToken(CypherParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_LoadCSV(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_LoadCSV(this);
		}
	}


}



class OC_MatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Match;
    }

	MATCH() {
	    return this.getToken(CypherParser.MATCH, 0);
	};

	oC_Pattern() {
	    return this.getTypedRuleContext(OC_PatternContext,0);
	};

	OPTIONAL() {
	    return this.getToken(CypherParser.OPTIONAL, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Hint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_HintContext);
	    } else {
	        return this.getTypedRuleContext(OC_HintContext,i);
	    }
	};

	oC_Where() {
	    return this.getTypedRuleContext(OC_WhereContext,0);
	};

	oC_Order() {
	    return this.getTypedRuleContext(OC_OrderContext,0);
	};

	oC_Skip() {
	    return this.getTypedRuleContext(OC_SkipContext,0);
	};

	oC_Limit() {
	    return this.getTypedRuleContext(OC_LimitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Match(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Match(this);
		}
	}


}



class OC_UnwindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Unwind;
    }

	UNWIND() {
	    return this.getToken(CypherParser.UNWIND, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Unwind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Unwind(this);
		}
	}


}



class OC_MergeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Merge;
    }

	MERGE() {
	    return this.getToken(CypherParser.MERGE, 0);
	};

	oC_PatternPart() {
	    return this.getTypedRuleContext(OC_PatternPartContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_MergeAction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_MergeActionContext);
	    } else {
	        return this.getTypedRuleContext(OC_MergeActionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Merge(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Merge(this);
		}
	}


}



class OC_MergeActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_MergeAction;
    }

	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	MATCH() {
	    return this.getToken(CypherParser.MATCH, 0);
	};

	oC_Set() {
	    return this.getTypedRuleContext(OC_SetContext,0);
	};

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_MergeAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_MergeAction(this);
		}
	}


}



class OC_CreateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Create;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	oC_Pattern() {
	    return this.getTypedRuleContext(OC_PatternContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Create(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Create(this);
		}
	}


}



class OC_CreateUniqueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CreateUnique;
    }

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	UNIQUE() {
	    return this.getToken(CypherParser.UNIQUE, 0);
	};

	oC_Pattern() {
	    return this.getTypedRuleContext(OC_PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CreateUnique(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CreateUnique(this);
		}
	}


}



class OC_SetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Set;
    }

	SET() {
	    return this.getToken(CypherParser.SET, 0);
	};

	oC_SetItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_SetItemContext);
	    } else {
	        return this.getTypedRuleContext(OC_SetItemContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Set(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Set(this);
		}
	}


}



class OC_SetItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SetItem;
    }

	oC_PropertyExpression() {
	    return this.getTypedRuleContext(OC_PropertyExpressionContext,0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_NodeLabels() {
	    return this.getTypedRuleContext(OC_NodeLabelsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SetItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SetItem(this);
		}
	}


}



class OC_DeleteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Delete;
    }

	DELETE() {
	    return this.getToken(CypherParser.DELETE, 0);
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	DETACH() {
	    return this.getToken(CypherParser.DETACH, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Delete(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Delete(this);
		}
	}


}



class OC_RemoveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Remove;
    }

	REMOVE() {
	    return this.getToken(CypherParser.REMOVE, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_RemoveItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_RemoveItemContext);
	    } else {
	        return this.getTypedRuleContext(OC_RemoveItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Remove(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Remove(this);
		}
	}


}



class OC_RemoveItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RemoveItem;
    }

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_NodeLabels() {
	    return this.getTypedRuleContext(OC_NodeLabelsContext,0);
	};

	oC_PropertyExpression() {
	    return this.getTypedRuleContext(OC_PropertyExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RemoveItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RemoveItem(this);
		}
	}


}



class OC_ForeachContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Foreach;
    }

	FOREACH() {
	    return this.getToken(CypherParser.FOREACH, 0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	IN() {
	    return this.getToken(CypherParser.IN, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	oC_UpdatingClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_UpdatingClauseContext);
	    } else {
	        return this.getTypedRuleContext(OC_UpdatingClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Foreach(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Foreach(this);
		}
	}


}



class OC_InQueryCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_InQueryCall;
    }

	CALL() {
	    return this.getToken(CypherParser.CALL, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_ExplicitProcedureInvocation() {
	    return this.getTypedRuleContext(OC_ExplicitProcedureInvocationContext,0);
	};

	OPTIONAL() {
	    return this.getToken(CypherParser.OPTIONAL, 0);
	};

	YIELD() {
	    return this.getToken(CypherParser.YIELD, 0);
	};

	oC_YieldItems() {
	    return this.getTypedRuleContext(OC_YieldItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_InQueryCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_InQueryCall(this);
		}
	}


}



class OC_SubQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SubQuery;
    }

	CALL() {
	    return this.getToken(CypherParser.CALL, 0);
	};

	oC_Query() {
	    return this.getTypedRuleContext(OC_QueryContext,0);
	};

	OPTIONAL() {
	    return this.getToken(CypherParser.OPTIONAL, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_SubQueryVariableScope() {
	    return this.getTypedRuleContext(OC_SubQueryVariableScopeContext,0);
	};

	oC_SubQueryDirective() {
	    return this.getTypedRuleContext(OC_SubQueryDirectiveContext,0);
	};

	oC_Return() {
	    return this.getTypedRuleContext(OC_ReturnContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SubQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SubQuery(this);
		}
	}


}



class OC_SubQueryVariableScopeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SubQueryVariableScope;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_VariableContext);
	    } else {
	        return this.getTypedRuleContext(OC_VariableContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SubQueryVariableScope(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SubQueryVariableScope(this);
		}
	}


}



class OC_SubQueryDirectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SubQueryDirective;
    }

	IN() {
	    return this.getToken(CypherParser.IN, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	TRANSACTIONS() {
	    return this.getToken(CypherParser.TRANSACTIONS, 0);
	};

	CONCURRENT() {
	    return this.getToken(CypherParser.CONCURRENT, 0);
	};

	OF() {
	    return this.getToken(CypherParser.OF, 0);
	};

	oC_IntegerLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_IntegerLiteralContext);
	    } else {
	        return this.getTypedRuleContext(OC_IntegerLiteralContext,i);
	    }
	};

	ROWS() {
	    return this.getToken(CypherParser.ROWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SubQueryDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SubQueryDirective(this);
		}
	}


}



class OC_StandaloneCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_StandaloneCall;
    }

	CALL() {
	    return this.getToken(CypherParser.CALL, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_ExplicitProcedureInvocation() {
	    return this.getTypedRuleContext(OC_ExplicitProcedureInvocationContext,0);
	};

	oC_ImplicitProcedureInvocation() {
	    return this.getTypedRuleContext(OC_ImplicitProcedureInvocationContext,0);
	};

	YIELD() {
	    return this.getToken(CypherParser.YIELD, 0);
	};

	oC_YieldItems() {
	    return this.getTypedRuleContext(OC_YieldItemsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_StandaloneCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_StandaloneCall(this);
		}
	}


}



class OC_YieldItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_YieldItems;
    }

	oC_YieldItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_YieldItemContext);
	    } else {
	        return this.getTypedRuleContext(OC_YieldItemContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_YieldItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_YieldItems(this);
		}
	}


}



class OC_YieldItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_YieldItem;
    }

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_ProcedureResultField() {
	    return this.getTypedRuleContext(OC_ProcedureResultFieldContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_YieldItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_YieldItem(this);
		}
	}


}



class OC_WithContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_With;
    }

	WITH() {
	    return this.getToken(CypherParser.WITH, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_ReturnBody() {
	    return this.getTypedRuleContext(OC_ReturnBodyContext,0);
	};

	DISTINCT() {
	    return this.getToken(CypherParser.DISTINCT, 0);
	};

	oC_Where() {
	    return this.getTypedRuleContext(OC_WhereContext,0);
	};

	oC_Order() {
	    return this.getTypedRuleContext(OC_OrderContext,0);
	};

	oC_Skip() {
	    return this.getTypedRuleContext(OC_SkipContext,0);
	};

	oC_Limit() {
	    return this.getTypedRuleContext(OC_LimitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_With(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_With(this);
		}
	}


}



class OC_ReturnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Return;
    }

	RETURN() {
	    return this.getToken(CypherParser.RETURN, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_ReturnBody() {
	    return this.getTypedRuleContext(OC_ReturnBodyContext,0);
	};

	DISTINCT() {
	    return this.getToken(CypherParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Return(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Return(this);
		}
	}


}



class OC_ReturnBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ReturnBody;
    }

	oC_ReturnItems() {
	    return this.getTypedRuleContext(OC_ReturnItemsContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Order() {
	    return this.getTypedRuleContext(OC_OrderContext,0);
	};

	oC_Skip() {
	    return this.getTypedRuleContext(OC_SkipContext,0);
	};

	oC_Limit() {
	    return this.getTypedRuleContext(OC_LimitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ReturnBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ReturnBody(this);
		}
	}


}



class OC_ReturnItemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ReturnItems;
    }

	oC_ReturnItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ReturnItemContext);
	    } else {
	        return this.getTypedRuleContext(OC_ReturnItemContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ReturnItems(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ReturnItems(this);
		}
	}


}



class OC_ReturnItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ReturnItem;
    }

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ReturnItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ReturnItem(this);
		}
	}


}



class OC_OrderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Order;
    }

	ORDER() {
	    return this.getToken(CypherParser.ORDER, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	BY() {
	    return this.getToken(CypherParser.BY, 0);
	};

	oC_SortItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_SortItemContext);
	    } else {
	        return this.getTypedRuleContext(OC_SortItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Order(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Order(this);
		}
	}


}



class OC_SkipContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Skip;
    }

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	L_SKIP() {
	    return this.getToken(CypherParser.L_SKIP, 0);
	};

	L_OFFSET() {
	    return this.getToken(CypherParser.L_OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Skip(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Skip(this);
		}
	}


}



class OC_LimitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Limit;
    }

	LIMIT() {
	    return this.getToken(CypherParser.LIMIT, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Limit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Limit(this);
		}
	}


}



class OC_SortItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SortItem;
    }

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	ASCENDING() {
	    return this.getToken(CypherParser.ASCENDING, 0);
	};

	ASC() {
	    return this.getToken(CypherParser.ASC, 0);
	};

	DESCENDING() {
	    return this.getToken(CypherParser.DESCENDING, 0);
	};

	DESC() {
	    return this.getToken(CypherParser.DESC, 0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SortItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SortItem(this);
		}
	}


}



class OC_HintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Hint;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	USING() {
	    return this.getToken(CypherParser.USING, 0);
	};

	INDEX() {
	    return this.getToken(CypherParser.INDEX, 0);
	};

	oC_Variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_VariableContext);
	    } else {
	        return this.getTypedRuleContext(OC_VariableContext,i);
	    }
	};

	oC_NodeLabel() {
	    return this.getTypedRuleContext(OC_NodeLabelContext,0);
	};

	oC_PropertyKeyName() {
	    return this.getTypedRuleContext(OC_PropertyKeyNameContext,0);
	};

	JOIN() {
	    return this.getToken(CypherParser.JOIN, 0);
	};

	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	SCAN() {
	    return this.getToken(CypherParser.SCAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Hint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Hint(this);
		}
	}


}



class OC_IdentifiedIndexLookupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_IdentifiedIndexLookup;
    }

	oC_SymbolicName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_SymbolicNameContext);
	    } else {
	        return this.getTypedRuleContext(OC_SymbolicNameContext,i);
	    }
	};

	StringLiteral() {
	    return this.getToken(CypherParser.StringLiteral, 0);
	};

	oC_LegacyParameter() {
	    return this.getTypedRuleContext(OC_LegacyParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_IdentifiedIndexLookup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_IdentifiedIndexLookup(this);
		}
	}


}



class OC_IndexQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_IndexQuery;
    }

	oC_SymbolicName() {
	    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
	};

	StringLiteral() {
	    return this.getToken(CypherParser.StringLiteral, 0);
	};

	oC_LegacyParameter() {
	    return this.getTypedRuleContext(OC_LegacyParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_IndexQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_IndexQuery(this);
		}
	}


}



class OC_IdLookupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_IdLookup;
    }

	oC_LiteralIds() {
	    return this.getTypedRuleContext(OC_LiteralIdsContext,0);
	};

	oC_LegacyParameter() {
	    return this.getTypedRuleContext(OC_LegacyParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_IdLookup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_IdLookup(this);
		}
	}


}



class OC_LiteralIdsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_LiteralIds;
    }

	oC_IntegerLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_IntegerLiteralContext);
	    } else {
	        return this.getTypedRuleContext(OC_IntegerLiteralContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_LiteralIds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_LiteralIds(this);
		}
	}


}



class OC_WhereContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Where;
    }

	WHERE() {
	    return this.getToken(CypherParser.WHERE, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	NOT() {
	    return this.getToken(CypherParser.NOT, 0);
	};

	COUNT() {
	    return this.getToken(CypherParser.COUNT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Where(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Where(this);
		}
	}


}



class OC_PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Pattern;
    }

	oC_PatternPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PatternPartContext);
	    } else {
	        return this.getTypedRuleContext(OC_PatternPartContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Pattern(this);
		}
	}


}



class OC_PatternPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PatternPart;
    }

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_AnonymousPatternPart() {
	    return this.getTypedRuleContext(OC_AnonymousPatternPartContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PatternPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PatternPart(this);
		}
	}


}



class OC_AnonymousPatternPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_AnonymousPatternPart;
    }

	oC_ShortestPathPattern() {
	    return this.getTypedRuleContext(OC_ShortestPathPatternContext,0);
	};

	oC_PatternElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PatternElementContext);
	    } else {
	        return this.getTypedRuleContext(OC_PatternElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_AnonymousPatternPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_AnonymousPatternPart(this);
		}
	}


}



class OC_ShortestPathPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ShortestPathPattern;
    }

	SHORTESTPATH() {
	    return this.getToken(CypherParser.SHORTESTPATH, 0);
	};

	oC_PatternElement() {
	    return this.getTypedRuleContext(OC_PatternElementContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	ALLSHORTESTPATHS() {
	    return this.getToken(CypherParser.ALLSHORTESTPATHS, 0);
	};

	ALL() {
	    return this.getToken(CypherParser.ALL, 0);
	};

	SHORTEST() {
	    return this.getToken(CypherParser.SHORTEST, 0);
	};

	oC_IntegerLiteral() {
	    return this.getTypedRuleContext(OC_IntegerLiteralContext,0);
	};

	GROUPS() {
	    return this.getToken(CypherParser.GROUPS, 0);
	};

	ANY() {
	    return this.getToken(CypherParser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ShortestPathPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ShortestPathPattern(this);
		}
	}


}



class OC_PatternElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PatternElement;
    }

	oC_NodePattern() {
	    return this.getTypedRuleContext(OC_NodePatternContext,0);
	};

	oC_PatternElementChain = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PatternElementChainContext);
	    } else {
	        return this.getTypedRuleContext(OC_PatternElementChainContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_QuantifiedPathPattern() {
	    return this.getTypedRuleContext(OC_QuantifiedPathPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PatternElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PatternElement(this);
		}
	}


}



class OC_OpenParenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_OpenParen;
    }


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_OpenParen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_OpenParen(this);
		}
	}


}



class OC_CloseParenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CloseParen;
    }


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CloseParen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CloseParen(this);
		}
	}


}



class OC_NodePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodePattern;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_NodeLabels() {
	    return this.getTypedRuleContext(OC_NodeLabelsContext,0);
	};

	oC_Properties() {
	    return this.getTypedRuleContext(OC_PropertiesContext,0);
	};

	oC_Where() {
	    return this.getTypedRuleContext(OC_WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodePattern(this);
		}
	}


}



class OC_PatternElementChainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PatternElementChain;
    }

	oC_RelationshipPattern() {
	    return this.getTypedRuleContext(OC_RelationshipPatternContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	oC_NodePattern() {
	    return this.getTypedRuleContext(OC_NodePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PatternElementChain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PatternElementChain(this);
		}
	}


}



class OC_RelationshipPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipPattern;
    }

	oC_LeftArrowHead() {
	    return this.getTypedRuleContext(OC_LeftArrowHeadContext,0);
	};

	oC_Dash = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_DashContext);
	    } else {
	        return this.getTypedRuleContext(OC_DashContext,i);
	    }
	};

	oC_RightArrowHead() {
	    return this.getTypedRuleContext(OC_RightArrowHeadContext,0);
	};

	oC_PathPatternQuantifier() {
	    return this.getTypedRuleContext(OC_PathPatternQuantifierContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_RelationshipDetail() {
	    return this.getTypedRuleContext(OC_RelationshipDetailContext,0);
	};

	oC_QuantifiedPathPattern() {
	    return this.getTypedRuleContext(OC_QuantifiedPathPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipPattern(this);
		}
	}


}



class OC_RelationshipDetailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipDetail;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_RelationshipTypes() {
	    return this.getTypedRuleContext(OC_RelationshipTypesContext,0);
	};

	oC_RangeLiteral() {
	    return this.getTypedRuleContext(OC_RangeLiteralContext,0);
	};

	oC_Properties() {
	    return this.getTypedRuleContext(OC_PropertiesContext,0);
	};

	oC_Where() {
	    return this.getTypedRuleContext(OC_WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipDetail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipDetail(this);
		}
	}


}



class OC_QuantifiedPathPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_QuantifiedPathPattern;
    }

	oC_OpenParen() {
	    return this.getTypedRuleContext(OC_OpenParenContext,0);
	};

	oC_PatternElement() {
	    return this.getTypedRuleContext(OC_PatternElementContext,0);
	};

	oC_CloseParen() {
	    return this.getTypedRuleContext(OC_CloseParenContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Where() {
	    return this.getTypedRuleContext(OC_WhereContext,0);
	};

	oC_PathPatternQuantifier() {
	    return this.getTypedRuleContext(OC_PathPatternQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_QuantifiedPathPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_QuantifiedPathPattern(this);
		}
	}


}



class OC_PathPatternQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PathPatternQuantifier;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_IntegerLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_IntegerLiteralContext);
	    } else {
	        return this.getTypedRuleContext(OC_IntegerLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PathPatternQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PathPatternQuantifier(this);
		}
	}


}



class OC_PropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Properties;
    }

	oC_MapLiteral() {
	    return this.getTypedRuleContext(OC_MapLiteralContext,0);
	};

	oC_Parameter() {
	    return this.getTypedRuleContext(OC_ParameterContext,0);
	};

	oC_LegacyParameter() {
	    return this.getTypedRuleContext(OC_LegacyParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Properties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Properties(this);
		}
	}


}



class OC_RelTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelType;
    }

	oC_RelTypeName() {
	    return this.getTypedRuleContext(OC_RelTypeNameContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelType(this);
		}
	}


}



class OC_RelationshipTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipTypes;
    }

	oC_RelTypeName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_RelTypeNameContext);
	    } else {
	        return this.getTypedRuleContext(OC_RelTypeNameContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_RelationshipTypeTerm() {
	    return this.getTypedRuleContext(OC_RelationshipTypeTermContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipTypes(this);
		}
	}


}



class OC_RelationshipTypeTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipTypeTerm;
    }

	oC_RelationshipTypeOr() {
	    return this.getTypedRuleContext(OC_RelationshipTypeOrContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipTypeTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipTypeTerm(this);
		}
	}


}



class OC_RelationshipTypeOrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipTypeOr;
    }

	oC_RelationshipTypeAnd = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_RelationshipTypeAndContext);
	    } else {
	        return this.getTypedRuleContext(OC_RelationshipTypeAndContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipTypeOr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipTypeOr(this);
		}
	}


}



class OC_RelationshipTypeAndContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipTypeAnd;
    }

	oC_RelationshipTypeNot = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_RelationshipTypeNotContext);
	    } else {
	        return this.getTypedRuleContext(OC_RelationshipTypeNotContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipTypeAnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipTypeAnd(this);
		}
	}


}



class OC_RelationshipTypeNotContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipTypeNot;
    }

	oC_RelationshipTypeContainer() {
	    return this.getTypedRuleContext(OC_RelationshipTypeContainerContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipTypeNot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipTypeNot(this);
		}
	}


}



class OC_RelationshipTypeContainerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipTypeContainer;
    }

	oC_RelTypeName() {
	    return this.getTypedRuleContext(OC_RelTypeNameContext,0);
	};

	oC_RelationshipTypeTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_RelationshipTypeTermContext);
	    } else {
	        return this.getTypedRuleContext(OC_RelationshipTypeTermContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_RelationshipTypeGroup() {
	    return this.getTypedRuleContext(OC_RelationshipTypeGroupContext,0);
	};

	oC_RelationshipTypeNotNested() {
	    return this.getTypedRuleContext(OC_RelationshipTypeNotNestedContext,0);
	};

	oC_RelationshipTypeAny() {
	    return this.getTypedRuleContext(OC_RelationshipTypeAnyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipTypeContainer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipTypeContainer(this);
		}
	}


}



class OC_RelationshipTypeGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipTypeGroup;
    }

	oC_RelationshipTypeTerm() {
	    return this.getTypedRuleContext(OC_RelationshipTypeTermContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipTypeGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipTypeGroup(this);
		}
	}


}



class OC_RelationshipTypeNotNestedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipTypeNotNested;
    }

	oC_RelationshipTypeTerm() {
	    return this.getTypedRuleContext(OC_RelationshipTypeTermContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipTypeNotNested(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipTypeNotNested(this);
		}
	}


}



class OC_RelationshipTypeAnyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipTypeAny;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_RelationshipTypeTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_RelationshipTypeTermContext);
	    } else {
	        return this.getTypedRuleContext(OC_RelationshipTypeTermContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipTypeAny(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipTypeAny(this);
		}
	}


}



class OC_NodeLabelsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodeLabels;
    }

	oC_NodeLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_NodeLabelContext);
	    } else {
	        return this.getTypedRuleContext(OC_NodeLabelContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_NodeLabelTerm() {
	    return this.getTypedRuleContext(OC_NodeLabelTermContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodeLabels(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodeLabels(this);
		}
	}


}



class OC_NodeLabelTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodeLabelTerm;
    }

	oC_NodeLabelOr() {
	    return this.getTypedRuleContext(OC_NodeLabelOrContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodeLabelTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodeLabelTerm(this);
		}
	}


}



class OC_NodeLabelOrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodeLabelOr;
    }

	oC_NodeLabelAnd = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_NodeLabelAndContext);
	    } else {
	        return this.getTypedRuleContext(OC_NodeLabelAndContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodeLabelOr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodeLabelOr(this);
		}
	}


}



class OC_NodeLabelAndContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodeLabelAnd;
    }

	oC_NodeLabelNot = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_NodeLabelNotContext);
	    } else {
	        return this.getTypedRuleContext(OC_NodeLabelNotContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodeLabelAnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodeLabelAnd(this);
		}
	}


}



class OC_NodeLabelNotContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodeLabelNot;
    }

	oC_NodeLabelContainer() {
	    return this.getTypedRuleContext(OC_NodeLabelContainerContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodeLabelNot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodeLabelNot(this);
		}
	}


}



class OC_NodeLabelContainerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodeLabelContainer;
    }

	oC_LabelName() {
	    return this.getTypedRuleContext(OC_LabelNameContext,0);
	};

	oC_NodeLabelTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_NodeLabelTermContext);
	    } else {
	        return this.getTypedRuleContext(OC_NodeLabelTermContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_NodeLabelGroup() {
	    return this.getTypedRuleContext(OC_NodeLabelGroupContext,0);
	};

	oC_NodeLabelNotNested() {
	    return this.getTypedRuleContext(OC_NodeLabelNotNestedContext,0);
	};

	oC_NodeLabelAny() {
	    return this.getTypedRuleContext(OC_NodeLabelAnyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodeLabelContainer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodeLabelContainer(this);
		}
	}


}



class OC_NodeLabelGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodeLabelGroup;
    }

	oC_NodeLabelTerm() {
	    return this.getTypedRuleContext(OC_NodeLabelTermContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodeLabelGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodeLabelGroup(this);
		}
	}


}



class OC_NodeLabelNotNestedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodeLabelNotNested;
    }

	oC_NodeLabelTerm() {
	    return this.getTypedRuleContext(OC_NodeLabelTermContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodeLabelNotNested(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodeLabelNotNested(this);
		}
	}


}



class OC_NodeLabelAnyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodeLabelAny;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_NodeLabelTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_NodeLabelTermContext);
	    } else {
	        return this.getTypedRuleContext(OC_NodeLabelTermContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodeLabelAny(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodeLabelAny(this);
		}
	}


}



class OC_NodeLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodeLabel;
    }

	oC_LabelName() {
	    return this.getTypedRuleContext(OC_LabelNameContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodeLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodeLabel(this);
		}
	}


}



class OC_RangeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RangeLiteral;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_IntegerLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_IntegerLiteralContext);
	    } else {
	        return this.getTypedRuleContext(OC_IntegerLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RangeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RangeLiteral(this);
		}
	}


}



class OC_LabelNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_LabelName;
    }

	oC_SchemaName() {
	    return this.getTypedRuleContext(OC_SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_LabelName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_LabelName(this);
		}
	}


}



class OC_RelTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelTypeName;
    }

	oC_SchemaName() {
	    return this.getTypedRuleContext(OC_SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelTypeName(this);
		}
	}


}



class OC_ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Expression;
    }

	oC_OrExpression() {
	    return this.getTypedRuleContext(OC_OrExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Expression(this);
		}
	}


}



class OC_OrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_OrExpression;
    }

	oC_XorExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_XorExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_XorExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.OR);
	    } else {
	        return this.getToken(CypherParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_OrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_OrExpression(this);
		}
	}


}



class OC_XorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_XorExpression;
    }

	oC_AndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_AndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_AndExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	XOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.XOR);
	    } else {
	        return this.getToken(CypherParser.XOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_XorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_XorExpression(this);
		}
	}


}



class OC_AndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_AndExpression;
    }

	oC_NotExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_NotExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_NotExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.AND);
	    } else {
	        return this.getToken(CypherParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_AndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_AndExpression(this);
		}
	}


}



class OC_NotExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NotExpression;
    }

	oC_ComparisonExpression() {
	    return this.getTypedRuleContext(OC_ComparisonExpressionContext,0);
	};

	NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.NOT);
	    } else {
	        return this.getToken(CypherParser.NOT, i);
	    }
	};


	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NotExpression(this);
		}
	}


}



class OC_ComparisonExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ComparisonExpression;
    }

	oC_AddOrSubtractExpression() {
	    return this.getTypedRuleContext(OC_AddOrSubtractExpressionContext,0);
	};

	oC_PartialComparisonExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PartialComparisonExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_PartialComparisonExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ComparisonExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ComparisonExpression(this);
		}
	}


}



class OC_AddOrSubtractExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_AddOrSubtractExpression;
    }

	oC_MultiplyDivideModuloExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_MultiplyDivideModuloExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_MultiplyDivideModuloExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_AddOrSubtractExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_AddOrSubtractExpression(this);
		}
	}


}



class OC_MultiplyDivideModuloExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_MultiplyDivideModuloExpression;
    }

	oC_PowerOfExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PowerOfExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_PowerOfExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_MultiplyDivideModuloExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_MultiplyDivideModuloExpression(this);
		}
	}


}



class OC_PowerOfExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PowerOfExpression;
    }

	oC_UnaryAddOrSubtractExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_UnaryAddOrSubtractExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_UnaryAddOrSubtractExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PowerOfExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PowerOfExpression(this);
		}
	}


}



class OC_UnaryAddOrSubtractExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_UnaryAddOrSubtractExpression;
    }

	oC_StringListNullOperatorExpression() {
	    return this.getTypedRuleContext(OC_StringListNullOperatorExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_UnaryAddOrSubtractExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_UnaryAddOrSubtractExpression(this);
		}
	}


}



class OC_StringListNullOperatorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_StringListNullOperatorExpression;
    }

	oC_PropertyOrLabelsExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PropertyOrLabelsExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_PropertyOrLabelsExpressionContext,i);
	    }
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	IS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.IS);
	    } else {
	        return this.getToken(CypherParser.IS, i);
	    }
	};


	NULL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.NULL);
	    } else {
	        return this.getToken(CypherParser.NULL, i);
	    }
	};


	NOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.NOT);
	    } else {
	        return this.getToken(CypherParser.NOT, i);
	    }
	};


	oC_RegularExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_RegularExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_RegularExpressionContext,i);
	    }
	};

	oC_PropertyLookup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PropertyLookupContext);
	    } else {
	        return this.getTypedRuleContext(OC_PropertyLookupContext,i);
	    }
	};

	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.IN);
	    } else {
	        return this.getToken(CypherParser.IN, i);
	    }
	};


	STARTS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.STARTS);
	    } else {
	        return this.getToken(CypherParser.STARTS, i);
	    }
	};


	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.WITH);
	    } else {
	        return this.getToken(CypherParser.WITH, i);
	    }
	};


	ENDS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.ENDS);
	    } else {
	        return this.getToken(CypherParser.ENDS, i);
	    }
	};


	CONTAINS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.CONTAINS);
	    } else {
	        return this.getToken(CypherParser.CONTAINS, i);
	    }
	};


	oC_FunctionInvocation() {
	    return this.getTypedRuleContext(OC_FunctionInvocationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_StringListNullOperatorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_StringListNullOperatorExpression(this);
		}
	}


}



class OC_RegularExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RegularExpression;
    }

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RegularExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RegularExpression(this);
		}
	}


}



class OC_PropertyOrLabelsExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PropertyOrLabelsExpression;
    }

	oC_Atom() {
	    return this.getTypedRuleContext(OC_AtomContext,0);
	};

	oC_PropertyLookup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PropertyLookupContext);
	    } else {
	        return this.getTypedRuleContext(OC_PropertyLookupContext,i);
	    }
	};

	oC_NodeLabels() {
	    return this.getTypedRuleContext(OC_NodeLabelsContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PropertyOrLabelsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PropertyOrLabelsExpression(this);
		}
	}


}



class OC_NodeProjectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NodeProjection;
    }

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_PropertyLookup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PropertyLookupContext);
	    } else {
	        return this.getTypedRuleContext(OC_PropertyLookupContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NodeProjection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NodeProjection(this);
		}
	}


}



class OC_AtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Atom;
    }

	oC_Literal() {
	    return this.getTypedRuleContext(OC_LiteralContext,0);
	};

	oC_NodeProjection() {
	    return this.getTypedRuleContext(OC_NodeProjectionContext,0);
	};

	oC_Parameter() {
	    return this.getTypedRuleContext(OC_ParameterContext,0);
	};

	oC_LegacyParameter() {
	    return this.getTypedRuleContext(OC_LegacyParameterContext,0);
	};

	oC_CaseExpression() {
	    return this.getTypedRuleContext(OC_CaseExpressionContext,0);
	};

	COUNT() {
	    return this.getToken(CypherParser.COUNT, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_ListComprehension() {
	    return this.getTypedRuleContext(OC_ListComprehensionContext,0);
	};

	oC_PatternComprehension() {
	    return this.getTypedRuleContext(OC_PatternComprehensionContext,0);
	};

	FILTER() {
	    return this.getToken(CypherParser.FILTER, 0);
	};

	oC_FilterExpression() {
	    return this.getTypedRuleContext(OC_FilterExpressionContext,0);
	};

	EXTRACT() {
	    return this.getToken(CypherParser.EXTRACT, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	oC_Reduce() {
	    return this.getTypedRuleContext(OC_ReduceContext,0);
	};

	ALL() {
	    return this.getToken(CypherParser.ALL, 0);
	};

	ANY() {
	    return this.getToken(CypherParser.ANY, 0);
	};

	NONE() {
	    return this.getToken(CypherParser.NONE, 0);
	};

	SINGLE() {
	    return this.getToken(CypherParser.SINGLE, 0);
	};

	oC_ShortestPathPattern() {
	    return this.getTypedRuleContext(OC_ShortestPathPatternContext,0);
	};

	oC_RelationshipsPattern() {
	    return this.getTypedRuleContext(OC_RelationshipsPatternContext,0);
	};

	oC_ParenthesizedExpression() {
	    return this.getTypedRuleContext(OC_ParenthesizedExpressionContext,0);
	};

	oC_FunctionInvocation() {
	    return this.getTypedRuleContext(OC_FunctionInvocationContext,0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_ExplicitProcedureInvocation() {
	    return this.getTypedRuleContext(OC_ExplicitProcedureInvocationContext,0);
	};

	oC_RegularQuery() {
	    return this.getTypedRuleContext(OC_RegularQueryContext,0);
	};

	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	oC_Pattern() {
	    return this.getTypedRuleContext(OC_PatternContext,0);
	};

	oC_Hint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_HintContext);
	    } else {
	        return this.getTypedRuleContext(OC_HintContext,i);
	    }
	};

	oC_Where() {
	    return this.getTypedRuleContext(OC_WhereContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Atom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Atom(this);
		}
	}


}



class OC_LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Literal;
    }

	oC_NumberLiteral() {
	    return this.getTypedRuleContext(OC_NumberLiteralContext,0);
	};

	StringLiteral() {
	    return this.getToken(CypherParser.StringLiteral, 0);
	};

	oC_BooleanLiteral() {
	    return this.getTypedRuleContext(OC_BooleanLiteralContext,0);
	};

	NULL() {
	    return this.getToken(CypherParser.NULL, 0);
	};

	oC_MapLiteral() {
	    return this.getTypedRuleContext(OC_MapLiteralContext,0);
	};

	oC_ListLiteral() {
	    return this.getTypedRuleContext(OC_ListLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Literal(this);
		}
	}


}



class OC_BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_BooleanLiteral;
    }

	TRUE() {
	    return this.getToken(CypherParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(CypherParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_BooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_BooleanLiteral(this);
		}
	}


}



class OC_ListLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ListLiteral;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ListLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ListLiteral(this);
		}
	}


}



class OC_ReduceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Reduce;
    }

	REDUCE() {
	    return this.getToken(CypherParser.REDUCE, 0);
	};

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	oC_IdInColl() {
	    return this.getTypedRuleContext(OC_IdInCollContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Reduce(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Reduce(this);
		}
	}


}



class OC_PartialComparisonExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PartialComparisonExpression;
    }

	oC_AddOrSubtractExpression() {
	    return this.getTypedRuleContext(OC_AddOrSubtractExpressionContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PartialComparisonExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PartialComparisonExpression(this);
		}
	}


}



class OC_ParenthesizedExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ParenthesizedExpression;
    }

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ParenthesizedExpression(this);
		}
	}


}



class OC_RelationshipsPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RelationshipsPattern;
    }

	oC_NodePattern() {
	    return this.getTypedRuleContext(OC_NodePatternContext,0);
	};

	oC_PatternElementChain = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PatternElementChainContext);
	    } else {
	        return this.getTypedRuleContext(OC_PatternElementChainContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RelationshipsPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RelationshipsPattern(this);
		}
	}


}



class OC_FilterExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_FilterExpression;
    }

	oC_IdInColl() {
	    return this.getTypedRuleContext(OC_IdInCollContext,0);
	};

	oC_Where() {
	    return this.getTypedRuleContext(OC_WhereContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_FilterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_FilterExpression(this);
		}
	}


}



class OC_IdInCollContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_IdInColl;
    }

	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	IN() {
	    return this.getToken(CypherParser.IN, 0);
	};

	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_IdInColl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_IdInColl(this);
		}
	}


}



class OC_FunctionInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_FunctionInvocation;
    }

	oC_FunctionName() {
	    return this.getTypedRuleContext(OC_FunctionNameContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	DISTINCT() {
	    return this.getToken(CypherParser.DISTINCT, 0);
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_FunctionInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_FunctionInvocation(this);
		}
	}


}



class OC_FunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_FunctionName;
    }

	oC_ProcedureName() {
	    return this.getTypedRuleContext(OC_ProcedureNameContext,0);
	};

	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_FunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_FunctionName(this);
		}
	}


}



class OC_ExplicitProcedureInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ExplicitProcedureInvocation;
    }

	oC_ProcedureName() {
	    return this.getTypedRuleContext(OC_ProcedureNameContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ExplicitProcedureInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ExplicitProcedureInvocation(this);
		}
	}


}



class OC_ImplicitProcedureInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ImplicitProcedureInvocation;
    }

	oC_ProcedureName() {
	    return this.getTypedRuleContext(OC_ProcedureNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ImplicitProcedureInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ImplicitProcedureInvocation(this);
		}
	}


}



class OC_ProcedureResultFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ProcedureResultField;
    }

	oC_SymbolicName() {
	    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ProcedureResultField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ProcedureResultField(this);
		}
	}


}



class OC_ProcedureNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ProcedureName;
    }

	oC_Namespace() {
	    return this.getTypedRuleContext(OC_NamespaceContext,0);
	};

	oC_SymbolicName() {
	    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ProcedureName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ProcedureName(this);
		}
	}


}



class OC_NamespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Namespace;
    }

	oC_SymbolicName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_SymbolicNameContext);
	    } else {
	        return this.getTypedRuleContext(OC_SymbolicNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Namespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Namespace(this);
		}
	}


}



class OC_ListComprehensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ListComprehension;
    }

	oC_FilterExpression() {
	    return this.getTypedRuleContext(OC_FilterExpressionContext,0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Expression() {
	    return this.getTypedRuleContext(OC_ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ListComprehension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ListComprehension(this);
		}
	}


}



class OC_PatternComprehensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PatternComprehension;
    }

	oC_RelationshipsPattern() {
	    return this.getTypedRuleContext(OC_RelationshipsPatternContext,0);
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_Variable() {
	    return this.getTypedRuleContext(OC_VariableContext,0);
	};

	WHERE() {
	    return this.getToken(CypherParser.WHERE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PatternComprehension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PatternComprehension(this);
		}
	}


}



class OC_PropertyLookupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PropertyLookup;
    }

	oC_PropertyKeyName() {
	    return this.getTypedRuleContext(OC_PropertyKeyNameContext,0);
	};

	SP() {
	    return this.getToken(CypherParser.SP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PropertyLookup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PropertyLookup(this);
		}
	}


}



class OC_CaseExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CaseExpression;
    }

	END() {
	    return this.getToken(CypherParser.END, 0);
	};

	ELSE() {
	    return this.getToken(CypherParser.ELSE, 0);
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	CASE() {
	    return this.getToken(CypherParser.CASE, 0);
	};

	oC_CaseAlternatives = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_CaseAlternativesContext);
	    } else {
	        return this.getTypedRuleContext(OC_CaseAlternativesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CaseExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CaseExpression(this);
		}
	}


}



class OC_CaseAlternativesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_CaseAlternatives;
    }

	WHEN() {
	    return this.getToken(CypherParser.WHEN, 0);
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	THEN() {
	    return this.getToken(CypherParser.THEN, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_CaseAlternatives(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_CaseAlternatives(this);
		}
	}


}



class OC_VariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Variable;
    }

	oC_SymbolicName() {
	    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Variable(this);
		}
	}


}



class OC_NumberLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_NumberLiteral;
    }

	oC_DoubleLiteral() {
	    return this.getTypedRuleContext(OC_DoubleLiteralContext,0);
	};

	oC_IntegerLiteral() {
	    return this.getTypedRuleContext(OC_IntegerLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_NumberLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_NumberLiteral(this);
		}
	}


}



class OC_MapLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_MapLiteral;
    }

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	oC_PropertyKeyName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PropertyKeyNameContext);
	    } else {
	        return this.getTypedRuleContext(OC_PropertyKeyNameContext,i);
	    }
	};

	oC_Expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OC_ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_MapLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_MapLiteral(this);
		}
	}


}



class OC_LegacyParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_LegacyParameter;
    }

	oC_SymbolicName() {
	    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
	};

	DecimalInteger() {
	    return this.getToken(CypherParser.DecimalInteger, 0);
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_LegacyParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_LegacyParameter(this);
		}
	}


}



class OC_ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Parameter;
    }

	oC_SymbolicName() {
	    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
	};

	DecimalInteger() {
	    return this.getToken(CypherParser.DecimalInteger, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Parameter(this);
		}
	}


}



class OC_PropertyExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PropertyExpression;
    }

	oC_Atom() {
	    return this.getTypedRuleContext(OC_AtomContext,0);
	};

	oC_PropertyLookup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OC_PropertyLookupContext);
	    } else {
	        return this.getTypedRuleContext(OC_PropertyLookupContext,i);
	    }
	};

	SP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CypherParser.SP);
	    } else {
	        return this.getToken(CypherParser.SP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PropertyExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PropertyExpression(this);
		}
	}


}



class OC_PropertyKeyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_PropertyKeyName;
    }

	oC_SchemaName() {
	    return this.getTypedRuleContext(OC_SchemaNameContext,0);
	};

	DecimalInteger() {
	    return this.getToken(CypherParser.DecimalInteger, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_PropertyKeyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_PropertyKeyName(this);
		}
	}


}



class OC_IntegerLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_IntegerLiteral;
    }

	HexInteger() {
	    return this.getToken(CypherParser.HexInteger, 0);
	};

	OctalInteger() {
	    return this.getToken(CypherParser.OctalInteger, 0);
	};

	DecimalInteger() {
	    return this.getToken(CypherParser.DecimalInteger, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_IntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_IntegerLiteral(this);
		}
	}


}



class OC_DoubleLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_DoubleLiteral;
    }

	ExponentDecimalReal() {
	    return this.getToken(CypherParser.ExponentDecimalReal, 0);
	};

	RegularDecimalReal() {
	    return this.getToken(CypherParser.RegularDecimalReal, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_DoubleLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_DoubleLiteral(this);
		}
	}


}



class OC_SchemaNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SchemaName;
    }

	oC_SymbolicName() {
	    return this.getTypedRuleContext(OC_SymbolicNameContext,0);
	};

	oC_ReservedWord() {
	    return this.getTypedRuleContext(OC_ReservedWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SchemaName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SchemaName(this);
		}
	}


}



class OC_ReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_ReservedWord;
    }

	ALL() {
	    return this.getToken(CypherParser.ALL, 0);
	};

	ASC() {
	    return this.getToken(CypherParser.ASC, 0);
	};

	ASCENDING() {
	    return this.getToken(CypherParser.ASCENDING, 0);
	};

	BY() {
	    return this.getToken(CypherParser.BY, 0);
	};

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	DELETE() {
	    return this.getToken(CypherParser.DELETE, 0);
	};

	DESC() {
	    return this.getToken(CypherParser.DESC, 0);
	};

	DESCENDING() {
	    return this.getToken(CypherParser.DESCENDING, 0);
	};

	DETACH() {
	    return this.getToken(CypherParser.DETACH, 0);
	};

	EXISTS() {
	    return this.getToken(CypherParser.EXISTS, 0);
	};

	LIMIT() {
	    return this.getToken(CypherParser.LIMIT, 0);
	};

	MATCH() {
	    return this.getToken(CypherParser.MATCH, 0);
	};

	MERGE() {
	    return this.getToken(CypherParser.MERGE, 0);
	};

	ON() {
	    return this.getToken(CypherParser.ON, 0);
	};

	OPTIONAL() {
	    return this.getToken(CypherParser.OPTIONAL, 0);
	};

	ORDER() {
	    return this.getToken(CypherParser.ORDER, 0);
	};

	REMOVE() {
	    return this.getToken(CypherParser.REMOVE, 0);
	};

	RETURN() {
	    return this.getToken(CypherParser.RETURN, 0);
	};

	SET() {
	    return this.getToken(CypherParser.SET, 0);
	};

	L_SKIP() {
	    return this.getToken(CypherParser.L_SKIP, 0);
	};

	WHERE() {
	    return this.getToken(CypherParser.WHERE, 0);
	};

	WITH() {
	    return this.getToken(CypherParser.WITH, 0);
	};

	UNION() {
	    return this.getToken(CypherParser.UNION, 0);
	};

	UNWIND() {
	    return this.getToken(CypherParser.UNWIND, 0);
	};

	AND() {
	    return this.getToken(CypherParser.AND, 0);
	};

	AS() {
	    return this.getToken(CypherParser.AS, 0);
	};

	CONTAINS() {
	    return this.getToken(CypherParser.CONTAINS, 0);
	};

	DISTINCT() {
	    return this.getToken(CypherParser.DISTINCT, 0);
	};

	ENDS() {
	    return this.getToken(CypherParser.ENDS, 0);
	};

	IN() {
	    return this.getToken(CypherParser.IN, 0);
	};

	IS() {
	    return this.getToken(CypherParser.IS, 0);
	};

	NOT() {
	    return this.getToken(CypherParser.NOT, 0);
	};

	OR() {
	    return this.getToken(CypherParser.OR, 0);
	};

	STARTS() {
	    return this.getToken(CypherParser.STARTS, 0);
	};

	XOR() {
	    return this.getToken(CypherParser.XOR, 0);
	};

	FALSE() {
	    return this.getToken(CypherParser.FALSE, 0);
	};

	TRUE() {
	    return this.getToken(CypherParser.TRUE, 0);
	};

	NULL() {
	    return this.getToken(CypherParser.NULL, 0);
	};

	CONSTRAINT() {
	    return this.getToken(CypherParser.CONSTRAINT, 0);
	};

	FOR() {
	    return this.getToken(CypherParser.FOR, 0);
	};

	REQUIRE() {
	    return this.getToken(CypherParser.REQUIRE, 0);
	};

	UNIQUE() {
	    return this.getToken(CypherParser.UNIQUE, 0);
	};

	CASE() {
	    return this.getToken(CypherParser.CASE, 0);
	};

	WHEN() {
	    return this.getToken(CypherParser.WHEN, 0);
	};

	THEN() {
	    return this.getToken(CypherParser.THEN, 0);
	};

	ELSE() {
	    return this.getToken(CypherParser.ELSE, 0);
	};

	END() {
	    return this.getToken(CypherParser.END, 0);
	};

	MANDATORY() {
	    return this.getToken(CypherParser.MANDATORY, 0);
	};

	SCALAR() {
	    return this.getToken(CypherParser.SCALAR, 0);
	};

	OF() {
	    return this.getToken(CypherParser.OF, 0);
	};

	ADD() {
	    return this.getToken(CypherParser.ADD, 0);
	};

	DROP() {
	    return this.getToken(CypherParser.DROP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_ReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_ReservedWord(this);
		}
	}


}



class OC_SymbolicNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_SymbolicName;
    }

	UnescapedSymbolicName() {
	    return this.getToken(CypherParser.UnescapedSymbolicName, 0);
	};

	EscapedSymbolicName() {
	    return this.getToken(CypherParser.EscapedSymbolicName, 0);
	};

	HexLetter() {
	    return this.getToken(CypherParser.HexLetter, 0);
	};

	COUNT() {
	    return this.getToken(CypherParser.COUNT, 0);
	};

	FILTER() {
	    return this.getToken(CypherParser.FILTER, 0);
	};

	EXTRACT() {
	    return this.getToken(CypherParser.EXTRACT, 0);
	};

	ANY() {
	    return this.getToken(CypherParser.ANY, 0);
	};

	NONE() {
	    return this.getToken(CypherParser.NONE, 0);
	};

	SINGLE() {
	    return this.getToken(CypherParser.SINGLE, 0);
	};

	LOAD() {
	    return this.getToken(CypherParser.LOAD, 0);
	};

	END() {
	    return this.getToken(CypherParser.END, 0);
	};

	FROM() {
	    return this.getToken(CypherParser.FROM, 0);
	};

	START() {
	    return this.getToken(CypherParser.START, 0);
	};

	CYPHER() {
	    return this.getToken(CypherParser.CYPHER, 0);
	};

	oC_KeywordsThatArePartOfFunctionNames() {
	    return this.getTypedRuleContext(OC_KeywordsThatArePartOfFunctionNamesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_SymbolicName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_SymbolicName(this);
		}
	}


}



class OC_KeywordsThatArePartOfFunctionNamesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_KeywordsThatArePartOfFunctionNames;
    }

	ASSERT() {
	    return this.getToken(CypherParser.ASSERT, 0);
	};

	CALL() {
	    return this.getToken(CypherParser.CALL, 0);
	};

	CASE() {
	    return this.getToken(CypherParser.CASE, 0);
	};

	COMMIT() {
	    return this.getToken(CypherParser.COMMIT, 0);
	};

	CREATE() {
	    return this.getToken(CypherParser.CREATE, 0);
	};

	CSV() {
	    return this.getToken(CypherParser.CSV, 0);
	};

	DELETE() {
	    return this.getToken(CypherParser.DELETE, 0);
	};

	EXPLAIN() {
	    return this.getToken(CypherParser.EXPLAIN, 0);
	};

	FIELDTERMINATOR() {
	    return this.getToken(CypherParser.FIELDTERMINATOR, 0);
	};

	FOREACH() {
	    return this.getToken(CypherParser.FOREACH, 0);
	};

	HEADERS() {
	    return this.getToken(CypherParser.HEADERS, 0);
	};

	INDEX() {
	    return this.getToken(CypherParser.INDEX, 0);
	};

	JOIN() {
	    return this.getToken(CypherParser.JOIN, 0);
	};

	NODE() {
	    return this.getToken(CypherParser.NODE, 0);
	};

	PERIODIC() {
	    return this.getToken(CypherParser.PERIODIC, 0);
	};

	PROFILE() {
	    return this.getToken(CypherParser.PROFILE, 0);
	};

	REDUCE() {
	    return this.getToken(CypherParser.REDUCE, 0);
	};

	SCAN() {
	    return this.getToken(CypherParser.SCAN, 0);
	};

	SHORTESTPATH() {
	    return this.getToken(CypherParser.SHORTESTPATH, 0);
	};

	USE() {
	    return this.getToken(CypherParser.USE, 0);
	};

	USING() {
	    return this.getToken(CypherParser.USING, 0);
	};

	WHEN() {
	    return this.getToken(CypherParser.WHEN, 0);
	};

	YIELD() {
	    return this.getToken(CypherParser.YIELD, 0);
	};

	oC_ReservedWord() {
	    return this.getTypedRuleContext(OC_ReservedWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_KeywordsThatArePartOfFunctionNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_KeywordsThatArePartOfFunctionNames(this);
		}
	}


}



class OC_LeftArrowHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_LeftArrowHead;
    }


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_LeftArrowHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_LeftArrowHead(this);
		}
	}


}



class OC_RightArrowHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_RightArrowHead;
    }


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_RightArrowHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_RightArrowHead(this);
		}
	}


}



class OC_DashContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CypherParser.RULE_oC_Dash;
    }


	enterRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.enterOC_Dash(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CypherListener ) {
	        listener.exitOC_Dash(this);
		}
	}


}




CypherParser.OC_CypherContext = OC_CypherContext; 
CypherParser.OC_QueryOptionsContext = OC_QueryOptionsContext; 
CypherParser.OC_AnyCypherOptionContext = OC_AnyCypherOptionContext; 
CypherParser.OC_CypherOptionContext = OC_CypherOptionContext; 
CypherParser.OC_VersionNumberContext = OC_VersionNumberContext; 
CypherParser.OC_ExplainContext = OC_ExplainContext; 
CypherParser.OC_ProfileContext = OC_ProfileContext; 
CypherParser.OC_ConfigurationOptionContext = OC_ConfigurationOptionContext; 
CypherParser.OC_StatementContext = OC_StatementContext; 
CypherParser.OC_QueryContext = OC_QueryContext; 
CypherParser.OC_UseContext = OC_UseContext; 
CypherParser.OC_RegularQueryContext = OC_RegularQueryContext; 
CypherParser.OC_BulkImportQueryContext = OC_BulkImportQueryContext; 
CypherParser.OC_PeriodicCommitHintContext = OC_PeriodicCommitHintContext; 
CypherParser.OC_LoadCSVQueryContext = OC_LoadCSVQueryContext; 
CypherParser.OC_UnionContext = OC_UnionContext; 
CypherParser.OC_SingleQueryContext = OC_SingleQueryContext; 
CypherParser.OC_SinglePartQueryContext = OC_SinglePartQueryContext; 
CypherParser.OC_MultiPartQueryContext = OC_MultiPartQueryContext; 
CypherParser.OC_UpdatingClauseContext = OC_UpdatingClauseContext; 
CypherParser.OC_ReadingClauseContext = OC_ReadingClauseContext; 
CypherParser.OC_CommandContext = OC_CommandContext; 
CypherParser.OC_CreateUniqueConstraintContext = OC_CreateUniqueConstraintContext; 
CypherParser.OC_CreateNodePropertyExistenceConstraintContext = OC_CreateNodePropertyExistenceConstraintContext; 
CypherParser.OC_CreateRelationshipPropertyExistenceConstraintContext = OC_CreateRelationshipPropertyExistenceConstraintContext; 
CypherParser.OC_CreateIndexContext = OC_CreateIndexContext; 
CypherParser.OC_DropUniqueConstraintContext = OC_DropUniqueConstraintContext; 
CypherParser.OC_DropNodePropertyExistenceConstraintContext = OC_DropNodePropertyExistenceConstraintContext; 
CypherParser.OC_DropRelationshipPropertyExistenceConstraintContext = OC_DropRelationshipPropertyExistenceConstraintContext; 
CypherParser.OC_DropIndexContext = OC_DropIndexContext; 
CypherParser.OC_IndexContext = OC_IndexContext; 
CypherParser.OC_UniqueConstraintContext = OC_UniqueConstraintContext; 
CypherParser.OC_NodePropertyExistenceConstraintContext = OC_NodePropertyExistenceConstraintContext; 
CypherParser.OC_RelationshipPropertyExistenceConstraintContext = OC_RelationshipPropertyExistenceConstraintContext; 
CypherParser.OC_RelationshipPatternSyntaxContext = OC_RelationshipPatternSyntaxContext; 
CypherParser.OC_LoadCSVContext = OC_LoadCSVContext; 
CypherParser.OC_MatchContext = OC_MatchContext; 
CypherParser.OC_UnwindContext = OC_UnwindContext; 
CypherParser.OC_MergeContext = OC_MergeContext; 
CypherParser.OC_MergeActionContext = OC_MergeActionContext; 
CypherParser.OC_CreateContext = OC_CreateContext; 
CypherParser.OC_CreateUniqueContext = OC_CreateUniqueContext; 
CypherParser.OC_SetContext = OC_SetContext; 
CypherParser.OC_SetItemContext = OC_SetItemContext; 
CypherParser.OC_DeleteContext = OC_DeleteContext; 
CypherParser.OC_RemoveContext = OC_RemoveContext; 
CypherParser.OC_RemoveItemContext = OC_RemoveItemContext; 
CypherParser.OC_ForeachContext = OC_ForeachContext; 
CypherParser.OC_InQueryCallContext = OC_InQueryCallContext; 
CypherParser.OC_SubQueryContext = OC_SubQueryContext; 
CypherParser.OC_SubQueryVariableScopeContext = OC_SubQueryVariableScopeContext; 
CypherParser.OC_SubQueryDirectiveContext = OC_SubQueryDirectiveContext; 
CypherParser.OC_StandaloneCallContext = OC_StandaloneCallContext; 
CypherParser.OC_YieldItemsContext = OC_YieldItemsContext; 
CypherParser.OC_YieldItemContext = OC_YieldItemContext; 
CypherParser.OC_WithContext = OC_WithContext; 
CypherParser.OC_ReturnContext = OC_ReturnContext; 
CypherParser.OC_ReturnBodyContext = OC_ReturnBodyContext; 
CypherParser.OC_ReturnItemsContext = OC_ReturnItemsContext; 
CypherParser.OC_ReturnItemContext = OC_ReturnItemContext; 
CypherParser.OC_OrderContext = OC_OrderContext; 
CypherParser.OC_SkipContext = OC_SkipContext; 
CypherParser.OC_LimitContext = OC_LimitContext; 
CypherParser.OC_SortItemContext = OC_SortItemContext; 
CypherParser.OC_HintContext = OC_HintContext; 
CypherParser.OC_IdentifiedIndexLookupContext = OC_IdentifiedIndexLookupContext; 
CypherParser.OC_IndexQueryContext = OC_IndexQueryContext; 
CypherParser.OC_IdLookupContext = OC_IdLookupContext; 
CypherParser.OC_LiteralIdsContext = OC_LiteralIdsContext; 
CypherParser.OC_WhereContext = OC_WhereContext; 
CypherParser.OC_PatternContext = OC_PatternContext; 
CypherParser.OC_PatternPartContext = OC_PatternPartContext; 
CypherParser.OC_AnonymousPatternPartContext = OC_AnonymousPatternPartContext; 
CypherParser.OC_ShortestPathPatternContext = OC_ShortestPathPatternContext; 
CypherParser.OC_PatternElementContext = OC_PatternElementContext; 
CypherParser.OC_OpenParenContext = OC_OpenParenContext; 
CypherParser.OC_CloseParenContext = OC_CloseParenContext; 
CypherParser.OC_NodePatternContext = OC_NodePatternContext; 
CypherParser.OC_PatternElementChainContext = OC_PatternElementChainContext; 
CypherParser.OC_RelationshipPatternContext = OC_RelationshipPatternContext; 
CypherParser.OC_RelationshipDetailContext = OC_RelationshipDetailContext; 
CypherParser.OC_QuantifiedPathPatternContext = OC_QuantifiedPathPatternContext; 
CypherParser.OC_PathPatternQuantifierContext = OC_PathPatternQuantifierContext; 
CypherParser.OC_PropertiesContext = OC_PropertiesContext; 
CypherParser.OC_RelTypeContext = OC_RelTypeContext; 
CypherParser.OC_RelationshipTypesContext = OC_RelationshipTypesContext; 
CypherParser.OC_RelationshipTypeTermContext = OC_RelationshipTypeTermContext; 
CypherParser.OC_RelationshipTypeOrContext = OC_RelationshipTypeOrContext; 
CypherParser.OC_RelationshipTypeAndContext = OC_RelationshipTypeAndContext; 
CypherParser.OC_RelationshipTypeNotContext = OC_RelationshipTypeNotContext; 
CypherParser.OC_RelationshipTypeContainerContext = OC_RelationshipTypeContainerContext; 
CypherParser.OC_RelationshipTypeGroupContext = OC_RelationshipTypeGroupContext; 
CypherParser.OC_RelationshipTypeNotNestedContext = OC_RelationshipTypeNotNestedContext; 
CypherParser.OC_RelationshipTypeAnyContext = OC_RelationshipTypeAnyContext; 
CypherParser.OC_NodeLabelsContext = OC_NodeLabelsContext; 
CypherParser.OC_NodeLabelTermContext = OC_NodeLabelTermContext; 
CypherParser.OC_NodeLabelOrContext = OC_NodeLabelOrContext; 
CypherParser.OC_NodeLabelAndContext = OC_NodeLabelAndContext; 
CypherParser.OC_NodeLabelNotContext = OC_NodeLabelNotContext; 
CypherParser.OC_NodeLabelContainerContext = OC_NodeLabelContainerContext; 
CypherParser.OC_NodeLabelGroupContext = OC_NodeLabelGroupContext; 
CypherParser.OC_NodeLabelNotNestedContext = OC_NodeLabelNotNestedContext; 
CypherParser.OC_NodeLabelAnyContext = OC_NodeLabelAnyContext; 
CypherParser.OC_NodeLabelContext = OC_NodeLabelContext; 
CypherParser.OC_RangeLiteralContext = OC_RangeLiteralContext; 
CypherParser.OC_LabelNameContext = OC_LabelNameContext; 
CypherParser.OC_RelTypeNameContext = OC_RelTypeNameContext; 
CypherParser.OC_ExpressionContext = OC_ExpressionContext; 
CypherParser.OC_OrExpressionContext = OC_OrExpressionContext; 
CypherParser.OC_XorExpressionContext = OC_XorExpressionContext; 
CypherParser.OC_AndExpressionContext = OC_AndExpressionContext; 
CypherParser.OC_NotExpressionContext = OC_NotExpressionContext; 
CypherParser.OC_ComparisonExpressionContext = OC_ComparisonExpressionContext; 
CypherParser.OC_AddOrSubtractExpressionContext = OC_AddOrSubtractExpressionContext; 
CypherParser.OC_MultiplyDivideModuloExpressionContext = OC_MultiplyDivideModuloExpressionContext; 
CypherParser.OC_PowerOfExpressionContext = OC_PowerOfExpressionContext; 
CypherParser.OC_UnaryAddOrSubtractExpressionContext = OC_UnaryAddOrSubtractExpressionContext; 
CypherParser.OC_StringListNullOperatorExpressionContext = OC_StringListNullOperatorExpressionContext; 
CypherParser.OC_RegularExpressionContext = OC_RegularExpressionContext; 
CypherParser.OC_PropertyOrLabelsExpressionContext = OC_PropertyOrLabelsExpressionContext; 
CypherParser.OC_NodeProjectionContext = OC_NodeProjectionContext; 
CypherParser.OC_AtomContext = OC_AtomContext; 
CypherParser.OC_LiteralContext = OC_LiteralContext; 
CypherParser.OC_BooleanLiteralContext = OC_BooleanLiteralContext; 
CypherParser.OC_ListLiteralContext = OC_ListLiteralContext; 
CypherParser.OC_ReduceContext = OC_ReduceContext; 
CypherParser.OC_PartialComparisonExpressionContext = OC_PartialComparisonExpressionContext; 
CypherParser.OC_ParenthesizedExpressionContext = OC_ParenthesizedExpressionContext; 
CypherParser.OC_RelationshipsPatternContext = OC_RelationshipsPatternContext; 
CypherParser.OC_FilterExpressionContext = OC_FilterExpressionContext; 
CypherParser.OC_IdInCollContext = OC_IdInCollContext; 
CypherParser.OC_FunctionInvocationContext = OC_FunctionInvocationContext; 
CypherParser.OC_FunctionNameContext = OC_FunctionNameContext; 
CypherParser.OC_ExplicitProcedureInvocationContext = OC_ExplicitProcedureInvocationContext; 
CypherParser.OC_ImplicitProcedureInvocationContext = OC_ImplicitProcedureInvocationContext; 
CypherParser.OC_ProcedureResultFieldContext = OC_ProcedureResultFieldContext; 
CypherParser.OC_ProcedureNameContext = OC_ProcedureNameContext; 
CypherParser.OC_NamespaceContext = OC_NamespaceContext; 
CypherParser.OC_ListComprehensionContext = OC_ListComprehensionContext; 
CypherParser.OC_PatternComprehensionContext = OC_PatternComprehensionContext; 
CypherParser.OC_PropertyLookupContext = OC_PropertyLookupContext; 
CypherParser.OC_CaseExpressionContext = OC_CaseExpressionContext; 
CypherParser.OC_CaseAlternativesContext = OC_CaseAlternativesContext; 
CypherParser.OC_VariableContext = OC_VariableContext; 
CypherParser.OC_NumberLiteralContext = OC_NumberLiteralContext; 
CypherParser.OC_MapLiteralContext = OC_MapLiteralContext; 
CypherParser.OC_LegacyParameterContext = OC_LegacyParameterContext; 
CypherParser.OC_ParameterContext = OC_ParameterContext; 
CypherParser.OC_PropertyExpressionContext = OC_PropertyExpressionContext; 
CypherParser.OC_PropertyKeyNameContext = OC_PropertyKeyNameContext; 
CypherParser.OC_IntegerLiteralContext = OC_IntegerLiteralContext; 
CypherParser.OC_DoubleLiteralContext = OC_DoubleLiteralContext; 
CypherParser.OC_SchemaNameContext = OC_SchemaNameContext; 
CypherParser.OC_ReservedWordContext = OC_ReservedWordContext; 
CypherParser.OC_SymbolicNameContext = OC_SymbolicNameContext; 
CypherParser.OC_KeywordsThatArePartOfFunctionNamesContext = OC_KeywordsThatArePartOfFunctionNamesContext; 
CypherParser.OC_LeftArrowHeadContext = OC_LeftArrowHeadContext; 
CypherParser.OC_RightArrowHeadContext = OC_RightArrowHeadContext; 
CypherParser.OC_DashContext = OC_DashContext; 
